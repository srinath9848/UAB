@model UAB.DTO.ChartSummaryDTO
<div class="col-md-12">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">
                <span>Chart ID : <label style="color: black;">@Model.CodingDTO.ClinicalCaseID&nbsp;&nbsp;&nbsp;&nbsp;</label></span>
                @if (Model.CodedBy != null)
                {
                    <span>Coded by : <label style="color:black;">@Model.CodedBy&nbsp;&nbsp;&nbsp;&nbsp;</label></span>
                }
                @if (Model.QABy != null)
                {
                    <span>
                        QA by : <label style="color:black;"> @Model.QABy&nbsp;&nbsp;&nbsp;&nbsp; </label>
                    </span>
                }
                @if (Model.ShadowQABy != null)
                {
                    <span>
                        ShadowQA by : <label style="color:black;"> @Model.ShadowQABy &nbsp;&nbsp;&nbsp;&nbsp;</label>
                    </span>
                }

            </h4>
        </div>
        @Html.HiddenFor(model => model.CodingDTO.ClinicalCaseID, new { @class = "form-control" })
        @Html.Hidden("hdnPayorID")
        @Html.Hidden("hdnProviderID")
        @Html.Hidden("hdnCpt")
        @Html.Hidden("hdnMod")
        @Html.Hidden("hdnDx")
        @Html.Hidden("hdnProviderFeedbackID")
        @Html.Hidden("hdnCoderDxRemarks")
        @Html.Hidden("hdnStatusId")
        @Html.Hidden("hdnCoderDxCodes")

        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15"></label>
            <label class="col-md-3 lessWidth m-t-15">Coder/QA</label>
            <label class="col-md-2 m-t-15">QA Comments</label>
            <div class="input-group-append CoderCorrections" style="visibility:hidden">
                <span class="input-group-text">
                    &nbsp;<i class="fa fa-save fa-lg" aria-hidden="true"></i>
                    &nbsp;<i class="fa fa-save fa-lg" aria-hidden="true"></i>
                </span>
            </div>
            <label class="col-md-3 m-t-15">Coder Comments</label>
        </div>

        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15">Payor</label>
            @{int len = (!string.IsNullOrEmpty(Model.QAPayorText) ? 10 : 20); }
            @{string PayorText = (Model.PayorText?.Length > len) ? Model.PayorText.Substring(0, len) + ".." : Model.PayorText;}
            @{string QAPayorText = (Model.QAPayorText?.Length > len) ? "/" + Model.QAPayorText.Substring(0, len) + ".." : "/" + Model.QAPayorText;}
            @{string title = (!string.IsNullOrEmpty(Model.QAPayorText) ? Model.PayorText + "/" + Model.QAPayorText : Model.PayorText);}
            @Html.DropDownListFor(model => model.PayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), new { @style = "display:none", @class = "form-control CoderDetails" })
            <div title="@title" class="col-md-3 lessWidth input-group">
                <div name="PayorText" class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
                    <span style="white-space:nowrap">
                        @if (!string.IsNullOrEmpty(Model.QAPayorText))
                        {
                            <label style="color:red">@PayorText</label>
                            <label style="color:green;">@QAPayorText</label>
                        }
                        else
                        {
                            <label style="color: green;">@PayorText</label>
                        }
                    </span>
                </div>
            </div>
            @{string Show = (string.IsNullOrEmpty(Model.QAPayorRemarks) ? "visibility:hidden" : "display:flex");}
            <div title="@Model.QAPayorRemarks" class="col-md-2 input-group" style="@Show">
                <input type="text" class="form-control QARemarks" value="@Model.QAPayorRemarks" />
            </div>
            @Html.DropDownListFor(model => model.QAPayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), new { @id = "PayorID1", @class = "form-control QARevised", @style = "display:none" })
            <div class="input-group-append CoderCorrections" style="@Show">
                <span class="input-group-text">
                    &nbsp;<i id="Payor" title="PayorID1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                    &nbsp;<i id="Payor" title="PayorID1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                </span>
            </div>
            <div class="col-md-3 input-group CoderCorrections">
                @Html.TextBoxFor(model => model.RevisedPayorRemarks, new { @class = "form-control Revised", @id = "RevisedPayorRemarks", @style = @Show })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15">Provider</label>
            @{ len = (!string.IsNullOrEmpty(Model.QAProviderText) ? 10 : 20); }
            @{string ProviderText = (Model.ProviderText?.Length > len) ? Model.ProviderText.Substring(0, len) + ".." : Model.ProviderText;}
            @{string QAProviderText = (Model.QAProviderText?.Length > len) ? "/" + Model.QAProviderText.Substring(0, len) + ".." : "/" + Model.QAProviderText;}
            @{title = (!string.IsNullOrEmpty(Model.QAProviderText) ? Model.ProviderText + "/" + Model.QAProviderText : Model.ProviderText);}
            @Html.DropDownListFor(model => model.ProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), new { @style = "display:none", @class = "form-control CoderDetails" })

            <div title="@title" class="col-md-3 lessWidth input-group">
                <div class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
                    <span style="white-space:nowrap">

                        @if (!string.IsNullOrEmpty(Model.QAProviderText))
                        {
                            <label style="color: red;">@ProviderText</label>
                            <label style="color: green">@QAProviderText</label>
                        }
                        else
                        {
                            <label style="color: green;">@ProviderText</label>
                        }
                    </span>
                </div>
            </div>
            @{Show = (string.IsNullOrEmpty(Model.QAProviderRemarks) ? "visibility:hidden" : "display:flex");}
            <div title="@Model.QAProviderRemarks" class="col-md-2 input-group" style="@Show">
                <input type="text" class="form-control QARemarks" value="@Model.QAProviderRemarks" />
            </div>
            @Html.DropDownListFor(model => model.QAProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), new { @id = "ProviderID1", @class = "form-control QARevised", @style = "display:none" })
            <div class="input-group-append CoderCorrections" style="@Show">
                <span class="input-group-text">
                    &nbsp;<i id="Provider" title="ProviderID1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                    &nbsp;<i id="Provider" title="ProviderID1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                </span>
            </div>
            <div class="col-md-3 input-group CoderCorrections">
                @Html.TextBoxFor(model => model.RevisedProviderRemarks, new { @class = "form-control Revised", @id = "RevisedProviderRemarks", @style = @Show })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15">CPT</label>
            @{len = (!string.IsNullOrEmpty(Model.QACPTCode) ? 10 : 20); }
            @{string CPTCode = (Model.CPTCode?.Length > len) ? Model.CPTCode.Substring(0, len) + ".." : Model.CPTCode;}
            @{string QACPTCode = (Model.QACPTCode?.Length > len) ? "/" + Model.QACPTCode.Substring(0, len) + ".." : "/" + Model.QACPTCode;}
            @{title = (!string.IsNullOrEmpty(Model.QACPTCode) ? Model.CPTCode + "/" + Model.QACPTCode : Model.CPTCode);}
            @Html.TextAreaFor(model => model.CPTCode, new { @style = "display:none", @class = "form-control CoderDetails" })

            <div title="@title" class="col-md-3 lessWidth input-group">
                <div class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
                    <span style="white-space:nowrap">
                        @if (!string.IsNullOrEmpty(Model.QACPTCode))
                        {
                            <label style="color: red;">@CPTCode</label>
                            <label style="color:green">@QACPTCode</label>
                        }
                        else
                        {
                            <label style="color: green;">@CPTCode</label>
                        }
                    </span>
                </div>
            </div>
            @{Show = (string.IsNullOrEmpty(Model.QACPTCodeRemarks) ? "visibility:hidden" : "display:flex");}
            <div title="@Model.QACPTCodeRemarks" class="col-md-2 input-group" style="@Show">
                <input type="text" class="form-control QARemarks" value="@Model.QACPTCodeRemarks" />
            </div>
            @Html.HiddenFor(model => model.QACPTCode, new { @class = "form-control", @id = "CPTCode1" })
            <div class="input-group-append CoderCorrections" style="@Show">
                <span class="input-group-text">
                    &nbsp;<i id="CPT" title="CPTCode1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                    &nbsp;<i id="CPT" title="CPTCode1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                </span>
            </div>
            <div class="col-md-3 input-group CoderCorrections">
                @Html.TextBoxFor(model => model.RevisedCPTRemarks, new { @class = "form-control Revised", @id = "RevisedCPTRemarks", @style = @Show })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15">Mod</label>
            @{len = (!string.IsNullOrEmpty(Model.QAMod) ? 10 : 20); }
            @{string Mod = (Model.Mod?.Length > len) ? Model.Mod.Substring(0, len) + ".." : Model.Mod;}
            @{string QAMod = (Model.QAMod?.Length > len) ? "/" + Model.QAMod.Substring(0, len) + ".." : "/" + Model.QAMod;}
            @{title = (!string.IsNullOrEmpty(Model.QAMod) ? Model.Mod + "/" + Model.QAMod : Model.Mod);}
            @Html.TextAreaFor(model => model.Mod, new { @style = "display:none", @class = "form-control CoderDetails" })

            <div title="@title" class="col-md-3 lessWidth input-group">
                <div class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
                    <span style="white-space:nowrap">
                        @if (!string.IsNullOrEmpty(Model.QAMod))
                        {
                            <label style="color: red;">@Mod</label>
                            <label style="color:green">@QAMod</label>
                        }
                        else
                        {
                            <label style="color: green;">@Mod</label>
                        }
                    </span>
                </div>
            </div>
            @{Show = (string.IsNullOrEmpty(Model.QAModRemarks) ? "visibility:hidden" : "display:flex");}
            <div title="@Model.QAModRemarks" class="col-md-2 input-group" style="@Show">
                <input type="text" class="form-control QARemarks" value="@Model.QAModRemarks" />
            </div>
            @Html.HiddenFor(model => model.QAMod, new { @class = "form-control", @id = "Mod1" })
            <div class="input-group-append CoderCorrections" style="@Show">
                <span class="input-group-text">
                    &nbsp;<i id="Mod" title="Mod1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                    &nbsp;<i id="Mod" title="Mod1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                </span>
            </div>
            <div class="col-md-3 input-group CoderCorrections">
                @Html.TextBoxFor(model => model.RevisedModRemarks, new { @class = "form-control Revised", @id = "RevisedModRemarks", @style = @Show })
            </div>
        </div>
        @*<div class="form-group row">
                <label class="col-md-3 lessWidth m-t-15">Dx</label>
                @{len = (!string.IsNullOrEmpty(Model.QADx) ? 10 : 20); }
                @{string Dx = (Model.Dx?.Length > len) ? Model.Dx.Substring(0, len) + ".." : Model.Dx;}
                @{string QADx = (Model.QADx?.Length > len) ? "/" + Model.QADx.Substring(0, len) + ".." : "/" + Model.QADx;}
                @{title = (!string.IsNullOrEmpty(Model.QADx) ? Model.Dx + "/" + Model.QADx : Model.Dx);}
                @Html.TextAreaFor(model => model.Dx, new { @style = "display:none", @class = "form-control CoderDetails" })

                <div title="@title" class="col-md-3 lessWidth input-group">
                    <div class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
                        <span style="white-space:nowrap">

                            @if (!string.IsNullOrEmpty(Model.QADx))
                            {
                                <label style="color: red;">@Dx</label>
                                <label style="color:green">@QADx</label>
                            }
                            else
                            {
                                <label style="color: green;">@Dx</label>
                            }
                        </span>
                    </div>
                </div>
                @{Show = (string.IsNullOrEmpty(Model.QADxRemarks) ? "visibility:hidden" : "display:flex");}
                <div title="@Model.QADxRemarks" class="col-md-2 input-group" style="@Show">
                    <input type="text" class="form-control QARemarks" value="@Model.QADxRemarks" />
                </div>
                <div class="input-group-append CoderCorrections" style="@Show">
                    <span class="input-group-text">
                        &nbsp;<i id="DX" title="Dx1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                        &nbsp;<i id="DX" title="Dx1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                    </span>
                </div>
                @Html.HiddenFor(model => model.QADx, new { @class = "form-control", @id = "Dx1" })
                <div class="col-md-3 input-group CoderCorrections" style="@Show">
                    @Html.TextBoxFor(model => model.RevisedDXRemarks, new { @class = "form-control", @id = "RevisedDXRemarks" })
                </div>
            </div>*@
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15"> Feedback to Provider</label>
            @{len = (!string.IsNullOrEmpty(Model.QAProviderFeedbackText) ? 10 : 20); }
            @{string ProviderFeedbackText = (Model.ProviderFeedbackText?.Length > len) ? Model.ProviderFeedbackText.Substring(0, len) + ".." : Model.ProviderFeedbackText;}
            @{string QAProviderFeedbackText = (Model.QAProviderFeedbackText?.Length > len) ? "/" + Model.QAProviderFeedbackText.Substring(0, len) + ".." : "/" + Model.QAProviderFeedbackText;}
            @{title = (!string.IsNullOrEmpty(Model.QAProviderFeedbackText) ? Model.ProviderFeedbackText + "/" + Model.QAProviderFeedbackText : Model.ProviderFeedbackText);}
            @Html.DropDownListFor(model => model.ProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), new { @style = "display:none", @class = "form-control CoderDetails" })

            <div title="@title" class="col-md-3 lessWidth input-group">
                <div class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
                    <span style="white-space:nowrap">

                        @if (!string.IsNullOrEmpty(Model.QAProviderFeedbackText))
                        {
                            <label style="color: red;">@ProviderFeedbackText</label>
                            <label style="color:green">@QAProviderFeedbackText</label>
                        }
                        else
                        {
                            <label style="color: green;">@ProviderFeedbackText</label>
                        }
                    </span>
                </div>
            </div>
            @{Show = (string.IsNullOrEmpty(Model.QAProviderFeedbackRemarks) ? "visibility:hidden" : "display:flex");}
            <div title="@Model.QAProviderFeedbackRemarks" class="col-md-2 input-group" style="@Show">
                <input type="text" class="form-control QARemarks" value="@Model.QAProviderFeedbackRemarks" />
            </div>
            <div class="input-group-append CoderCorrections" style="@Show">
                <span class="input-group-text">
                    &nbsp;<i id="ProviderFeedback" title="Feedback1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                    &nbsp;<i id="ProviderFeedback" title="Feedback1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                </span>
            </div>
            @Html.DropDownListFor(model => model.QAProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), new { @style = "display:none", @class = "form-control QARevised", @id = "Feedback1" })
            <div class="col-md-3 input-group CoderCorrections">
                @Html.TextBoxFor(model => model.RevisedProviderFeedbackRemarks, new { @class = "form-control Revised", @id = "RevisedProviderFeedbackRemarks", @style = @Show })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15">Note Title</label>
            <div class="col-md-3 lessWidth">
                @Html.TextAreaFor(model => model.NoteTitle, new { @class = "form-control CoderDetails" })
            </div>
        </div>

        @{
            //Dictionary<int, string> dictQADxCodes = Utility.GetQADxCodes(Model.QADx, 0);
            //List<string> lstdxCodes = Model.Dx.Split(',').ToList();
            //int? count = (dictQADxCodes?.Count() > lstdxCodes.Count()) ? dictQADxCodes?.Count() : lstdxCodes.Count();
            //Dictionary<int, string> dictDxCodes = Utility.GetDxCodes(Model.Dx, count.Value);
            //Dictionary<int, string> dictQADxRemarks = Utility.GetQAOrShadowQADxRemarks(Model.QADxRemarks, count.Value);

            List<string> lstQadxCodes = Model.QADx.Split('|').ToList();
            List<string> lstdxCodes = Model.Dx.Split(',').ToList();
            int? count = (lstQadxCodes?.Count() > lstdxCodes.Count()) ? lstQadxCodes?.Count() : lstdxCodes.Count();
            Dictionary<int, string> dictQADxCodes = Utility.GetQADxCodes(Model.QADx, count.Value);
            count = (count > dictQADxCodes.Count()) ? count : dictQADxCodes.Count();
            Dictionary<int, string> dictDxCodes = Utility.GetDxCodes(Model.Dx, count.Value);
            int totalDxCount = count.Value + 1;
            Dictionary<int, string> dictQADxRemarks = Utility.GetQAOrShadowQADxRemarks(Model.QADxRemarks, count.Value);

        }
        <div id="DivDx">
            @{
                int j = 1;
                for (int i = 0; i < count; i++)
                {
                    <div class="form-group row">
                        @if (i == 0)
                        {
                            <label class="col-md-3 lessWidth m-t-15">Dx</label>
                        }
                        else
                        {
                            <label class="col-md-3 lessWidth m-t-15"></label>
                        }

                        @{len = (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) ? 10 : 20); }
                        @{string Dx = (dictDxCodes.ElementAt(i).Value?.Length > len) ? dictDxCodes.ElementAt(i).Value.Substring(0, len) + ".." : dictDxCodes.ElementAt(i).Value;}
                        @{string QADx = (dictQADxCodes?.ElementAt(i).Value?.Length > len) ? "/" + dictQADxCodes?.ElementAt(i).Value.Substring(0, len) + ".." : "/" + dictQADxCodes?.ElementAt(i).Value;}
                        @{title = (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) ? dictDxCodes.ElementAt(i).Value + "/" + dictQADxCodes?.ElementAt(i).Value : dictDxCodes.ElementAt(i).Value);}

                        <div class="col-md-3 lessWidth input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="basic-addon1">@j</span>
                            </div>
                            <div class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
                                <span style="white-space:nowrap">
                                    @if (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value))
                                    {
                                        <label class="Dx_@j" style="color: red;">@Dx</label>
                                        <label style="color:green">@QADx</label>
                                    }
                                    else
                                    {
                                        <label style="color: green;">@Dx</label>
                                    }
                                </span>
                            </div>
                        </div>
                        @{ Show = (string.IsNullOrEmpty(dictQADxRemarks?.ElementAt(i).Value) ? "visibility:hidden" : "display:flex"); }
                        <div title="" class="col-md-2 input-group" style="@Show">
                            <input type="text" class="form-control QARemarks" value="@dictQADxRemarks?.ElementAt(i).Value" />
                        </div>
                        <div class="input-group-append CoderCorrections" style="@Show">
                            <span class="input-group-text">
                                &nbsp;<i id="Dx_@j" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                                &nbsp;<i id="Dx_@j" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                            </span>
                        </div>
                        <div class="col-md-3 input-group CoderCorrections">
                            <input type="text" id="Dx_@j" class="form-control DxRemarks_@j" style="@Show" />
                        </div>
                    </div>

                    j = j + 1;
                }
            }
        </div>
    </div>

    <div class="clearfix"></div>
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">QA Details</h4>
        </div>
        <div class="card-body">
            <div class="col-12">
                <div class="row mb-3">
                    <div class="col-lg-6">
                        <div class="form-group row">
                            <label class="col-md-3 m-t-15">
                                Error Type
                            </label>
                            <div class="col-md-7">
                                @Html.DropDownListFor(model => model.QADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), "--Select--", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.QADTO.ErrorType, null, new { @class = "text-danger ErrorType" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group row">
                            <label class="col-md-5 m-t-15"></label>
                            <div class="col-md-7">
                                <button id="btnsubmit" type="submit" class="btn btn-success">Submit</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<style>
    .errMsg {
        font-weight: bold;
        font-size: 20px;
    }

    #sortable-1 {
        list-style-type: none;
        margin: 0;
        padding: 0;
        width: 25%;
    }

    /*     #sortable-1 li {
                    margin: 0 3px 3px 3px;
                    padding: 0.4em;
                    padding-left: 1.5em;
                    font-size: 17px;
                    height: 16px;
                }*/

    .default {
        background: #cedc98;
        border: 1px solid #DDDDDD;
        color: #333333;
    }

    .custom-control-label:before {
        left: -35px;
    }

    .custom-control-label:after {
        left: -35px;
    }

    .custom-control {
        padding-left: 0rem;
    }
</style>
<script src="~/dashboardassets/libs/jquery/dist/jquery.min.js"></script>
<script type="text/javascript">
    $("#PayorID1").attr('title', $("#PayorID1 option:selected").text());
    $("#ProviderID").attr('title', $("#ProviderID option:selected").text());
    $("#ProviderFeedbackID").attr('title', $("#ProviderFeedbackID option:selected").text());
</script>
