@model List<UAB.DTO.ChartSummaryDTO>
    @using UAB.enums
    <div class="col-md-12">
        <div class="card">
            @Html.HiddenFor(model => model.FirstOrDefault().CodingDTO.ClinicalCaseID, new { @class = "form-control" })
            @Html.Hidden("hdnStatusId")

            @Html.Hidden("hdnRejectedDxRemarks")
            @Html.Hidden("hdnRejectedDxCodes")
            @Html.Hidden("hdnDxCodes")
            @Html.Hidden("hdnRejectedCptCodes")
            @Html.Hidden("hdnRejectedCptRemarks")
            @Html.Hidden("hdnCptCodes")

            @Html.Hidden("hdnAcceptedDxRemarks")
            @Html.Hidden("hdnAcceptedCptRemarks")

            @Html.Hidden("hdnRejectedDxRemarks1")
            @Html.Hidden("hdnRejectedDxCodes1")
            @Html.Hidden("hdnDxCodes1")
            @Html.Hidden("hdnRejectedCptCodes1")
            @Html.Hidden("hdnRejectedCptRemarks1")
            @Html.Hidden("hdnCptCodes1")

            @Html.Hidden("hdnAcceptedDxRemarks1")
            @Html.Hidden("hdnAcceptedCptRemarks1")

            @Html.Hidden("hdnRejectedDxRemarks2")
            @Html.Hidden("hdnRejectedDxCodes2")
            @Html.Hidden("hdnDxCodes2")
            @Html.Hidden("hdnRejectedCptCodes2")
            @Html.Hidden("hdnRejectedCptRemarks2")
            @Html.Hidden("hdnCptCodes2")

            @Html.Hidden("hdnAcceptedDxRemarks2")
            @Html.Hidden("hdnAcceptedCptRemarks2")

            @Html.Hidden("hdnRejectedDxRemarks3")
            @Html.Hidden("hdnRejectedDxCodes3")
            @Html.Hidden("hdnDxCodes3")
            @Html.Hidden("hdnRejectedCptCodes3")
            @Html.Hidden("hdnRejectedCptRemarks3")
            @Html.Hidden("hdnCptCodes3")

            @Html.Hidden("hdnAcceptedDxRemarks3")
            @Html.Hidden("hdnAcceptedCptRemarks3")

            @Html.Hidden("hdnClaim1")
            @Html.Hidden("hdnClaim2")
            @Html.Hidden("hdnClaim3")
            @Html.Hidden("hdnClaim4")

            @Html.Hidden("hdnClaimId1")
            @Html.Hidden("hdnClaimId2")
            @Html.Hidden("hdnClaimId3")
            @Html.Hidden("hdnClaimId4")

            @Html.Hidden("hdnAcceptedClaim1")
            @Html.Hidden("hdnAcceptedClaim2")
            @Html.Hidden("hdnAcceptedClaim3")
            @Html.Hidden("hdnAcceptedClaim4")

            @Html.Hidden("hdnQAErrorTypeID1")
            @Html.Hidden("hdnQAErrorTypeID2")
            @Html.Hidden("hdnQAErrorTypeID3")
            @Html.Hidden("hdnQAErrorTypeID4")

            <ul class="nav nav-tabs" role="tablist">
                @{
                int tabIndex = 1;
                foreach (var tabitem in Model)
                {
                if (tabitem.ClaimId == null)
                tabitem.ClaimId = 0;

                var claimId = string.Format("tabIndex_{0}_ClaimId_{1}", tabIndex, tabitem.ClaimId);
                if (tabitem.ClaimId == 0)
                {
                <li class="nav-item tabDiv1"> <a class="nav-link tab active show" data-toggle="tab" id="@claimId" alt="tabDiv1" href="#claim1" role="tab"><span class="hidden-sm-up"></span> <span class="hidden-xs-down tabclick">Claim @tabIndex</span></a> </li>
                }
                else
                {
                <li class="@string.Format(" nav-item tabDiv{0}", tabIndex)" style="display:inherit;"> <a class="nav-link tab" data-toggle="tab" id="@claimId" alt="tabDiv2" href="@string.Format(" #claim{0}", tabIndex)" role="tab"> <span class="hidden-sm-up"></span> <span class="hidden-xs-down tabclick">Claim @tabIndex</span></a></li>
                }
                tabIndex = tabIndex + 1;
                }
                }
            </ul>
            <div class="tab-content tabcontent-border">
                @{
                tabIndex = 1;
                foreach (var tabitem in Model)
                {
                tabitem.TabIndex = tabIndex;
                if (tabitem.ClaimId == null)
                tabitem.ClaimId = 0;

                if (tabitem.ClaimId == 0)
                {
                <div class="tab-pane active" id="claim1" role="tabpanel">
                    <div class="p-20" id="tabDiv1">
                        <br />
                        <div class="form-group row AlignColumns">
                            <label class="col-md-3 lessWidth m-t-15"></label>
                            <label class="col-md-3 lessWidth input-group ControlWidth">Coder/QA</label>
                            <label class="col-md-2 m-t-15">QA Comments</label>
                            <div class="input-group-append CoderCorrections" style="visibility:hidden">
                                <span class="input-group-text">
                                    &nbsp;<i class="fa fa-save fa-lg" aria-hidden="true"></i>
                                    &nbsp;<i class="fa fa-save fa-lg" aria-hidden="true"></i>
                                </span>
                            </div>
                            <label class="col-md-3 m-t-15">Coder Comments</label>
                        </div>
                        <div class="form-group row">
                            <label class="col-md-3 lessWidth m-t-15">Provider</label>
                            @{int len = ((!string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderText) && !Model.FirstOrDefault().ProviderText.Equals(Model.FirstOrDefault().QAProviderText)) ? 10 : 20); }
                            @{string ProviderText = (Model.FirstOrDefault().ProviderText?.Length > len) ? Model.FirstOrDefault().ProviderText.Substring(0, len) + ".." : Model.FirstOrDefault().ProviderText;}
                            @{string QAProviderText = (Model.FirstOrDefault().QAProviderText?.Length > len) ? "/" + Model.FirstOrDefault().QAProviderText.Substring(0, len) + ".." : "/" + Model.FirstOrDefault().QAProviderText;}
                            @{string title = (!string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderText) ? Model.FirstOrDefault().ProviderText + "/" + Model.FirstOrDefault().QAProviderText : Model.FirstOrDefault().ProviderText);}
                            @Html.DropDownListFor(model => model.FirstOrDefault().ProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @class = "form-control CoderDetails", @id = string.Format("CoderProviderID_{0}", tabIndex), @style = "display:none;" })
                            @{string Accepted = (string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                            @{string Rejected = (string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

                            <div title="@title" class="col-md-3 lessWidth input-group ControlWidth">
                                <div class="form-control CoderDetails" style="line-height:2.2;overflow:hidden;height:32px;">
                                    <span style="white-space:nowrap">

                                        @if (!string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderText) && !Model.FirstOrDefault().ProviderText.Equals(Model.FirstOrDefault().QAProviderText))
                                        {
                                        <label style="color: red;">@ProviderText</label>
                                        <label style="color: green">@QAProviderText</label>
                                        }
                                        else
                                        {
                                        <label style="color: green;">@ProviderText</label>
                                        }
                                    </span>
                                </div>
                            </div>
                            @{string Show = (string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderRemarks) ? "visibility:hidden" : "display:flex");}
                            @{ var QAProviderIDRemarks = string.Format("QAProviderIDRemarks_{0}", tabIndex);}
                            <div title="@Model.FirstOrDefault().QAProviderRemarks" class="col-md-2 input-group" style="@Show">
                                <input type="text" id="@QAProviderIDRemarks" class="form-control QARemarks ControlHeight" value="@Model.FirstOrDefault().QAProviderRemarks" />
                            </div>
                            @Html.DropDownListFor(model => model.FirstOrDefault().QAProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @id = string.Format("QAProviderID_{0}", tabIndex), @class = "form-control QARevised", @style = "display:none;" })
                            <div class="input-group-append CoderCorrections ControlHeight" style="@Show">
                                <span class="input-group-text ControlHeight" style="margin-left:-12px;">
                                    &nbsp;<i id="ProviderID_@Model.FirstOrDefault().TabIndex" class="@Accepted" aria-hidden="true"></i>
                                    &nbsp;<i id="ProviderID_@Model.FirstOrDefault().TabIndex" class="@Rejected" aria-hidden="true"></i>
                                </span>
                            </div>
                            <div class="col-md-3 input-group CoderCorrections">
                                @Html.TextBoxFor(model => model.FirstOrDefault().RevisedProviderRemarks, new { @class = string.Format("form-control Revised RevisedProvider_{0}", @Model.FirstOrDefault().TabIndex), @id = string.Format("CoderProviderIDRemarks_{0}", @tabIndex), @style = @Show })
                                <span id="validProvider_@Model.FirstOrDefault().TabIndex" class="text-danger txtdanger" style="display:none">*</span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-md-3 lessWidth m-t-15">Payor</label>
                            @{ len = ((!string.IsNullOrEmpty(Model.FirstOrDefault().QAPayorText) && !Model.FirstOrDefault().PayorText.Equals(Model.FirstOrDefault().QAPayorText)) ? 10 : 20); }
                            @{string PayorText = (Model.FirstOrDefault().PayorText?.Length > len) ? Model.FirstOrDefault().PayorText.Substring(0, len) + ".." : Model.FirstOrDefault().PayorText;}
                            @{string QAPayorText = (Model.FirstOrDefault().QAPayorText?.Length > len) ? "/" + Model.FirstOrDefault().QAPayorText.Substring(0, len) + ".." : "/" + Model.FirstOrDefault().QAPayorText;}
                            @{title = (!string.IsNullOrEmpty(Model.FirstOrDefault().QAPayorText) ? Model.FirstOrDefault().PayorText + "/" + Model.FirstOrDefault().QAPayorText : Model.FirstOrDefault().PayorText);}
                            @{ var PayorID = string.Format("PayorID_{0}", @Model.FirstOrDefault().TabIndex);}
                            @Html.DropDownListFor(model => model.FirstOrDefault().PayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), "--Select--", new { @style = "display:none", @class = "form-control CoderDetails", @id = string.Format("CoderPayorID_{0}", tabIndex) })
                            @{Accepted = (string.IsNullOrEmpty(Model.FirstOrDefault().QAPayorRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                            @{Rejected = (string.IsNullOrEmpty(Model.FirstOrDefault().QAPayorRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

                            <div title="@title" class="col-md-3 lessWidth input-group ControlWidth">
                                <div name="PayorText" class="form-control CoderDetails" style="line-height:2.2;overflow:hidden;height:32px;">
                                    <span style="white-space:nowrap">
                                        @if (!string.IsNullOrEmpty(Model.FirstOrDefault().QAPayorText) && !Model.FirstOrDefault().PayorText.Equals(Model.FirstOrDefault().QAPayorText))
                                        {
                                        <label style="color:red">@PayorText</label>
                                        <label style="color:green;">@QAPayorText</label>
                                        }
                                        else
                                        {
                                        <label style="color: green;">@PayorText</label>
                                        }
                                    </span>
                                </div>
                            </div>
                            @{Show = (string.IsNullOrEmpty(Model.FirstOrDefault().QAPayorRemarks) ? "visibility:hidden" : "display:flex");}
                            <div title="@Model.FirstOrDefault().QAPayorRemarks" class="col-md-2 input-group" style="@Show">
                                @{ var QAPayorIDRemarks = string.Format("QAPayorIDRemarks_{0}", tabIndex);}
                                <input type="text" id="@QAPayorIDRemarks" class="form-control QARemarks" value="@Model.FirstOrDefault().QAPayorRemarks" />
                            </div>
                            @{ var QAPayorID = string.Format("QAPayorID_{0}", @Model.FirstOrDefault().TabIndex);}
                            @Html.DropDownListFor(model => model.FirstOrDefault().QAPayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), "--Select--", new { @id = string.Format("QAPayorID_{0}", tabIndex), @class = "form-control QARevised", @style = "display:none" })
                            <div class="input-group-append CoderCorrections" style="@Show">
                                <span class="input-group-text ControlHeight" style="margin-left:-12px;">
                                    &nbsp;<i id="PayorID_@Model.FirstOrDefault().TabIndex" class="@Accepted" aria-hidden="true"></i>
                                    &nbsp;<i id="PayorID_@Model.FirstOrDefault().TabIndex" class="@Rejected" aria-hidden="true"></i>
                                </span>
                            </div>
                            <div class="col-md-3 input-group CoderCorrections">
                                @Html.TextBoxFor(model => model.FirstOrDefault().RevisedPayorRemarks, new { @class = string.Format("form-control Revised RevisedPayor_{0}", @Model.FirstOrDefault().TabIndex), @style = @Show, @id = string.Format("CoderPayorIDRemarks_{0}", tabIndex) })
                                <span id="validPayor_@Model.FirstOrDefault().TabIndex" class="text-danger txtdanger" style="display:none">*</span>
                            </div>
                        </div>

                        <div class="form-group row">
                            <label class="col-md-3 lessWidth m-t-15">Note Title</label>
                            <div title="@Model.FirstOrDefault().NoteTitle" class="col-md-3 lessWidth ControlWidth">
                                @Html.TextBoxFor(model => model.FirstOrDefault().NoteTitle, new { @class = "form-control CoderDetails ControlHeight" })
                            </div>
                        </div>

                        @{
                        Dictionary<int, string>
                            dictDxCodes = Utility.GetDxCodes(Model.FirstOrDefault().Dx);
                            Dictionary<int, string>
                                dictQADxCodes = Utility.GetQAOrShadowQADxCodes(Model.FirstOrDefault().QADx);
                                Dictionary<int, string>
                                    dictQADxRemarks = Utility.GetQAOrShadowQADxRemarks(Model.FirstOrDefault().QADxRemarks);

                                    dictQADxCodes = (dictQADxCodes == null) ? new Dictionary<int, string>
                                        () : dictQADxCodes;
                                        dictQADxRemarks = (dictQADxRemarks == null) ? new Dictionary<int, string>
                                            () : dictQADxRemarks;

                                            int count = Math.Max(dictDxCodes.Count(), Math.Max(dictQADxCodes.Count(), 0));

                                            int totalDxCount = count + 1;

                                            Utility.AddEmptyRows(dictDxCodes, count, "NA");
                                            Utility.AddEmptyRows(dictQADxCodes, count, "");
                                            Utility.AddEmptyRows(dictQADxRemarks, count, "");

                                            }
                                            <div id="DivDx">
                                                @{
                                                int j = 1;
                                                int i;
                                                for (i = 0; i < count; i++)
                                                {
                                                <div class="form-group row">
                                                    @if (i == 0)
                                                    {
                                                    <label class="col-md-3 lessWidth m-t-15">Dx</label>
                                                    }
                                                    else
                                                    {
                                                    <label class="col-md-3 lessWidth m-t-15"></label>
                                                    }


                                                    @{string Dx = dictDxCodes.ElementAt(i).Value;}
                                                    @{string QADx = (dictQADxCodes?.ElementAt(i).Value?.Length > len) ? "/" + dictQADxCodes?.ElementAt(i).Value.Substring(0, len) + ".." : "/" + dictQADxCodes?.ElementAt(i).Value;}

                                                    @{
                                                    var DxClaimRemarks = string.Format("form-control DxClaim_{0}_Remarks_{1}", @Model.FirstOrDefault().TabIndex, @j);
                                                    var DxClaim = string.Format("DxClaim_{0}_{1}", @Model.FirstOrDefault().TabIndex, @j);
                                                    }

                                                    @if (!string.IsNullOrEmpty(QADx))
                                                    {
                                                    <div title="@Dx@QADx" class="col-md-3 lessWidth input-group ControlWidth">
                                                        <div class="input-group-prepend ControlHeight">
                                                            <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                                                        </div>
                                                        <div class="form-control CoderDetails" style="line-height:2.2;overflow:hidden;height:32px;">
                                                            <span style="white-space:nowrap">
                                                                @if (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value))
                                                                {
                                                                <label style="color: red;">@Dx</label>
                                                                <label style="color:green">@QADx</label>
                                                                }
                                                                else
                                                                {
                                                                <label style="color: green;">@Dx</label>
                                                                }
                                                            </span>
                                                        </div>
                                                    </div>
                                                    }
                                                    else
                                                    {
                                                    <div title="@Dx" class="col-md-3 lessWidth input-group ControlWidth">
                                                        <div class="input-group-prepend ControlHeight">
                                                            <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                                                        </div>
                                                        <div class="form-control CoderDetails" style="line-height:2.2;overflow:hidden;height:32px;">
                                                            <span style="white-space:nowrap">
                                                                <label style="color: green;">@Dx</label>
                                                            </span>
                                                        </div>
                                                    </div>
                                                    }
                                                    @if (!dictDxCodes.ElementAt(i).Value.Equals(dictQADxCodes.ElementAt(i).Value))
                                                    {
                                                    Show = "display:flex";

                                                    Accepted = (string.IsNullOrEmpty(dictQADxRemarks?.ElementAt(i).Value) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");
                                                    Rejected = (string.IsNullOrEmpty(dictQADxRemarks?.ElementAt(i).Value) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");

                                                    <div class="col-md-2 input-group ControlHeight" style="@Show">
                                                        <input type="text" id="Dxremarks_@j" class="form-control QARemarks" value="@dictQADxRemarks?.ElementAt(i).Value" />
                                                    </div>

                                                    @Html.HiddenFor(model => dictDxCodes.ElementAt(i).Value, new { @class = "form-control", @id = string.Format("DxClaim_{0}_Coder_{1}", Model.FirstOrDefault().TabIndex, @j) })
                                                    @Html.HiddenFor(model => dictQADxCodes.ElementAt(i).Value, new { @class = "form-control", @id = string.Format("DxClaim_{0}_QA_{1}", Model.FirstOrDefault().TabIndex, @j) })
                                                    <div class="input-group-append CoderCorrections" style="@Show">
                                                        <span class="input-group-text ControlHeight" style="margin-left:-12px;">
                                                            &nbsp;<i id="@DxClaim" class="@Accepted" aria-hidden="true"></i>
                                                            &nbsp;<i id="@DxClaim" class="@Rejected" aria-hidden="true"></i>
                                                        </span>
                                                    </div>

                                                    <div class="col-md-3 input-group CoderCorrections" style="display:flex">
                                                        <input type="text" id="@DxClaim" class="@DxClaimRemarks" style="@Show" onchange="removevalid('@DxClaimRemarks')" />
                                                        <span id="valid_@DxClaim" class="text-danger txtdanger" style="display:none">*</span>
                                                    </div>
                                                    }
                                                    else
                                                    {
                                                    Show = (string.IsNullOrEmpty(dictQADxRemarks?.ElementAt(i).Value) ? "display:none" : "display:flex");

                                                    Accepted = (string.IsNullOrEmpty(dictQADxRemarks?.ElementAt(i).Value) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");
                                                    Rejected = (string.IsNullOrEmpty(dictQADxRemarks?.ElementAt(i).Value) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");

                                                    <div class="col-md-2 input-group ControlHeight" style="@Show">
                                                        <input type="text" id="Dxremarks_@j" class="form-control QARemarks" value="@dictQADxRemarks?.ElementAt(i).Value" />
                                                    </div>

                                                    @Html.HiddenFor(model => dictDxCodes.ElementAt(i).Value, new { @class = "form-control", @id = string.Format("DxClaim_{0}_Coder_{1}", Model.FirstOrDefault().TabIndex, @j) })
                                                    @Html.HiddenFor(model => dictQADxCodes.ElementAt(i).Value, new { @class = "form-control", @id = string.Format("DxClaim_{0}_QA_{1}", Model.FirstOrDefault().TabIndex, @j) })
                                                    <div class="input-group-append CoderCorrections" style="@Show">
                                                        <span class="input-group-text ControlHeight" style="margin-left:-12px;">
                                                            &nbsp;<i id="@DxClaim" class="@Accepted" aria-hidden="true"></i>
                                                            &nbsp;<i id="@DxClaim" class="@Rejected" aria-hidden="true"></i>
                                                        </span>
                                                    </div>

                                                    <div class="col-md-3 input-group CoderCorrections" style="display:flex">
                                                        <input type="text" id="@DxClaim" class="@DxClaimRemarks" style="@Show" onchange="removevalid('@DxClaimRemarks')" />
                                                        <span id="valid_@DxClaim" class="text-danger txtdanger" style="display:none">*</span>
                                                    </div>
                                                    }
                                                </div>

                                                j = j + 1;
                                                }
                                                }
                                            </div>
                                            @{
                                            Dictionary<int, string>
                                                dictCptCodes = Utility.GetCptCodes(Model.FirstOrDefault().CPTCode);
                                                Dictionary<int, string>
                                                    dictQACptCodes = Utility.GetQAOrShadowQACptCodes(Model.FirstOrDefault().QACPTCode);
                                                    Dictionary<int, string>
                                                        dictQACptRemarks = Utility.GetQAOrShadowQACptRemarks(Model.FirstOrDefault().QACPTCodeRemarks);

                                                        dictQACptCodes = (dictQACptCodes == null) ? new Dictionary<int, string>
                                                            () : dictQACptCodes;
                                                            dictQACptRemarks = (dictQACptRemarks == null) ? new Dictionary<int, string>
                                                                () : dictQACptRemarks;

                                                                count = Math.Max(dictCptCodes.Count(), Math.Max(dictQACptCodes.Count(), 0));

                                                                int totalCptCount = count + 1;

                                                                Utility.AddEmptyRows(dictCptCodes, count, "NA");
                                                                Utility.AddEmptyRows(dictQACptCodes, count, "");
                                                                Utility.AddEmptyRows(dictQACptRemarks, count, "");
                                                                }
                                                                <div id="DivCpt">
                                                                    @{
                                                                    j = 1;
                                                                    for (i = 0; i < count; i++)
                                                                    {
                                                                    <div class="form-group row" id="DivCptRow_@j">
                                                                        @if (i == 0)
                                                                        {
                                                                        <label class="col-md-3 lessWidth m-t-15">CPT</label>
                                                                        }
                                                                        else
                                                                        {
                                                                        <label class="col-md-3 lessWidth m-t-15"></label>
                                                                        }
                                                                        @{ string[] coderCptcodes = dictCptCodes?.ElementAt(i).Value.Split("^");}
                                                                        @{ string[] qaCptcodes = dictQACptCodes?.ElementAt(i).Value.Split("^");}


                                                                        @if (!string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value))
                                                                        {
                                                                        string codercptCode = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[0]);
                                                                        string qacptCode = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[0]);
                                                                        string color = (codercptCode != qacptCode) ? "color:blue;" : "";
                                                                        string cptCode = !string.IsNullOrEmpty(codercptCode) ? codercptCode : "";
                                                                        string cptCode1 = cptCode == qacptCode ? "" : codercptCode + "/";

                                                                        string coderMod = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[1]);
                                                                        string qaMod = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[1]);
                                                                        string mod = qaMod == "null" ? "" : qaMod;
                                                                        string cptMod = !string.IsNullOrEmpty(coderMod) ? coderMod : "";
                                                                        string cptMod1 = cptMod == qaMod ? "" : coderMod + "/";

                                                                        string coderQty = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[2]);
                                                                        string qaQty = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[2]);
                                                                        string cptQty = !string.IsNullOrEmpty(coderQty) ? coderQty : "";
                                                                        string cptQty1 = cptQty == qaQty ? "" : coderQty + "/";

                                                                        string coderLinks = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[3]);
                                                                        string qaLinks = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[3]);
                                                                        string linkAll = qaLinks == "null" ? "" : qaLinks;
                                                                        string cptLinks = !string.IsNullOrEmpty(coderLinks) ? coderLinks : "";
                                                                        string cptLinks1 = !string.IsNullOrEmpty(coderLinks) ? coderLinks + "/" : "";

                                                                        string link = !string.IsNullOrEmpty(@qaLinks) || @qaLinks != "null" ? @qaLinks : "Link All";
                                                                        cptLinks1 = cptLinks == link ? "" : coderLinks + "/";
                                                                        <div title="Code : @cptCode1@qacptCode, Mod : @cptMod1@qaMod, Quantity : @cptQty1@qaQty, Link : @cptLinks1@link" class="col-md-3 input-group">
                                                                            <div class="input-group-prepend">
                                                                                <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                                                                            </div>
                                                                            @{
                                                                            if (codercptCode == qacptCode)
                                                                            {
                                                                            <div class="form-control CoderDetails" style="min-width:60px;">
                                                                                <span style="color:green">@codercptCode.Replace("/", "")</span>
                                                                            </div>
                                                                            <div class="form-control CoderDetails">
                                                                                <span style="color:green">@coderMod.Replace("/", "")</span>
                                                                            </div>
                                                                            <div class="form-control CoderDetails">
                                                                                <span style="color:green">@coderQty.Replace("/", "")</span>
                                                                            </div>
                                                                            <div class="form-control CoderDetails">
                                                                                <span style="color:green">@cptLinks1.Replace("/", "")</span>
                                                                            </div>
                                                                            }
                                                                            else
                                                                            {
                                                                            if (codercptCode == "NA")
                                                                            color = "color:fuchsia;";
                                                                            <div class="form-control CoderDetails" style="min-width:60px;">
                                                                                <span style="color:green">@cptCode1.Replace("/", "")</span>
                                                                                <br />
                                                                                <span style="color:red">@qacptCode</span>
                                                                            </div>
                                                                            color = (coderMod != qaMod) ? "color:blue;" : "";
                                                                            if (coderMod == "NA")
                                                                            color = "color:fuchsia;";
                                                                            <div class="form-control CoderDetails">
                                                                                <span style="color:green">@coderMod.Replace("/", "")</span>
                                                                                <br />
                                                                                <span style="color:red">@qaMod</span>
                                                                            </div>

                                                                            color = (coderQty != qaQty) ? "color:blue;" : "";
                                                                            if (coderQty == "NA")
                                                                            color = "color:fuchsia;";
                                                                            <div class="form-control CoderDetails">
                                                                                <span style="color:green">@coderQty.Replace("/", "")</span>
                                                                                <br />
                                                                                <span style="color:red">@qaQty</span>
                                                                            </div>

                                                                            color = (coderLinks != qaLinks) ? "color:blue;" : "";
                                                                            if (coderLinks == "NA")
                                                                            color = "color:fuchsia;";
                                                                            <div class="form-control CoderDetails">
                                                                                <span style="color:green">@cptLinks1.Replace("/", "")</span><br />
                                                                                <span style="color:red">@link</span>
                                                                            </div>
                                                                            }
                                                                            }

                                                                            <div class="input-group-append">
                                                                                <span class="input-group-text AcceptRejectWidth AcceptRejectWidth_@tabIndex">
                                                                                    &nbsp;<i id="Cpt_@j" class="fa fa-check-circle fa-lg AdjustAcceptReject AdjustAcceptReject_@tabIndex" aria-hidden="true"></i>
                                                                                    &nbsp;<i id="Cpt_@j" class="fa fa-times-circle fa-lg AdjustReject_@tabIndex" aria-hidden="true"></i>
                                                                                </span>
                                                                            </div>
                                                                        </div>
                                                                        }
                                                                        else
                                                                        {
                                                                        string cptVal = coderCptcodes[0] == "NA" ? "" : coderCptcodes[0];
                                                                        string modVal1 = coderCptcodes[1] == "null" ? "" : coderCptcodes[1];
                                                                        string qtyVal = coderCptcodes[2];
                                                                        string linkAllVal1 = coderCptcodes[3] == "null" ? "" : coderCptcodes[3];
                                                                        <div title="Code : @cptVal, Mod : @modVal1, Quantity : @qtyVal, Link : @linkAllVal1" class="col-md-3 input-group">
                                                                            <div class="input-group-prepend ControlHeight">
                                                                                <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                                                                            </div>
                                                                            <input type="text" class="form-control CoderDetails ControlHeight" disabled style="color: green;min-width: 50px;" placeholder="Code" value="@cptVal" />
                                                                            <input type="text" class="form-control CoderDetails ControlHeight" disabled style="color:green;min-width: 42px;" placeholder="Mod" value="@modVal1" />
                                                                            <input type="text" class="form-control CoderDetails ControlHeight" disabled style="color:green;max-width: 23px;" placeholder="Qty" value="@qtyVal" />
                                                                            <input type="text" class="form-control CoderDetails ControlHeight" disabled style="color: green;" placeholder="Link All" value="@linkAllVal1" />

                                                                            <div class="input-group-append ControlHeight">
                                                                                <span class="input-group-text ControlHeight AcceptRejectWidth AcceptRejectWidth_@tabIndex">
                                                                                    &nbsp;<i id="Cpt_@j" class="fa fa-check-circle fa-lg AdjustAcceptReject AdjustAcceptReject_@tabIndex" aria-hidden="true"></i>
                                                                                    &nbsp;<i id="Cpt_@j" class="fa fa-times-circle fa-lg AdjustReject_@tabIndex" aria-hidden="true"></i>
                                                                                </span>
                                                                            </div>
                                                                        </div>
                                                                        }

                                                                        @{ Show = (string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? "visibility:hidden" : "display:flex"); }
                                                                        <div title="" class="col-md-3 input-group" style="@Show">
                                                                            <input type="text" class="form-control QARemarks ControlHeight" id="QACptRemarks_@j" disabled value="@dictQACptRemarks?.ElementAt(i).Value" />
                                                                        </div>
                                                                        <div class="col-md-3 CptlessWidth QACptRevised_@tabIndex input-group Cpt_@j" style="display:none">
                                                                            <div class="input-group-prepend ControlHeight">
                                                                                <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                                                                            </div>
                                                                            @{
                                                                            string qacptCode1 = (dictQACptCodes?.ElementAt(i).Value == "" ? coderCptcodes[0] : qaCptcodes[0]);

                                                                            string qaMod1 = (dictQACptCodes?.ElementAt(i).Value == "" ? coderCptcodes[1] : qaCptcodes[1]);

                                                                            string qaQty1 = (dictQACptCodes?.ElementAt(i).Value == "" ? coderCptcodes[2] : qaCptcodes[2]);

                                                                            string qaLinks1 = (dictQACptCodes?.ElementAt(i).Value == "" ? coderCptcodes[3] : qaCptcodes[3]);

                                                                            string modVal = qaMod1 == "null" ? "" : qaMod1;
                                                                            string linkAllVal = qaLinks1 == "null" ? "" : qaLinks1;
                                                                            }
                                                                            <input type="hidden" id="QaCptCodes_@j" value="@qacptCode1^@modVal^@qaQty1^@linkAllVal" />
                                                                            <input type="text" class="form-control ControlHeight" style="min-width:50px;" id="txtCpt_@j" autocomplete="off" placeholder="Code" value="@qacptCode1" />
                                                                            <input type="text" class="form-control ControlHeight" style="min-width:42px;" id="txtMod_@j" autocomplete="off" placeholder="Mod" value="@modVal" />
                                                                            <input type="text" id="txtQty_@j" class="form-control ControlHeight" style="max-width:23px;" autocomplete="off" placeholder="Qty" value="@qaQty1" />
                                                                            <input type="text" id="txtLinks_@j" class="form-control ControlHeight" autocomplete="off" placeholder="Link All" value="@linkAllVal" />
                                                                        </div>
                                                                        <div class="col-md-3 QACptRevised_@tabIndex input-group Cpt_@j" style="display:none">
                                                                            <input type="text" id="CptRemarks_@j" class="form-control ControlHeight CptRemarks_@j Cpt_@j" />
                                                                            <span id="validCpt_@j" class="text-danger txtdanger" style="display:none">*</span>
                                                                        </div>
                                                                    </div>
                                                                    j = j + 1;
                                                                    }
                                                                    }
                                                                    <div class="form-group row" id="DivCptRow_@totalCptCount">
                                                                        <label class="col-md-3 lessWidth m-t-15"></label>
                                                                        <div class="col-md-3 CptlessWidth input-group">
                                                                            <div class="input-group-prepend ControlHeight">
                                                                                <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@totalCptCount</span>
                                                                            </div>
                                                                            <input type="text" maxlength="5" style="min-width:50px;" disabled class="form-control CoderDetails ControlHeight" autocomplete="off" placeholder="Code" value="" />
                                                                            <input type="text" style="min-width:42px;" disabled class="form-control CoderDetails ControlHeight" autocomplete="off" placeholder="Mod" value="" />
                                                                            <input type="text" style="max-width:23px;" disabled class="form-control CoderDetails ControlHeight" autocomplete="off" placeholder="Qty" value="" />
                                                                            <input type="text" disabled class="form-control CoderDetails ControlHeight" autocomplete="off" placeholder="Link All" value="" />
                                                                            <div class="input-group-append ControlHeight">
                                                                                <span class="input-group-text AcceptRejectWidth AcceptRejectWidth_@tabIndex">
                                                                                    &nbsp;<i data="@tabIndex" class="fa fa-edit fa-lg AdjustAcceptReject" aria-hidden="true" style="visibility:hidden"></i>
                                                                                    &nbsp;<i id="Cpt_@totalCptCount" data="@tabIndex" class="fa fa-times-circle fa-lg ignore" aria-hidden="true"></i>
                                                                                </span>
                                                                            </div>
                                                                        </div><div title="" class="col-md-3 input-group" style="display:flex"></div>
                                                                        <div class="col-md-3 QACptRevised_@tabIndex newlyDxCpt_@tabIndex CptlessWidth input-group Cpt_@totalCptCount" style="display:none">
                                                                            <div class="input-group-prepend ControlHeight">
                                                                                <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@totalCptCount</span>
                                                                            </div>
                                                                            <input type="text" maxlength="5" style="min-width:50px;" class="form-control ControlHeight" id="txtCpt_@totalCptCount" autocomplete="off" placeholder="Code" value="" />
                                                                            <input type="text" style="min-width:42px;" class="form-control ControlHeight" id="txtMod_@totalCptCount" autocomplete="off" placeholder="Mod" value="" />
                                                                            <input type="text" style="max-width:23px;" class="form-control ControlHeight" id="txtQty_@totalCptCount" autocomplete="off" placeholder="Qty" value="1" />
                                                                            <input type="text" class="form-control ControlHeight" id="txtLinks_@totalCptCount" autocomplete="off" placeholder="Link All" onfocusout="CptFunction('txtLinks_@totalCptCount')" />
                                                                        </div>
                                                                        <div class="col-md-3 QACptRevised_@tabIndex input-group Cpt_@totalCptCount" id="CptRemarks_@i" style="display:none">
                                                                            <input type="text" id="CptRemarks_@totalCptCount" class="form-control ControlHeight CptRemarks_@totalCptCount Cpt_@totalCptCount" style="display:none" />
                                                                            <span id="validCpt_@totalCptCount" class="text-danger txtdanger" style="display:none">*</span>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <div class="form-group row">
                                                                    <label class="col-md-3 lessWidth m-t-15">Provider Feedback</label>
                                                                    @{len = ((!string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderFeedbackText) && !Model.FirstOrDefault().ProviderFeedbackText.Equals(Model.FirstOrDefault().QAProviderFeedbackText)) ? 10 : 20); }
                                                                    @{string ProviderFeedbackText = (Model.FirstOrDefault().ProviderFeedbackText?.Length > len) ? Model.FirstOrDefault().ProviderFeedbackText.Substring(0, len) + ".." : Model.FirstOrDefault().ProviderFeedbackText;}
                                                                    @{string QAProviderFeedbackText = (Model.FirstOrDefault().QAProviderFeedbackText?.Length > len) ? "/" + Model.FirstOrDefault().QAProviderFeedbackText.Substring(0, len) + ".." : "/" + Model.FirstOrDefault().QAProviderFeedbackText;}
                                                                    @{title = (!string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderFeedbackText) ? Model.FirstOrDefault().ProviderFeedbackText + "/" + Model.FirstOrDefault().QAProviderFeedbackText : Model.FirstOrDefault().ProviderFeedbackText);}
                                                                    @{ var ProviderFeedbackID = string.Format("ProviderFeedbackID_{0}", @Model.FirstOrDefault().TabIndex);}
                                                                    @Html.DropDownListFor(model => model.FirstOrDefault().ProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), "--Select--", new { @style = "display:none", @class = "form-control CoderDetails", @id = string.Format("CoderFeedback_{0}", tabIndex) })
                                                                    <input type="hidden" id="ProviderFeedbackText_@tabIndex" value="@ProviderFeedbackText" />
                                                                    <div title="@title" class="col-md-3 lessWidth input-group ControlWidth">
                                                                        <div class="form-control CoderDetails" style="line-height:2.2;overflow:hidden;height:32px;">
                                                                            <span style="white-space:nowrap">

                                                                                @if (!string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderFeedbackText) && !Model.FirstOrDefault().ProviderFeedbackText.Equals(Model.FirstOrDefault().QAProviderFeedbackText))
                                                                                {
                                                                                <label style="color: red;">@ProviderFeedbackText</label>
                                                                                <label style="color:green">@QAProviderFeedbackText</label>
                                                                                }
                                                                                else
                                                                                {
                                                                                <label style="color: green;">@ProviderFeedbackText</label>
                                                                                }
                                                                            </span>
                                                                        </div>
                                                                    </div>
                                                                    @{Show = (string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderFeedbackRemarks) ? "visibility:hidden" : "display:flex");}
                                                                    @{ Accepted = (string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderFeedbackRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                                                                    @{ Rejected = (string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderFeedbackRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

                                                                    <div title="@Model.FirstOrDefault().QAProviderFeedbackRemarks" class="col-md-2 input-group" style="@Show">
                                                                        @{ var QAProviderFeedbackRemarks = string.Format("QAProviderFeedbackRemarks_{0}", tabIndex);}
                                                                        <input type="text" id="@QAProviderFeedbackRemarks" class="form-control QARemarks" value="@Model.FirstOrDefault().QAProviderFeedbackRemarks" />
                                                                    </div>
                                                                    <div class="input-group-append CoderCorrections" style="@Show">
                                                                        <span class="input-group-text ControlHeight" style="margin-left:-12px;">
                                                                            &nbsp;<i id="ProviderFeedbackID_@Model.FirstOrDefault().TabIndex" class="@Accepted" aria-hidden="true"></i>
                                                                            &nbsp;<i id="ProviderFeedbackID_@Model.FirstOrDefault().TabIndex" class="@Rejected" aria-hidden="true"></i>
                                                                        </span>
                                                                    </div>
                                                                    @{ var QAProviderFeedbackID = string.Format("QAProviderFeedbackID_{0}", @Model.FirstOrDefault().TabIndex);}
                                                                    @Html.DropDownListFor(model => model.FirstOrDefault().QAProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), "--Select--", new { @style = "display:none", @class = "form-control QARevised", @id = string.Format("QAProviderFeedback_{0}", tabIndex) })
                                                                    <div class="col-md-3 input-group CoderCorrections">
                                                                        @Html.TextBoxFor(model => model.FirstOrDefault().RevisedProviderFeedbackRemarks, new { @class = string.Format("form-control Revised RevisedProviderFeedback_{0}", @Model.FirstOrDefault().TabIndex), @id = string.Format("CoderProviderFeedbackRemarks_{0}", tabIndex), @style = @Show })
                                                                        <span id="validFeedback_@Model.FirstOrDefault().TabIndex" class="text-danger txtdanger" style="display:none">*</span>
                                                                    </div>
                                                                </div>

                    </div>
                    <div class="clearfix"></div>
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title">QA Details</h4>
                        </div>
                        <div class="card-body">
                            <div class="col-12">
                                <div class="row mb-3">
                                    <div class="col-lg-6">
                                        <div class="form-group row">
                                            <label class="col-md-3 m-t-15">
                                                Error Type
                                            </label>
                                            <div class="col-md-7">
                                                @Html.DropDownListFor(model => model.FirstOrDefault().QADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), "--Select--", new { @class = "form-control ControlHeight CoderDetails", @id = string.Format("ErrorType_{0}", tabIndex) })
                                                @Html.ValidationMessageFor(model => model.FirstOrDefault().QADTO.ErrorType, null, new { @class = "text-danger ErrorType" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-6">
                                        <div class="form-group row">
                                            <label class="col-md-5 m-t-15"></label>
                                            <div class="col-md-7">
                                                <button id="btnsubmit" type="button" class="btn btn-success">Submit</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                }
                else
                {
                <div class="tab-pane" id="@string.Format(" claim{0}", tabIndex)" role="tabpanel">
                    <div class="p-20" id="@string.Format(" tabDiv{0}", tabIndex)">
                        <partial name="_IncorrectClaim" model=tabitem />
                    </div>
                </div>
                }
                tabIndex = tabIndex + 1;
                }
                }

            </div>
        </div>
    </div>


    <style>
        .errMsg {
            font-weight: bold;
            font-size: 20px;
        }

        #sortable-1 {
            list-style-type: none;
            margin: 0;
            padding: 0;
            width: 25%;
        }

        /*     #sortable-1 li {
                                margin: 0 3px 3px 3px;
                                padding: 0.4em;
                                padding-left: 1.5em;
                                font-size: 17px;
                                height: 16px;
                            }*/

        .default {
            background: #cedc98;
            border: 1px solid #DDDDDD;
            color: #333333;
        }

        .custom-control-label:before {
            left: -35px;
        }

        .custom-control-label:after {
            left: -35px;
        }

        .custom-control {
            padding-left: 0rem;
        }

        .AlignColumns {
            margin-top: 10px;
        }

        .ControlHeight {
            height: 32px !important;
            line-height: 2.2 !important;
        }

        .ControlWidth {
            min-width: 262px;
        }

        .AdjustSerialNumber {
            max-width: 25px;
            padding-left: 5px;
        }

        .AcceptRejectWidth {
            max-width: 50px;
        }

        .AdjustAcceptReject {
            margin-left: -13px;
        }
    </style>
    <script src="~/dashboardassets/libs/jquery/dist/jquery.min.js"></script>
    <script type="text/javascript">
    $("#PayorID1").attr('title', $("#PayorID1 option:selected").text());
    $("#ProviderID").attr('title', $("#ProviderID option:selected").text());
    $("#ProviderFeedbackID").attr('title', $("#ProviderFeedbackID option:selected").text());
    </script>
