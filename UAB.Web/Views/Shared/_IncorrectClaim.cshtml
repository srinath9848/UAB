@model UAB.DTO.ChartSummaryDTO
@using UAB.enums
<br />
<div class="form-group row AlignColumns">
    <label class="col-md-3 lessWidth m-t-15"></label>
    <label class="col-md-3 lessWidth input-group ControlWidth">Coder/QA</label>
    <label class="col-md-2 m-t-15">QA Comments</label>
    <div class="input-group-append CoderCorrections" style="visibility:hidden">
        <span class="input-group-text">
            &nbsp;<i class="fa fa-save fa-lg" aria-hidden="true"></i>
            &nbsp;<i class="fa fa-save fa-lg" aria-hidden="true"></i>
        </span>
    </div>
    <label class="col-md-3 m-t-15">Coder Comments</label>
</div>
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15">Provider</label>
    @{int len = ((!string.IsNullOrEmpty(Model.QAProviderText) && !Model.ProviderText.Equals(Model.QAProviderText)) ? 10 : 20); }
    @{string ProviderText = (Model.ProviderText?.Length > len) ? Model.ProviderText.Substring(0, len) + ".." : Model.ProviderText;}
    @{string QAProviderText = (Model.QAProviderText?.Length > len) ? "/" + Model.QAProviderText.Substring(0, len) + ".." : "/" + Model.QAProviderText;}
    @{string title = (!string.IsNullOrEmpty(Model.QAProviderText) ? Model.ProviderText + "/" + Model.QAProviderText : Model.ProviderText);}
    @{ var ProviderID = string.Format("ProviderID_{0}", @Model.TabIndex);}
    @Html.DropDownListFor(model => model.ProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @style = "display:none", @class = "form-control CoderDetails", @id = string.Format("CoderProviderID_{0}", Model.TabIndex) })

    <div title="@title" class="col-md-3 lessWidth input-group ControlWidth">
        <div class="form-control CoderDetails" style="line-height:2.2;overflow:hidden;height:32px;">
            <span style="white-space:nowrap">
                @if (!string.IsNullOrEmpty(Model.QAProviderText) && !Model.ProviderText.Equals(Model.QAProviderText))
                {
                    <label style="color: red;">@ProviderText</label>
                    <label style="color: green">@QAProviderText</label>
                }
                else
                {
                    <label style="color: green;">@ProviderText</label>
                }
            </span>
        </div>
    </div>
    @{ var QAProviderID = string.Format("QAProviderID_{0}", @Model.TabIndex);}
    @{string Show = (string.IsNullOrEmpty(Model.QAProviderText) ? "visibility:hidden" : "display:flex");}
    @{string Accepted = (string.IsNullOrEmpty(Model.QAProviderText) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
    @{string Rejected = (string.IsNullOrEmpty(Model.QAProviderText) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}
    @if (!string.IsNullOrEmpty(Model.QAProviderText) && !Model.ProviderText.Equals(Model.QAProviderText))
    {
        <div title="@Model.QAProviderText" class="col-md-2 input-group" style="@Show">
            <input type="text" id="@string.Format("QAProviderIDRemarks_{0}", Model.TabIndex)" class="form-control QARemarks ControlHeight" disabled value="@Model.QAProviderRemarks" />
        </div>
        @Html.DropDownListFor(model => model.QAProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @id = string.Format("QAProviderID_{0}", Model.TabIndex), @class = "form-control QARevised", @style = "display:none" })
        <div class="input-group-append CoderCorrections ControlHeight" style="@Show">
            <span class="input-group-text ControlHeight" style="margin-left:-12px;">
                &nbsp;<i id="ProviderID_@Model.TabIndex" class="@Accepted" aria-hidden="true"></i>
                &nbsp;<i id="ProviderID_@Model.TabIndex" class="@Rejected" aria-hidden="true"></i>
            </span>
        </div>
        <div class="col-md-3 input-group CoderCorrections">
            @Html.TextBoxFor(model => model.RevisedProviderRemarks, new { @class = string.Format("form-control Revised RevisedProvider_{0}", @Model.TabIndex), @id = string.Format("CoderProviderIDRemarks_{0}", Model.TabIndex), @style = Show })
            <span id="validProvider_@Model.TabIndex" class="text-danger txtdanger" style="display:none">*</span>
        </div>
    }
    else
    {
        Accepted = "fa fa-check-circle fa-lg accept";
        Rejected = "fa fa-times-circle fa-lg";
        Show = "display:none";

        <div title="@Model.QAProviderText" class="col-md-2 input-group" style="@Show">
            <input type="text" id="@string.Format("QAProviderIDRemarks_{0}", Model.TabIndex)" class="form-control QARemarks ControlHeight" disabled value="@Model.QAProviderRemarks" />
        </div>
        @Html.DropDownListFor(model => model.QAProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @id = string.Format("QAProviderID_{0}", Model.TabIndex), @class = "form-control QARevised", @style = "display:none" })
        <div class="input-group-append CoderCorrections ControlHeight" style="@Show">
            <span class="input-group-text ControlHeight" style="margin-left:-12px;">
                &nbsp;<i id="ProviderID_@Model.TabIndex" class="@Accepted" aria-hidden="true"></i>
                &nbsp;<i id="ProviderID_@Model.TabIndex" class="@Rejected" aria-hidden="true"></i>
            </span>
        </div>
        <div class="col-md-3 input-group CoderCorrections">
            @Html.TextBoxFor(model => model.RevisedProviderRemarks, new { @class = string.Format("form-control Revised RevisedProvider_{0}", @Model.TabIndex), @id = string.Format("CoderProviderIDRemarks_{0}", Model.TabIndex), @style = Show })
            <span id="validProvider_@Model.TabIndex" class="text-danger txtdanger" style="display:none">*</span>
        </div>
    }
</div>
@if (Model.ProjectTypename.ToUpper() != "IP")
{
    <div class="form-group row">
        <label class="col-md-3 lessWidth m-t-15">Billing Provider</label>
        @{len = ((!string.IsNullOrEmpty(Model.QABillingProviderText) && !Model.BillingProviderText.Equals(Model.QABillingProviderText)) ? 10 : 20); }
        @{string BillingProviderText = (Model.BillingProviderText?.Length > len) ? Model.BillingProviderText.Substring(0, len) + ".." : Model.BillingProviderText;}
        @{string QABillingProviderText = (Model.QABillingProviderText?.Length > len) ? "/" + Model.QABillingProviderText.Substring(0, len) + ".." : "/" + Model.QABillingProviderText;}
        @{title = (!string.IsNullOrEmpty(Model.QABillingProviderText) ? Model.BillingProviderText + "/" + Model.QABillingProviderText : Model.BillingProviderText);}
        @{ var BillingProviderID = string.Format("BillingProviderID_{0}", @Model.TabIndex);}
        @Html.DropDownListFor(model => model.BillingProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @style = "display:none", @class = "form-control CoderDetails", @id = string.Format("CoderBillingProviderID_{0}", Model.TabIndex) })

        <div title="@title" class="col-md-3 lessWidth input-group ControlWidth">
            <div class="form-control CoderDetails" style="line-height:2.2;overflow:hidden;height:32px;">
                <span style="white-space:nowrap">
                    @if (!string.IsNullOrEmpty(Model.QABillingProviderText) && !Model.BillingProviderText.Equals(Model.QABillingProviderText))
                    {
                        <label style="color: red;">@BillingProviderText</label>
                        <label style="color: green">@QABillingProviderText</label>
                    }
                    else
                    {
                        <label style="color: green;">@ProviderText</label>
                    }
                </span>
            </div>
        </div>
        @{ var QABillingProviderID = string.Format("QABillingProviderID_{0}", @Model.TabIndex);}
        @{ Show = (string.IsNullOrEmpty(Model.QABillingProviderText) ? "visibility:hidden" : "display:flex");}
        @{ Accepted = (string.IsNullOrEmpty(Model.QABillingProviderText) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
        @{ Rejected = (string.IsNullOrEmpty(Model.QABillingProviderText) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}
        @if (!string.IsNullOrEmpty(Model.QABillingProviderText) && !Model.BillingProviderText.Equals(Model.QABillingProviderText))
        {
            <div title="@Model.QABillingProviderText" class="col-md-2 input-group" style="@Show">
                <input type="text" id="@string.Format("QABillingProviderIDRemarks_{0}", Model.TabIndex)" class="form-control QARemarks ControlHeight" disabled value="@Model.QABillingProviderRemarks" />
            </div>
            @Html.DropDownListFor(model => model.QABillingProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @id = string.Format("QABillingProviderID_{0}", Model.TabIndex), @class = "form-control QARevised", @style = "display:none" })
            <div class="input-group-append CoderCorrections ControlHeight" style="@Show">
                <span class="input-group-text ControlHeight" style="margin-left:-12px;">
                    &nbsp;<i id="BillingProviderID_@Model.TabIndex" class="@Accepted" aria-hidden="true"></i>
                    &nbsp;<i id="BillingProviderID_@Model.TabIndex" class="@Rejected" aria-hidden="true"></i>
                </span>
            </div>
            <div class="col-md-3 input-group CoderCorrections">
                @Html.TextBoxFor(model => model.RevisedBillingProviderRemarks, new { @class = string.Format("form-control Revised RevisedBillingProvider_{0}", @Model.TabIndex), @id = string.Format("CoderBillingProviderIDRemarks_{0}", Model.TabIndex), @style = Show })
                <span id="validBillingProvider_@Model.TabIndex" class="text-danger txtdanger" style="display:none">*</span>
            </div>
        }
        else
        {
            Accepted = "fa fa-check-circle fa-lg accept";
            Rejected = "fa fa-times-circle fa-lg";
            Show = "display:none";

            <div title="@Model.QABillingProviderText" class="col-md-2 input-group" style="@Show">
                <input type="text" id="@string.Format("QABillingProviderIDRemarks_{0}", Model.TabIndex)" class="form-control QARemarks ControlHeight" disabled value="@Model.QABillingProviderRemarks" />
            </div>
            @Html.DropDownListFor(model => model.QABillingProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @id = string.Format("QABillingProviderID_{0}", Model.TabIndex), @class = "form-control QARevised", @style = "display:none" })
            <div class="input-group-append CoderCorrections ControlHeight" style="@Show">
                <span class="input-group-text ControlHeight" style="margin-left:-12px;">
                    &nbsp;<i id="BillingProviderID_@Model.TabIndex" class="@Accepted" aria-hidden="true"></i>
                    &nbsp;<i id="BillingProviderID_@Model.TabIndex" class="@Rejected" aria-hidden="true"></i>
                </span>
            </div>
            <div class="col-md-3 input-group CoderCorrections">
                @Html.TextBoxFor(model => model.RevisedBillingProviderRemarks, new { @class = string.Format("form-control Revised RevisedBillingProvider_{0}", @Model.TabIndex), @id = string.Format("CoderBillingProviderIDRemarks_{0}", Model.TabIndex), @style = Show })
                <span id="validBillingProvider_@Model.TabIndex" class="text-danger txtdanger" style="display:none">*</span>
            </div>
        }
    </div>
}
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15">Payor</label>
    @{len = ((!string.IsNullOrEmpty(Model.QAPayorText) && !Model.PayorText.Equals(Model.QAPayorText)) ? 10 : 20); }
    @{string PayorText = (Model.PayorText?.Length > len) ? Model.PayorText.Substring(0, len) + ".." : Model.PayorText;}
    @{string QAPayorText = (Model.QAPayorText?.Length > len) ? "/" + Model.QAPayorText.Substring(0, len) + ".." : "/" + Model.QAPayorText;}
    @{title = (!string.IsNullOrEmpty(Model.QAPayorText) ? Model.PayorText + "/" + Model.QAPayorText : Model.PayorText);}
    @{ var PayorID = string.Format("PayorID_{0}", @Model.TabIndex);}
    @Html.DropDownListFor(model => model.PayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), "--Select--", new { @style = "display:none", @class = "form-control CoderDetails", @id = string.Format("CoderPayorID_{0}", Model.TabIndex) })
    <div title="@title" class="col-md-3 lessWidth input-group ControlWidth">
        <div name="PayorText" class="form-control CoderDetails" style="line-height:2.2;overflow:hidden;height:32px;">
            <span style="white-space:nowrap">
                @if (!string.IsNullOrEmpty(Model.QAPayorText) && !Model.PayorText.Equals(Model.QAPayorText))
                {
                    <label style="color:red">@PayorText</label>
                    <label style="color:green;">@QAPayorText</label>
                }
                else
                {
                    <label style="color: green;">@PayorText</label>
                }
            </span>
        </div>
    </div>
    @{Show = (string.IsNullOrEmpty(Model.QAPayorText) ? "visibility:hidden" : "display:flex");}
    @{Accepted = (string.IsNullOrEmpty(Model.QAPayorText) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
    @{Rejected = (string.IsNullOrEmpty(Model.QAPayorText) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}
    @if (!string.IsNullOrEmpty(Model.QAPayorText) && !Model.PayorText.Equals(Model.QAPayorText))
    {
        <div title="@Model.QAPayorText" class="col-md-2 input-group" style="@Show">
            <input type="text" id="@string.Format("QAPayorIDRemarks_{0}", Model.TabIndex)" class="form-control QARemarks" disabled value="@Model.QAPayorRemarks" />
        </div>
        @Html.DropDownListFor(model => model.QAPayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), "--Select--", new { @id = string.Format("QAPayorID_{0}", Model.TabIndex), @class = "form-control QARevised", @style = "display:none" })
        <div class="input-group-append CoderCorrections" style="@Show">
            <span class="input-group-text ControlHeight" style="margin-left:-12px;">
                &nbsp;<i id="PayorID_@Model.TabIndex" class="@Accepted" aria-hidden="true"></i>
                &nbsp;<i id="PayorID_@Model.TabIndex" class="@Rejected" aria-hidden="true"></i>
            </span>
        </div>
        <div class="col-md-3 input-group CoderCorrections">
            @Html.TextBoxFor(model => model.RevisedPayorRemarks, new { @class = string.Format("form-control Revised RevisedPayor_{0}", @Model.TabIndex), @style = @Show, @id = string.Format("CoderPayorIDRemarks_{0}", Model.TabIndex) })
            <span id="validPayor_@Model.TabIndex" class="text-danger txtdanger" style="display:none">*</span>
        </div>
    }
    else
    {
        Accepted = "fa fa-check-circle fa-lg accept";
        Rejected = "fa fa-times-circle fa-lg";
        Show = "display:none";

        <div title="@Model.QAPayorText" class="col-md-2 input-group" style="@Show">
            <input type="text" id="@string.Format("QAPayorIDRemarks_{0}", Model.TabIndex)" class="form-control QARemarks" disabled value="@Model.QAPayorRemarks" />
        </div>
        @Html.DropDownListFor(model => model.QAPayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), "--Select--", new { @id = string.Format("QAPayorID_{0}", Model.TabIndex), @class = "form-control QARevised", @style = "display:none" })
        <div class="input-group-append CoderCorrections" style="@Show">
            <span class="input-group-text ControlHeight" style="margin-left:-12px;">
                &nbsp;<i id="PayorID_@Model.TabIndex" class="@Accepted" aria-hidden="true"></i>
                &nbsp;<i id="PayorID_@Model.TabIndex" class="@Rejected" aria-hidden="true"></i>
            </span>
        </div>
        <div class="col-md-3 input-group CoderCorrections">
            @Html.TextBoxFor(model => model.RevisedPayorRemarks, new { @class = string.Format("form-control Revised RevisedPayor_{0}", @Model.TabIndex), @style = Show, @id = string.Format("CoderPayorIDRemarks_{0}", Model.TabIndex) })
            <span id="validPayor_@Model.TabIndex" class="text-danger txtdanger" style="display:none">*</span>
        </div>
    }
</div>

<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15">Note Title</label>
    <div title="@Model.NoteTitle" class="col-md-3 lessWidth ControlWidth">
        @Html.TextBoxFor(model => model.NoteTitle, new { @class = "form-control CoderDetails ControlHeight" })
    </div>
</div>

@{
    Dictionary<int, string> dictDxCodes = Utility.GetDxCodes(Model.Dx);
    Dictionary<int, string> dictQADxCodes = Utility.GetQAOrShadowQADxCodes(Model.QADx);
    Dictionary<int, string> dictQADxRemarks = Utility.GetQAOrShadowQADxRemarks(Model.QADxRemarks);

    dictQADxCodes = (dictQADxCodes == null) ? new Dictionary<int, string>() : dictQADxCodes;
    dictQADxRemarks = (dictQADxRemarks == null) ? new Dictionary<int, string>() : dictQADxRemarks;
    Dictionary<int, string> dictRevisedDxRemarks = Utility.GetQAOrShadowQADxRemarks(Model.RevisedDXRemarks);

    int count = Math.Max(dictDxCodes.Count(), Math.Max(dictQADxCodes.Count(), 0));

    int totalDxCount = count + 1;

    Utility.AddEmptyRows(dictDxCodes, count, "NA");
    Utility.AddEmptyRows(dictQADxCodes, count, "");
    Utility.AddEmptyRows(dictQADxRemarks, count, "");
}
<div id="DivDx">
    @{
        int j = 1;
        int i;
        for (i = 0; i < count; i++)
        {
            <div class="form-group row">
                @if (i == 0)
                {
                    <label class="col-md-3 lessWidth m-t-15">Dx</label>
                }
                else
                {
                    <label class="col-md-3 lessWidth m-t-15"></label>
                }

                @{string Dx = dictDxCodes.ElementAt(i).Value;}
                @{string QADx = (dictQADxCodes?.ElementAt(i).Value?.Length > len) ? "/" + dictQADxCodes?.ElementAt(i).Value.Substring(0, len) + ".." : "/" + dictQADxCodes?.ElementAt(i).Value;}
                @{
                    var DxClaimRemarks = string.Format("form-control DxClaim_{0}_Remarks_{1}", @Model.TabIndex, @j);
                    var DxClaim = string.Format("DxClaim_{0}_{1}", @Model.TabIndex, @j);
                }

                @if (!string.IsNullOrEmpty(QADx))
                {
                    <div title="@Dx@QADx" class="col-md-3 lessWidth input-group ControlWidth">
                        <div class="input-group-prepend ControlHeight">
                            <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                        </div>
                        <div class="form-control CoderDetails" style="line-height:2.2;overflow:hidden;height:32px;">
                            <span style="white-space:nowrap">
                                @if (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) && !(dictQADxCodes?.ElementAt(i).Value).Equals(dictDxCodes?.ElementAt(i).Value))
                                {
                                    <label style="color: red;">@Dx</label>
                                    <label style="color:green">@QADx</label>
                                }
                                else
                                {
                                    <label style="color: green;">@Dx</label>
                                }
                            </span>
                        </div>
                    </div>
                }
                else
                {
                    <div title="@Dx" class="col-md-3 lessWidth input-group ControlWidth">
                        <div class="input-group-prepend ControlHeight">
                            <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                        </div>
                        <div class="form-control CoderDetails" style="line-height:2.2;overflow:hidden;height:32px;">
                            <span style="white-space:nowrap">
                                <label style="color: green;">@Dx</label>
                            </span>
                        </div>
                    </div>
                }
                @*@if (!dictDxCodes.ElementAt(i).Value.Equals(dictQADxCodes.ElementAt(i).Value))
                    {
                        Show = "display:flex";
                        Accepted = (string.IsNullOrEmpty(dictQADxRemarks?.ElementAt(i).Value) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");
                        Rejected = (string.IsNullOrEmpty(dictQADxRemarks?.ElementAt(i).Value) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");

                        <div class="col-md-2 input-group ControlHeight" style="@Show">
                            <input type="text" id="@string.Format("QADxRemarkss_{0}_{1}", Model.TabIndex, j)" class="form-control QARemarks" value="@dictQADxRemarks?.ElementAt(i).Value" />
                        </div>

                        @Html.HiddenFor(model => dictDxCodes.ElementAt(i).Value, new { @class = "form-control", @id = string.Format("DxClaim_{0}_Coder_{1}", Model.TabIndex, @j) })
                        @Html.HiddenFor(model => dictQADxCodes.ElementAt(i).Value, new { @class = "form-control", @id = string.Format("DxClaim_{0}_QA_{1}", Model.TabIndex, @j) })
                        <div class="input-group-append CoderCorrections" style="@Show">
                            <span class="input-group-text ControlHeight" style="margin-left:-12px;">
                                &nbsp;<i id="@DxClaim" class="@Accepted" aria-hidden="true"></i>
                                &nbsp;<i id="@DxClaim" class="@Rejected" aria-hidden="true"></i>
                            </span>
                        </div>

                        <div class="col-md-3 input-group CoderCorrections">
                            <input type="text" id="@DxClaim" class="@DxClaimRemarks" style="@Show" onchange="removevalid('@DxClaimRemarks')" />
                            <span id="valid_@DxClaim" class="text-danger txtdanger" style="display:none">*</span>
                        </div>
                    }
                    else
                    {*@
                @{
                    Show = (string.IsNullOrEmpty(dictQADxRemarks?.ElementAt(i).Value) ? "display:none" : "display:flex");

                    Accepted = (string.IsNullOrEmpty(dictQADxRemarks?.ElementAt(i).Value) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");
                    Rejected = (string.IsNullOrEmpty(dictQADxRemarks?.ElementAt(i).Value) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");

                }
                <div class="col-md-2 input-group ControlHeight" style="@Show">
                    <input type="text" id="@string.Format("QADxRemarkss_{0}_{1}", Model.TabIndex, j)" class="form-control QARemarks" disabled value="@dictQADxRemarks?.ElementAt(i).Value" />
                </div>

                @Html.HiddenFor(model => dictDxCodes.ElementAt(i).Value, new { @class = "form-control", @id = string.Format("DxClaim_{0}_Coder_{1}", Model.TabIndex, @j) })
                @Html.HiddenFor(model => dictQADxCodes.ElementAt(i).Value, new { @class = "form-control", @id = string.Format("DxClaim_{0}_QA_{1}", Model.TabIndex, @j) })
                <div class="input-group-append CoderCorrections" style="@Show">
                    <span class="input-group-text ControlHeight" style="margin-left:-12px;">
                        &nbsp;<i id="@DxClaim" class="@Accepted" aria-hidden="true"></i>
                        &nbsp;<i id="@DxClaim" class="@Rejected" aria-hidden="true"></i>
                    </span>
                </div>

                <div class="col-md-3 input-group CoderCorrections">
                    <input type="text" id="@DxClaim" class="@DxClaimRemarks" style="@Show" onchange="removevalid('@DxClaimRemarks')" value="@dictRevisedDxRemarks?.ElementAt(i).Value" />
                    <span id="valid_@DxClaim" class="text-danger txtdanger" style="display: none">*</span>
                </div>
                @*}*@
            </div>

            j = j + 1;
        }
    }
</div>
@{
    Dictionary<int, string> dictCptCodes = Utility.GetCptCodes(Model.CPTCode);
    Dictionary<int, string> dictQACptCodes = Utility.GetQAOrShadowQACptCodes(Model.QACPTCode);
    Dictionary<int, string> dictQACptRemarks = Utility.GetQAOrShadowQACptRemarks(Model.QACPTCodeRemarks);

    dictQACptCodes = (dictQACptCodes == null) ? new Dictionary<int, string>() : dictQACptCodes;
    dictQACptRemarks = (dictQACptRemarks == null) ? new Dictionary<int, string>() : dictQACptRemarks;
    Dictionary<int, string> dictRevisedCptRemarks = Utility.GetQAOrShadowQADxRemarks(Model.RevisedCPTRemarks);


    count = Math.Max(dictCptCodes.Count(), Math.Max(dictQACptCodes.Count(), 0));

    int totalCptCount = count + 1;

    Utility.AddEmptyRows(dictCptCodes, count, "NA");
    Utility.AddEmptyRows(dictQACptCodes, count, "");
    Utility.AddEmptyRows(dictQACptRemarks, count, "");
}
<div id="DivCpt">
    @{
        j = 1;
        for (i = 0; i < count; i++)
        {
            <div class="form-group row" id="DivCptRow_@j">
                @if (i == 0)
                {
                    <label class="col-md-3 lessWidth m-t-15">CPT</label>
                }
                else
                {
                    <label class="col-md-3 lessWidth m-t-15"></label>
                }
                @{ string[] coderCptcodes = dictCptCodes?.ElementAt(i).Value.Split("^");}
                @{ string[] qaCptcodes = dictQACptCodes?.ElementAt(i).Value.Split("^");}
                @{
                    var CptClaimRemarks = string.Format("form-control CptClaim_{0}_Remarks_{1}", @Model.TabIndex, @j);
                    var CptClaim = string.Format("CptClaim_{0}_{1}", @Model.TabIndex, @j);
                    var cptCoderClaim = string.Format("CptClaim_{0}_Coder_{1}", Model.TabIndex, @j);
                    var cptQAClaim = string.Format("CptClaim_{0}_QA_{1}", Model.TabIndex, @j);
                }

                @if (!string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value))
                {

                    string codercptCode = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[0]);
                    string cCpt = codercptCode;
                    string qacptCode = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[0]);
                    string color = (codercptCode != qacptCode) ? "color:blue;" : "";
                    string codercpt = (dictCptCodes?.ElementAt(i).Value == "NA" ? qaCptcodes[0] : coderCptcodes[0]);
                    string cptCode = !string.IsNullOrEmpty(codercptCode) ? codercptCode : "";
                    string cptCode1 = cptCode == qacptCode ? "" : codercptCode + "/";

                    string coderMod = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[1]);
                    string cMod = coderMod;
                    string qaMod = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[1]);
                    color = (coderMod != qaMod) ? "color:blue;" : "";
                    coderMod = (dictCptCodes?.ElementAt(i).Value == "NA" ? qaCptcodes[1] : coderCptcodes[1]);
                    string cptMod = !string.IsNullOrEmpty(coderMod) ? coderMod : "";
                    string cptMod1 = cptMod == qaMod ? "" : coderMod + "/";

                    string coderQty = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[2]);
                    string cQty = coderQty;
                    string qaQty = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[2]);
                    color = (coderQty != qaQty) ? "color:blue;" : "";
                    coderQty = (dictCptCodes?.ElementAt(i).Value == "NA" ? qaCptcodes[2] : coderCptcodes[2]);
                    string cptQty = !string.IsNullOrEmpty(coderQty) ? coderQty : "";
                    string cptQty1 = cptQty == qaQty ? "" : coderQty + "/";

                    string coderLinks = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[3]);
                    string cLinks = coderLinks;
                    string qaLinks = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[3]);
                    string linkAll = qaLinks == "null" ? "" : qaLinks;
                    string cptLinks = !string.IsNullOrEmpty(coderLinks) ? coderLinks : "";
                    string cptLinks1 = !string.IsNullOrEmpty(coderLinks) ? coderLinks + "/" : "";

                    string link = !string.IsNullOrEmpty(@qaLinks) || @qaLinks != "null" ? @qaLinks : "Link All";
                    cptLinks1 = cptLinks == link ? "" : coderLinks + "/";
                    string finalCptCode = ""; string finalCptMod = ""; string finalCptQty = ""; string finalCptLinks = "";

                    //if (cptCode == qacptCode)
                    //{
                    <div title="Code : @cptCode1@qacptCode, Mod : @cptMod1@qaMod, Quantity : @cptQty1@qaQty, Links : @cptLinks1@link" class="col-md-3 lessWidth input-group ControlWidth">
                        <div class="input-group-prepend">
                            <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                        </div>
                        @{
                            if (codercptCode == qacptCode)
                            {
                                <div class="form-control CoderDetails" style="min-width:60px;">
                                    <span style="color:green">@codercptCode.Replace("/", "")</span>
                                </div>
                                <div class="form-control CoderDetails">
                                    <span style="color:green">@coderMod.Replace("/", "")</span>
                                </div>
                                <div class="form-control CoderDetails">
                                    <span style="color:green">@coderQty.Replace("/", "")</span>
                                </div>
                                <div class="form-control CoderDetails">
                                    <span style="color:green">@cptLinks1.Replace("/", "")</span>
                                </div>
                                finalCptCode = codercptCode.Replace("/", "");
                                finalCptMod = coderMod.Replace("/", "");
                                finalCptQty = coderQty.Replace("/", "");
                                finalCptLinks = cptLinks1.Replace("/", "");
                            }
                            else
                            {
                                finalCptCode = cCpt.Replace("/", "");
                                finalCptMod = cMod.Replace("/", "");
                                finalCptQty = cQty.Replace("/", "");
                                finalCptLinks = cLinks.Replace("/", "");

                                if (codercptCode == "NA")
                                    color = "color:fuchsia;";
                                <div class="form-control CoderDetails" style="min-width:60px;">
                                    <span style="color:red">@cCpt.Replace("/", "")</span>
                                    <br />
                                    <span style="color:green">@qacptCode</span>
                                </div>
                                color = (coderMod != qaMod) ? "color:blue;" : "";
                                if (coderMod == "NA")
                                    color = "color:fuchsia;";
                                <div class="form-control CoderDetails">
                                    <span style="color:red">@cMod.Replace("/", "")</span>
                                    <br />
                                    <span style="color:green">@qaMod</span>
                                </div>

                                color = (coderQty != qaQty) ? "color:blue;" : "";
                                if (coderQty == "NA")
                                    color = "color:fuchsia;";
                                <div class="form-control CoderDetails">
                                    <span style="color:red">@cQty.Replace("/", "")</span>
                                    <br />
                                    <span style="color:green">@qaQty</span>
                                </div>

                                color = (coderLinks != qaLinks) ? "color:blue;" : "";
                                if (coderLinks == "NA")
                                    color = "color:fuchsia;";
                                <div class="form-control CoderDetails">
                                    <span style="color:red">@cLinks.Replace("/", "")</span><br />
                                    <span style="color:green">@link</span>
                                </div>
                            }
                        }
                        <input type="hidden" id="@cptCoderClaim" value="@finalCptCode^@finalCptMod^@finalCptQty^@finalCptLinks" />
                        <input type="hidden" id="@cptQAClaim" value="@qaCptcodes[0]^@qaCptcodes[1]^@qaCptcodes[2]^@qaCptcodes[3]" />
                    </div>
                    Show = (string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? "display:none" : "display:flex");

                    Accepted = (string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");
                    Rejected = (string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");
                    if (codercptCode == qacptCode)
                    {
                        Accepted = "fa fa-check-circle fa-lg accept";
                        Rejected = "fa fa-times-circle fa-lg";
                        Show = "display:none";
                    }
                    <div class="col-md-2 input-group ControlHeight" style="@Show">
                        <input type="text" id="@string.Format("QACptRemarkss_{0}_{1}", Model.TabIndex, j)" class="form-control QARemarks ControlHeight" disabled value="@dictQACptRemarks?.ElementAt(i).Value" />
                    </div>
                    <div class="input-group-append CoderCorrections ControlHeight" style="@Show">
                        <span class="input-group-text ControlHeight" style="margin-left:-12px;">
                            &nbsp;<i id="@CptClaim" class="@Accepted" aria-hidden="true"></i>
                            &nbsp;<i id="@CptClaim" class="@Rejected" aria-hidden="true"></i>
                        </span>
                    </div>
                    <div class="col-md-3 input-group CoderCorrections ControlHeight">
                        <input type="text" id="@CptClaim" class="@CptClaimRemarks ControlHeight" style="@Show" onchange="removevalid('@CptClaimRemarks')" value="@dictRevisedCptRemarks?.ElementAt(i).Value" />
                        <span id="valid_@CptClaim" class="text-danger txtdanger" style="display:none">*</span>
                    </div>
                    @*}
                        else
                        {
                            if (!string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value))
                                Show = "display:flex";
                            else
                                Show = "display:none";

                            Accepted = (string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");
                            Rejected = (string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");

                            <div title="Code : @cptCode1@qacptCode, Mod : @cptMod1@qaMod, Quantity : @cptQty1@qaQty, Links : @cptLinks1@link" class="col-md-3 lessWidth input-group ControlWidth">
                                <div class="input-group-prepend">
                                    <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                                </div>
                                <div class="form-control CoderDetails" style="min-width:60px;">
                                    @if (cptCode == qacptCode)
                                    {
                                        <span style="color:green">@cptCode</span>
                                    }
                                    else
                                    {
                                        <span style="color:red">@cptCode</span>
                                    }
                                    <br />
                                    <span style="color:green">@qacptCode</span>
                                </div>
                                <div class="form-control CoderDetails">
                                    @if (cptMod == qaMod)
                                    {
                                        <span style="color:green">@cptMod</span>
                                    }
                                    else
                                    {
                                        <span style="color:red">@cptMod</span>
                                    }
                                    <br />
                                    <span style="color:green">@qaMod</span>
                                </div>
                                <div class="form-control CoderDetails">
                                    @if (cptQty == qaQty)
                                    {
                                        <span style="color:green">@cptQty</span>
                                    }
                                    else
                                    {
                                        <span style="color:red">@cptQty</span>
                                    }
                                    <br />
                                    <span style="color:green">@qaQty</span>
                                </div>
                                <div class="form-control CoderDetails">
                                    @if (cptLinks == link)
                                    {
                                        <span style="color:green">@cptLinks</span>
                                    }
                                    else
                                    {
                                        <span style="color:red">@cptLinks</span>
                                    }
                                    <br />
                                    <span style="color:green">@link</span>
                                </div>
                                <input type="hidden" id="@cptCoderClaim" value="@codercpt^@coderMod^@coderQty^@coderLinks" />
                                <input type="hidden" id="@cptQAClaim" value="@qaCptcodes[0]^@qaCptcodes[1]^@qaCptcodes[2]^@qaCptcodes[3]" />
                            </div>
                            <div class="col-md-2 input-group ControlHeight" style="@Show">
                                <input type="text" id="@string.Format("QACptRemarkss_{0}_{1}", Model.TabIndex, j)" class="form-control QARemarks ControlHeight" value="@dictQACptRemarks?.ElementAt(i).Value" />
                            </div>
                            <div class="input-group-append CoderCorrections ControlHeight" style="@Show">
                                <span class="input-group-text ControlHeight" style="margin-left:-12px;">
                                    &nbsp;<i id="@CptClaim" class="@Accepted" aria-hidden="true"></i>
                                    &nbsp;<i id="@CptClaim" class="@Rejected" aria-hidden="true"></i>
                                </span>
                            </div>
                            <div class="col-md-3 input-group CoderCorrections ControlHeight">
                                <input type="text" id="@CptClaim" class="@CptClaimRemarks ControlHeight" style="@Show" onchange="removevalid('@CptClaimRemarks')" />
                                <span id="valid_@CptClaim" class="text-danger txtdanger" style="display:none">*</span>
                            </div>
                        }*@
                }
                else
                {
                    string cptVal = coderCptcodes[0] == "NA" ? "" : coderCptcodes[0];
                    string coderModVal = "";
                    string coderLinkAllVal = "";
                    string qtyVal = "";
                    if (cptVal != "")
                    {
                        coderModVal = coderCptcodes[1] == "null" ? "" : coderCptcodes[1];
                        coderLinkAllVal = coderCptcodes[3] == "null" ? "" : coderCptcodes[3];
                        qtyVal = coderCptcodes[2];

                    }
                    <div title="Code : @cptVal, Mod : @coderModVal, Quantity : @qtyVal, Links : @coderLinkAllVal" class="col-md-3 lessWidth input-group ControlWidth">
                        <div class="input-group-prepend ControlHeight">
                            <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                        </div>
                        <input type="text" class="form-control QARemarks ControlHeight" disabled style="color: green;width: 17px;" placeholder="Code" value="@cptVal" />
                        <input type="text" class="form-control QARemarks ControlHeight" disabled style="color:green;" placeholder="Mod" value="@coderModVal" />
                        <input type="text" class="form-control QARemarks ControlHeight" disabled style="color:green;" placeholder="Qty" value="@qtyVal" />
                        <input type="text" class="form-control QARemarks ControlHeight" disabled style="color: green;" placeholder="Link All" value="@coderLinkAllVal" />
                        <input type="hidden" id="@cptCoderClaim" value="@cptVal^@coderModVal^@qtyVal^@coderLinkAllVal" />
                        <input type="hidden" id="@cptQAClaim" value="@cptVal^@coderModVal^@qtyVal^@coderLinkAllVal" />
                    </div>

                    Show = (string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? "display:none" : "display:flex");

                    Accepted = (string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");
                    Rejected = (string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");

                    <div class="col-md-2 input-group ControlHeight" style="@Show">
                        <input type="text" id="@string.Format("QACptRemarkss_{0}_{1}", Model.TabIndex, j)" class="form-control QARemarks ControlHeight" disabled value="@dictQACptRemarks?.ElementAt(i).Value" />
                    </div>
                    <div class="input-group-append CoderCorrections ControlHeight" style="@Show">
                        <span class="input-group-text ControlHeight" style="margin-left:-12px;">
                            &nbsp;<i id="@CptClaim" class="@Accepted" aria-hidden="true"></i>
                            &nbsp;<i id="@CptClaim" class="@Rejected" aria-hidden="true"></i>
                        </span>
                    </div>
                    <div class="col-md-3 input-group CoderCorrections ControlHeight">
                        <input type="text" id="@CptClaim" class="@CptClaimRemarks ControlHeight" style="@Show" onchange="removevalid('@CptClaimRemarks')" />
                        <span id="valid_@CptClaim" class="text-danger txtdanger" style="display:none">*</span>
                    </div>
                }

            </div>
            j = j + 1;
        }
    }

</div>
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15">Provider Feedback</label>
    @{len = ((!string.IsNullOrEmpty(Model.QAProviderFeedbackText) && !Model.ProviderFeedbackText.Equals(Model.QAProviderFeedbackText)) ? 10 : 20); }
    @{string ProviderFeedbackText = (Model.ProviderFeedbackText?.Length > len) ? Model.ProviderFeedbackText.Substring(0, len) + ".." : Model.ProviderFeedbackText;}
    @{string QAProviderFeedbackText = (Model.QAProviderFeedbackText?.Length > len) ? "/" + Model.QAProviderFeedbackText.Substring(0, len) + ".." : "/" + Model.QAProviderFeedbackText;}
    @{title = (!string.IsNullOrEmpty(Model.QAProviderFeedbackText) ? Model.ProviderFeedbackText + "/" + Model.QAProviderFeedbackText : Model.ProviderFeedbackText);}
    @Html.DropDownListFor(model => model.ProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), "--Select--", new { @style = "display:none", @class = "form-control CoderDetails", @id = string.Format("CoderFeedbacks_{0}", Model.TabIndex) })
    <input type="hidden" id="ProviderFeedbackText_@Model.TabIndex" value="@ProviderFeedbackText" />
    <input type="hidden" id="CoderFeedback_@Model.TabIndex" value="@Model.ProviderFeedbackID" />
    <div title="@title" class="col-md-3 lessWidth input-group ControlWidth">
        <div class="form-control CoderDetails" style="line-height:2.2;overflow:hidden;height:32px;">
            <span style="white-space:nowrap">
                @if (!string.IsNullOrEmpty(Model.QAProviderFeedbackText) && !Model.ProviderFeedbackText.Equals(Model.QAProviderFeedbackText))
                {
                    <label style="color: red;">@ProviderFeedbackText</label>
                    <label style="color:green">@QAProviderFeedbackText</label>
                }
                else
                {
                    <label style="color: green;">@ProviderFeedbackText</label>
                }
            </span>
        </div>
    </div>
    @{Show = (string.IsNullOrEmpty(Model.QAProviderFeedbackText) ? "visibility:hidden" : "display:flex");}
    @{ Accepted = (string.IsNullOrEmpty(Model.QAProviderFeedbackText) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
    @{ Rejected = (string.IsNullOrEmpty(Model.QAProviderFeedbackText) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}
    @if (!string.IsNullOrEmpty(Model.QAProviderFeedbackText) && !Model.ProviderFeedbackText.Equals(Model.QAProviderFeedbackText))
    {
        <div title="@Model.QAProviderFeedbackText" class="col-md-2 input-group" style="@Show">
            <input type="text" id="@string.Format("QAProviderFeedbackRemarks_{0}", Model.TabIndex)" class="form-control QARemarks" disabled value="@Model.QAProviderFeedbackRemarks" />
        </div>
        <div class="input-group-append CoderCorrections" style="@Show">
            <span class="input-group-text ControlHeight" style="margin-left:-12px;">
                &nbsp;<i id="ProviderFeedbackID_@Model.TabIndex" class="@Accepted" aria-hidden="true"></i>
                &nbsp;<i id="ProviderFeedbackID_@Model.TabIndex" class="@Rejected" aria-hidden="true"></i>
            </span>
        </div>
        <input type="hidden" id="QAProviderFeedback_@Model.TabIndex" value="@Model.QAProviderFeedbackID" />
        @Html.DropDownListFor(model => model.QAProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), "--Select--", new { @style = "display:none", @class = "form-control QARevised", @id = string.Format("QAProviderFeedback_{0}", Model.TabIndex) })
        <div class="col-md-3 input-group CoderCorrections">
            @Html.TextBoxFor(model => model.RevisedProviderFeedbackRemarks, new { @class = string.Format("form-control Revised RevisedProviderFeedback_{0}", @Model.TabIndex), @id = string.Format("CoderProviderFeedbackRemarks_{0}", Model.TabIndex), @style = Show })
            <span id="validFeedback_@Model.TabIndex" class="text-danger txtdanger" style="display:none">*</span>
        </div>
    }
    else
    {
        Accepted = "fa fa-check-circle fa-lg accept";
        Rejected = "fa fa-times-circle fa-lg";
        Show = "display:none";

        <div title="@Model.QAProviderFeedbackText" class="col-md-2 input-group" style="@Show">
            <input type="text" id="@string.Format("QAProviderFeedbackRemarks_{0}", Model.TabIndex)" class="form-control QARemarks" disabled value="@Model.QAProviderFeedbackRemarks" />
        </div>
        <div class="input-group-append CoderCorrections" style="@Show">
            <span class="input-group-text ControlHeight" style="margin-left:-12px;">
                &nbsp;<i id="ProviderFeedbackID_@Model.TabIndex" class="@Accepted" aria-hidden="true"></i>
                &nbsp;<i id="ProviderFeedbackID_@Model.TabIndex" class="@Rejected" aria-hidden="true"></i>
            </span>
        </div>
        @Html.DropDownListFor(model => model.QAProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), "--Select--", new { @style = "display:none", @class = "form-control QARevised", @id = string.Format("QAProviderFeedback_{0}", Model.TabIndex) })
        <div class="col-md-3 input-group CoderCorrections">
            @Html.TextBoxFor(model => model.RevisedProviderFeedbackRemarks, new { @class = string.Format("form-control Revised RevisedProviderFeedback_{0}", @Model.TabIndex), @id = string.Format("CoderProviderFeedbackRemarks_{0}", Model.TabIndex), @style = Show })
            <span id="validFeedback_@Model.TabIndex" class="text-danger txtdanger" style="display:none">*</span>
        </div>
    }
</div>
<div class="clearfix"></div>
<div class="card">
    <div class="card-body">
        <h4 class="card-title">QA Details</h4>
    </div>
    <div class="card-body">
        <div class="col-12">
            <div class="row mb-3">
                <div class="col-lg-6">
                    <div class="form-group row">
                        <label class="col-md-3 m-t-15">
                            Error Type
                        </label>
                        <div class="col-md-7">
                            @if (Model.QADTO.ErrorType != null)
                            {
                                <input type="hidden" id="ErrorType_@Model.TabIndex" value="@Model.QADTO.ErrorType" />
                                @Html.DropDownListFor(model => model.QADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), Model.QAErrorTypeText.Split(',')[0], new { @class = "form-control ControlHeight CoderDetails", @id = string.Format("ErrorTypes_{0}", Model.TabIndex) })
                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.QADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), "--Select--", new { @class = "form-control ControlHeight CoderDetails", @id = string.Format("ErrorType_{0}", Model.TabIndex) })
                            }
                            @Html.ValidationMessageFor(model => model.QADTO.ErrorType, null, new { @class = "text-danger ErrorType" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="form-group row">
                        <label class="col-md-5 m-t-15"></label>
                        <div class="col-md-7">
                            <button id="btnsubmit" type="button" class="btn btn-success">Submit</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>