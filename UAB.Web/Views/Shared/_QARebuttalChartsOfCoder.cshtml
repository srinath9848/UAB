@model UAB.DTO.ChartSummaryDTO
<div class="col-md-12">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">
                <span>Chart ID : <label style="color: black;">@Model.CodingDTO.ClinicalCaseID&nbsp;&nbsp;&nbsp;&nbsp;</label></span>
                @if (Model.CodedBy != null)
                {
                    <span>Coded by : <label style="color: black;">@Model.CodedBy&nbsp;&nbsp;&nbsp;&nbsp;</label></span>
                }
                @if (Model.QABy != null)
                {
                    <span>
                        QA by : <label style="color:black;"> @Model.QABy &nbsp;&nbsp;&nbsp;&nbsp;</label>
                    </span>
                }
                @if (Model.ShadowQABy != null)
                {
                    <span>
                        ShadowQA by : <label style="color:black;"> @Model.ShadowQABy </label>
                    </span>
                }

            </h4>
        </div>
        @Html.HiddenFor(model => model.CodingDTO.ClinicalCaseID, new { @class = "form-control" })
        @Html.HiddenFor(model => model.ProjectID)
        @Html.HiddenFor(model => model.ProjectName)
        @Html.Hidden("hdnPayorID")
        @Html.Hidden("hdnProviderID")
        @Html.Hidden("hdnCpt")
        @Html.Hidden("hdnMod")
        @Html.Hidden("hdnDx")
        @Html.Hidden("hdnProviderFeedbackID")

        @Html.Hidden("hdnPayorIDReject")
        @Html.Hidden("hdnProviderIDReject")
        @Html.Hidden("hdnCptReject")
        @Html.Hidden("hdnModReject")
        @Html.Hidden("hdnDxReject")
        @Html.Hidden("hdnProviderFeedbackIDReject")

        @*<div class="form-group row">
            <label class="col-md-3 m-t-15"></label>

            <div class="custom-control col-md-2 input-group QAComments">
                <label class="" style="margin-left: -30px;">Coder</label>
            </div>

            <div class="custom-control col-md-2 input-group CoderComments" style="display:flex;margin-left: -31px;">
                <label class="">QA Corrections</label>
            </div>
            <div class="custom-control col-md-3 input-group QAComments" style="margin-left:-54px;">
                <label class="">QA Comments</label>
            </div>
            <div class="custom-control col-md-2 input-group QAComments" style="margin-left: 0px;">
                <label class="">Coder Comments</label>
            </div>
        </div>*@
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15"></label>
            <label class="col-md-3 lessWidth m-t-15">Coder</label>
            <label class="col-md-3 lessWidth m-t-15">QA Corrections</label>
            <label class="col-md-3 lessWidth m-t-15">QA Comments</label>
            <div class="input-group-append CoderCorrections" style="visibility:hidden">
                <span class="input-group-text">
                    &nbsp;<i class="fa fa-save fa-lg" aria-hidden="true"></i>
                    &nbsp;<i class="fa fa-save fa-lg" aria-hidden="true"></i>
                </span>
            </div>
            <label class="col-md-3 lessWidth m-t-15">Coder Comments</label>
        </div>
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15">Payor</label>
            <div class="col-md-3 lessWidth input-group">
                @{string Accepted = (string.IsNullOrEmpty(Model.QAPayorRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                @{string Rejected = (string.IsNullOrEmpty(Model.QAPayorRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}


                @Html.DropDownListFor(model => model.PayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), new { @class = "form-control CoderDetails" })
                <div class="input-group-append QACorrections">
                    <span class="input-group-text">
                        &nbsp;<i id="PayorID" class="@Accepted" aria-hidden="true"></i>
                        &nbsp;<i id="PayorID" class="@Rejected" aria-hidden="true"></i>
                    </span>
                </div>
            </div>
            @{string Show = (string.IsNullOrEmpty(Model.QAPayorRemarks) ? "display:none" : "display:flex");}
            <div class="col-md-3 lessWidth input-group">
                @Html.DropDownListFor(model => model.QAPayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), "--Select--", new { @id = "PayorID1", @class = "form-control QARevised", @style = (Model.QAPayorID == 0 ? "display:none" : "display:flex") })
                @Html.ValidationMessageFor(model => model.QAPayorID, null, new { @class = "text-danger errMsg" })
            </div>
            <div class="input-group-append CoderCorrections" style="@Show">
                <span class="input-group-text">
                    &nbsp;<i id="Payor" title="PayorID1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                    &nbsp;<i id="Payor" title="PayorID1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                </span>
            </div>
            <div class="col-md-3 lessWidth input-group">
                @Html.TextBoxFor(model => model.QAPayorRemarks, new { @title = Model.QAPayorRemarks, @style = Show, @class = "form-control QARevised", @id = "PayorID2" })
                @Html.ValidationMessageFor(model => model.QAPayorRemarks, null, new { @class = "text-danger errMsg" })
            </div>

            <div class="col-md-3 input-group CoderCorrections" style="@Show">
                @Html.TextBoxFor(model => model.RevisedPayorRemarks, new { @class = "form-control", @id = "RevisedPayorRemarks" })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15">Provider</label>
            <div class="col-md-3 lessWidth input-group">
                @{ Accepted = (string.IsNullOrEmpty(Model.QAProviderRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                @{ Rejected = (string.IsNullOrEmpty(Model.QAProviderRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

                @Html.DropDownListFor(model => model.ProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), new { @class = "form-control CoderDetails" })
                <div class="input-group-append QACorrections">
                    <span class="input-group-text">
                        &nbsp;<i id="ProviderID" class="@Accepted" aria-hidden="true"></i>
                        &nbsp;<i id="ProviderID" class="@Rejected" aria-hidden="true"></i>
                    </span>
                </div>
            </div>
            <div class="col-md-3 lessWidth input-group">
                @Html.DropDownListFor(model => model.QAProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @id = "ProviderID1", @class = "form-control QARevised", @style = (Model.QAProviderID == 0 ? "display:none" : "display:flex") })
                @Html.ValidationMessageFor(model => model.QAProviderID, null, new { @class = "text-danger errMsg" })
            </div>
            @{Show = (string.IsNullOrEmpty(Model.QAProviderRemarks) ? "display:none" : "display:flex");}
            <div class="col-md-3 lessWidth input-group">
                @Html.TextBoxFor(model => model.QAProviderRemarks, new { @title = Model.QAProviderRemarks, @style = Show, @class = "form-control QARevised", @id = "ProviderID2" })
                @Html.ValidationMessageFor(model => model.QAProviderRemarks, null, new { @class = "text-danger errMsg" })
            </div>
            <div class="input-group-append CoderCorrections" style="@Show">
                <span class="input-group-text">
                    &nbsp;<i id="Provider" title="ProviderID1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                    &nbsp;<i id="Provider" title="ProviderID1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                </span>
            </div>
            <div class="col-md-3 input-group CoderCorrections" style="@Show">
                @Html.TextBoxFor(model => model.RevisedProviderRemarks, new { @class = "form-control", @id = "RevisedProviderRemarks" })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15">CPT</label>
            <div class="col-md-3 lessWidth input-group">
                @{ Accepted = (string.IsNullOrEmpty(Model.QACPTCodeRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                @{ Rejected = (string.IsNullOrEmpty(Model.QACPTCodeRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

                @Html.TextAreaFor(model => model.CPTCode, new { @class = "form-control CoderDetails" })
                <div class="input-group-append QACorrections">
                    <span class="input-group-text">
                        &nbsp;<i id="CPTCode" class="@Accepted" aria-hidden="true"></i>
                        &nbsp;<i id="CPTCode" class="@Rejected" aria-hidden="true"></i>
                    </span>
                </div>
            </div>
            @{Show = (string.IsNullOrEmpty(Model.QACPTCodeRemarks) ? "display:none" : "display:flex");}
            <div class="col-md-3 lessWidth input-group">
                @Html.TextAreaFor(model => model.QACPTCode, new { @title = Model.QACPTCode, @style = Show, @id = "CPTCode1", @class = "form-control QARevised" })
                @Html.ValidationMessageFor(model => model.QACPTCode, null, new { @class = "text-danger errMsg" })
            </div>
            <div class="col-md-3 lessWidth input-group">
                @Html.TextBoxFor(model => model.QACPTCodeRemarks, new { @title = Model.QACPTCodeRemarks, @style = Show, @class = "form-control QARevised", @id = "CPTCode2" })
                @Html.ValidationMessageFor(model => model.QACPTCodeRemarks, null, new { @class = "text-danger errMsg" })
            </div>
            <div class="input-group-append CoderCorrections" style="@Show">
                <span class="input-group-text">
                    &nbsp;<i id="CPT" title="CPTCode1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                    &nbsp;<i id="CPT" title="CPTCode1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                </span>
            </div>
            <div class="col-md-3 input-group CoderCorrections" style="@Show">
                @Html.TextBoxFor(model => model.RevisedCPTRemarks, new { @style = Show, @class = "form-control", @id = "RevisedCPTRemarks" })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15">Mod</label>
            <div class="col-md-3 lessWidth input-group">
                @{ Accepted = (string.IsNullOrEmpty(Model.QAModRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                @{ Rejected = (string.IsNullOrEmpty(Model.QAModRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

                @Html.TextAreaFor(model => model.Mod, new { @class = "form-control CoderDetails" })
                <span class="input-group-text QACorrections">
                    &nbsp;<i id="Mod" class="@Accepted" aria-hidden="true"></i>
                    &nbsp;<i id="Mod" class="@Rejected" aria-hidden="true"></i>
                </span>
            </div>
            @{Show = (string.IsNullOrEmpty(Model.QAModRemarks) ? "display:none" : "display:flex");}
            <div class="col-md-3 lessWidth input-group">
                @Html.TextAreaFor(model => model.QAMod, new { @title = Model.QAMod, @style = Show, @class = "form-control QARevised", @id = "Mod1" })
                @Html.ValidationMessageFor(model => model.QAMod, null, new { @class = "text-danger errMsg" })
            </div>
            <div class="col-md-3 lessWidth input-group">
                @Html.TextBoxFor(model => model.QAModRemarks, new { @title = Model.QAModRemarks, @style = Show, @class = "form-control QARevised", @id = "Mod2" })
                @Html.ValidationMessageFor(model => model.QAModRemarks, null, new { @class = "text-danger errMsg" })
            </div>
            <div class="input-group-append CoderCorrections" style="@Show">
                <span class="input-group-text">
                    &nbsp;<i id="Mod" title="Mod1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                    &nbsp;<i id="Mod" title="Mod1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                </span>
            </div>
            <div class="col-md-3 input-group CoderCorrections" style="@Show">
                @Html.TextBoxFor(model => model.RevisedModRemarks, new { @class = "form-control", @id = "RevisedModRemarks" })
            </div>
        </div>

        
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15"> Feedback to Provider</label>
            <div class="col-md-3 lessWidth input-group">
                @{ Accepted = (string.IsNullOrEmpty(Model.QAProviderFeedbackRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                @{ Rejected = (string.IsNullOrEmpty(Model.QAProviderFeedbackRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

                @Html.DropDownListFor(model => model.ProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), new { @class = "form-control CoderDetails" })
                <div class="input-group-append" style="height: 38px;">
                    <span class="input-group-text QACorrections">
                        &nbsp;<i id="Feedback" class="@Accepted" aria-hidden="true"></i>
                        &nbsp;<i id="Feedback" class="@Rejected" aria-hidden="true"></i>
                    </span>
                </div>
            </div>
            @{Show = (string.IsNullOrEmpty(Model.QAProviderFeedbackRemarks) ? "display:none" : "display:flex");}
            <div class="col-md-3 lessWidth input-group">
                @Html.DropDownListFor(model => model.QAProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), "--Select--", new { @style = Show, @class = "form-control QARevised", @id = "Feedback1" })
                @Html.ValidationMessageFor(model => model.QAProviderFeedbackID, null, new { @class = "text-danger errMsg" })
            </div>
            <div class="col-md-3 lessWidth input-group">
                @Html.TextBoxFor(model => model.QAProviderFeedbackRemarks, new { @title = Model.QAProviderFeedbackRemarks, @style = Show, @class = "form-control QARevised", @id = "Feedback2" })
                @Html.ValidationMessageFor(model => model.QAProviderFeedbackRemarks, null, new { @class = "text-danger errMsg" })
            </div>
            <div class="input-group-append CoderCorrections" style="@Show">
                <span class="input-group-text">
                    &nbsp;<i id="ProviderFeedback" title="Feedback1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                    &nbsp;<i id="ProviderFeedback" title="Feedback1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                </span>
            </div>
            <div class="col-md-3 input-group CoderCorrections" style="@Show">
                @Html.TextBoxFor(model => model.RevisedProviderFeedbackRemarks, new { @style = Show, @class = "form-control", @id = "RevisedProviderFeedbackRemarks" })
            </div>
        </div>
        <div class="form-group row">
            @*<label class="col-md-3 lessWidth m-t-15">Coder Questions</label>
            <div class="col-md-3 lessWidth">
                @Html.TextAreaFor(model => model.CoderQuestion, new { @class = "form-control CoderDetails" })
            </div>*@
            <label class="col-md-3 lessWidth m-t-15">Note Title</label>
            <div class="col-md-3 lessWidth">
                @Html.TextAreaFor(model => model.NoteTitle, new { @class = "form-control CoderDetails" })
            </div>
        </div>
        @{
            Dictionary<int, string> dictQADxCodes = Utility.GetQAOrShadowQADxCodes(Model.QADx);
            List<string> lstdxCodes = Model.Dx.Split(',').ToList();
            int? count = (dictQADxCodes?.Count() > lstdxCodes.Count()) ? dictQADxCodes?.Count() : lstdxCodes.Count();
            Dictionary<int, string> dictDxCodes = Utility.GetDxCodes(Model.Dx, count.Value);
            int totalDxCount = count.Value + 1;
            Dictionary<int, string> dictQADxRemarks = Utility.GetQAOrShadowQADxRemarks(Model.QADxRemarks, count.Value);
        }
        <div id="DivDx">
            @{
                int j = 1;
                for (int i = 0; i < count; i++)
                {
                        <div class="form-group row">
                            @if (i == 0)
                            {
                                <label class="col-md-3 lessWidth m-t-15">Dx</label>
                            }
                            else
                            {
                                <label class="col-md-3 lessWidth m-t-15"></label>
                            }



                            @{int len = (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) ? 10 : 20); }
                            @{string Dx = (dictDxCodes.ElementAt(i).Value?.Length > len) ? dictDxCodes.ElementAt(i).Value.Substring(0, len) + ".." : dictDxCodes.ElementAt(i).Value;}
                            @{string QADx = (dictQADxCodes?.ElementAt(i).Value?.Length > len) ? "/" + dictQADxCodes?.ElementAt(i).Value.Substring(0, len) + ".." : "/" + dictQADxCodes?.ElementAt(i).Value;}
                            @{string title = (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) ? dictDxCodes.ElementAt(i).Value + "/" + dictQADxCodes?.ElementAt(i).Value : dictDxCodes.ElementAt(i).Value);}


                            <div class="col-md-3 lessWidth input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="basic-addon1">@j</span>
                                </div>
                                <div class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
                                    <span style="white-space:nowrap">
                                        @if (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value))
                                        {
                                            <label style="color: red;">@Dx</label>
                                            <label style="color:green">@QADx</label>
                                        }
                                        else
                                        {
                                            <label style="color: green;">@Dx</label>
                                        }
                                    </span>
                                </div>
                            </div>
                            <div class="col-md-3 lessWidth input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="basic-addon1">@j</span>
                                </div>
                                @{
                                    string QaDxVal = !string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) ? dictQADxCodes?.ElementAt(i).Value : dictDxCodes.ElementAt(i).Value;
                                }
                                <input type="text" id="txtDx_@j" class="form-control txtDx" autocomplete="off" tabindex="@j" placeholder="Code" value="@QaDxVal" />
                            </div>
                            <div class="input-group-append CoderCorrections">
                                <span class="input-group-text">
                                    &nbsp;<i id="Dx_@j" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                                    &nbsp;<i id="Dx_@j" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                                </span>
                            </div>
                            <div class="col-md-3 input-group CoderCorrections" style="@Show">
                                @Html.TextBoxFor(model => model.RevisedDXRemarks, new { @class = "form-control", @id = "RevisedDXRemarks" })
                            </div>
                            @{ Show = (string.IsNullOrEmpty(dictQADxRemarks?.ElementAt(i).Value) ? "visibility:hidden" : "display:flex"); }
                            <div title="" class="col-md-2 input-group" style="@Show">
                                <input type="text" class="form-control QARemarks" value="@dictQADxRemarks?.ElementAt(i).Value" />
                            </div>

                            @*<div class="col-md-3 lessWidth input-group">
            <input type="text" id="DxRemarks_@j" class="form-control DxRemarks_@j Dx_@j" style="display:none" />
        </div>*@
                        </div>

                    j = j + 1;
                }
            }

            <div class="form-group row">
                <label class="col-md-3 lessWidth m-t-15"></label>
                <div class="col-md-3 lessWidth input-group">
                </div>
                <div class="col-md-3 lessWidth input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="basic-addon1">@totalDxCount</span>
                    </div>
                    <input type="text" id="txtDx_@totalDxCount" onfocusout="DxFunction('txtDx_@totalDxCount')" class="form-control txtDx" tabindex="@totalDxCount" autofocus="autofocus" autocomplete="off" placeholder="Code" />
                </div>
                <div class="col-md-2 input-group">
                </div>
            </div>


        </div>

        <div class="clearfix"></div>
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">QA Details</h4>
            </div>
            <div class="card-body">
                <div class="col-12">
                    <div class="row mb-3">
                        <div class="col-lg-6">
                            <div class="form-group row">
                                <label class="col-md-3 m-t-15">
                                    Error Type
                                </label>
                                <div class="col-md-7">
                                    @Html.DropDownListFor(model => model.QADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), "--Select--", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.QADTO.ErrorType, null, new { @class = "text-danger ErrorType" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group row">
                                <label class="col-md-5 m-t-15"></label>
                                <div class="col-md-7">
                                    <button id="btnsubmit" type="submit" class="btn btn-success">Save</button>
                                    <button id="SubmitAndGetNext" name="SubmitAndGetNext" type="submit" value="SubmitAndGetNext" class="btn btn-success Available">Save And GetNext</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


<style>
    .errMsg {
        font-weight: bold;
        font-size: 20px;
    }

    #sortable-1 {
        list-style-type: none;
        margin: 0;
        padding: 0;
        width: 25%;
    }

    /*     #sortable-1 li {
            margin: 0 3px 3px 3px;
            padding: 0.4em;
            padding-left: 1.5em;
            font-size: 17px;
            height: 16px;
        }*/

    .default {
        background: #cedc98;
        border: 1px solid #DDDDDD;
        color: #333333;
    }

    .custom-control-label:before {
        left: -35px;
    }

    .custom-control-label:after {
        left: -35px;
    }

    .custom-control {
        padding-left: 0rem;
    }
</style>
<script src="~/dashboardassets/libs/jquery/dist/jquery.min.js"></script>
<script type="text/javascript">
    $("#PayorID1").attr('title', $("#PayorID1 option:selected").text());
    $("#ProviderID").attr('title', $("#ProviderID option:selected").text());
    $("#ProviderFeedbackID").attr('title', $("#ProviderFeedbackID option:selected").text());
    var dxArray = [];
    function DxFunction(txt_0) {
        var id = parseInt(txt_0.split("_")[1]) + parseInt(1);
        if (txt_0.split("_")[1] !== undefined) {
            var currId = parseInt(id) - parseInt(1);
            var val = $("#txtDx_" + currId).val();
            if (val !== "" && val !== null) {
                if ($.inArray(val, dxArray) == -1) {
                    dxArray.push(val);
                    $("#Dx").val(dxArray);
                    var text = "'" + "txtDx_" + id + "'";
                    $("#DivDx").append('<div class="form-group row"><label class= "col-md-3 lessWidth m-t-15" ></label><div class="col-md-2 input-group"></div ><div class="col-md-2 lessWidth input-group"><div class="input-group-prepend"><span class="input-group-text" id="basic-addon1">' + id + '</span></div><input type="text" placeholder="Code" tabindex="' + id + '" onfocusout="DxFunction(' + text + ')" class="form-control CoderDetails txtDx" id="txtDx_' + id + '" /></div></div>');
                    $("#txtDx_" + currId).removeAttr("onfocusout", "");
                    $("#txtDx_" + id).focus();
                }
            } else {
                //var id2 = parseInt(id) - parseInt(1);
                //var val = $("#txt" + id2).val();
                //if (val == "") {
                //    if (id2 !== 0) {
                //        dxArray.splice(id2, id2);
                //        $("#Dx").val(dxArray);
                //        $('#tr' + id2).remove();
                //        //$("#txt" + id2).focus();
                //    }
                //}
            }
        }
    }
</script>
