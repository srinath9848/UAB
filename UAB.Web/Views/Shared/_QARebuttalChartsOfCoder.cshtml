@model List<UAB.DTO.ChartSummaryDTO>
@using UAB.enums
<div class="col-md-12">
    <div class="card">
        @*<div class="card-body">
                <h4 class="card-title">
                    <span>Chart ID : <label style="color: black;">@Model.FirstOrDefault().CodingDTO.ClinicalCaseID&nbsp;&nbsp;&nbsp;&nbsp;</label></span>
                    @if (Model.FirstOrDefault().CodedBy != null)
                    {
                        <span>Coded by : <label style="color: black;">@Model.FirstOrDefault().CodedBy&nbsp;&nbsp;&nbsp;&nbsp;</label></span>
                    }
                    @if (Model.FirstOrDefault().QABy != null)
                    {
                        <span>
                            QA by : <label style="color:black;"> @Model.FirstOrDefault().QABy &nbsp;&nbsp;&nbsp;&nbsp;</label>
                        </span>
                    }
                    @if (Model.FirstOrDefault().ShadowQABy != null)
                    {
                        <span>
                            ShadowQA by : <label style="color:black;"> @Model.FirstOrDefault().ShadowQABy </label>
                        </span>
                    }

                </h4>
            </div>*@
        @Html.HiddenFor(model => model.FirstOrDefault().CodingDTO.ClinicalCaseID, new { @class = "form-control" })
        @Html.HiddenFor(model => model.FirstOrDefault().ProjectID)
        @Html.HiddenFor(model => model.FirstOrDefault().ProjectName)
        @Html.Hidden("hdnPayorID")
        @Html.Hidden("hdnProviderID")
        @Html.Hidden("hdnCpt")
        @Html.Hidden("hdnCptRemarks")
        @Html.Hidden("hdnDx")
        @Html.Hidden("hdnDxRemarks")
        @Html.Hidden("hdnProviderFeedbackID")

        @Html.Hidden("hdnDx2")
        @Html.Hidden("hdnDxRemarks2")
        @Html.Hidden("hdnDx3")
        @Html.Hidden("hdnDxRemarks3")
        @Html.Hidden("hdnDx4")
        @Html.Hidden("hdnDxRemarks4")

        @Html.Hidden("hdnCpt2")
        @Html.Hidden("hdnCptRemarks2")
        @Html.Hidden("hdnCpt3")
        @Html.Hidden("hdnCptRemarks3")
        @Html.Hidden("hdnCpt4")
        @Html.Hidden("hdnCptRemarks4")

        @Html.Hidden("hdnClaimId2")
        @Html.Hidden("hdnClaimId3")
        @Html.Hidden("hdnClaimId4")

        @Html.Hidden("hdnClaimData2")
        @Html.Hidden("hdnClaimData3")
        @Html.Hidden("hdnClaimData4")

        @Html.Hidden("hdnRejected")

        <ul class="nav nav-tabs" role="tablist">
            @{
                int tabIndex = 1;
                foreach (var tabitem in Model)
                {
                    if (tabitem.ClaimId == null)
                    {
                        <li class="nav-item tabDiv1"> <a class="nav-link active tab" data-toggle="tab" id="@tabIndex" alt="tabDiv1" href="#cliam1" role="tab"><span class="hidden-sm-up"></span> <span class="hidden-xs-down tabclick">Claim @tabIndex</span></a> </li>
                    }
                    else
                    {
                        var claimId = string.Format("tabIndex_{0}_ClaimId_{1}", tabIndex, tabitem.ClaimId);
                        <li class="@string.Format("nav-item tabDiv{0}", tabIndex)" style="display:inherit;"> <a class="nav-link tab" data-toggle="tab" id="@claimId" alt="tabDiv2" href="@string.Format("#cliam{0}", tabIndex)" role="tab"> <span class="hidden-sm-up"></span> <span class="hidden-xs-down tabclick">Claim @tabIndex</span></a></li>
                    }
                    tabIndex = tabIndex + 1;
                }
            }
        </ul>
        <div class="tab-content tabcontent-border">
            @{
                tabIndex = 1;
                foreach (var tabitem in Model)
                {
                    tabitem.TabIndex = tabIndex;
                    if (tabitem.ClaimId == null)
                    {
                        <div class="tab-pane active" id="cliam1" role="tabpanel">
                            <div class="p-20" id="tabDiv1">
                                <br />
                                <div class="form-group row">
                                    <label class="col-md-3 lessWidth m-t-15"></label>
                                    <label class="col-md-3 input-group">Coder</label>
                                    <label class="col-md-3 input-group">QA Corrections</label>
                                    <label class="col-md-3 lessWidth input-group">QA Comments</label>
                                    <div class="input-group-append CoderCorrections" style="visibility: hidden;margin-left: 45px;">
                                        <span class="input-group-text">
                                            &nbsp;<i class="fa fa-save fa-lg" aria-hidden="true"></i>
                                            &nbsp;<i class="fa fa-save fa-lg" aria-hidden="true"></i>
                                        </span>
                                    </div>
                                    <label class="col-md-3 lessWidth m-t-15">Coder Comments</label>
                                </div>
                                <div class="form-group row">
                                    <label class="col-md-3 lessWidth m-t-15">Provider</label>
                                    @{int len = (!string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderText) ? 10 : 20); }
                                    @{string ProviderText = (Model.FirstOrDefault().ProviderText?.Length > len) ? Model.FirstOrDefault().ProviderText.Substring(0, len) + ".." : Model.FirstOrDefault().ProviderText;}
                                    @{string QAProviderText = (Model.FirstOrDefault().QAProviderText?.Length > len) ? "/" + Model.FirstOrDefault().QAProviderText.Substring(0, len) + ".." : "/" + Model.FirstOrDefault().QAProviderText;}
                                    @{string title = (!string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderText) ? Model.FirstOrDefault().ProviderText + "/" + Model.FirstOrDefault().QAProviderText : Model.FirstOrDefault().ProviderText);}
                                    <div title="@title" class="col-md-3 input-group">
                                        @{string Accepted = (string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                                        @{string Rejected = (string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

                                        @Html.DropDownListFor(model => model.FirstOrDefault().ProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), new { @class = "form-control CoderDetails ControlHeight" })
                                        <div class="input-group-append QACorrections">
                                            <span class="input-group-text">
                                                &nbsp;<i id="ProviderID" class="@Accepted" aria-hidden="true"></i>
                                                &nbsp;<i id="ProviderID" class="@Rejected" aria-hidden="true"></i>
                                            </span>
                                        </div>
                                    </div>
                                    <div class="col-md-3 input-group">
                                        @Html.DropDownListFor(model => model.FirstOrDefault().QAProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @id = "ProviderID1", @class = "form-control QARevised ControlHeight", @style = (Model.FirstOrDefault().QAProviderID == 0 ? "display:none" : "display:flex") })
                                        @Html.ValidationMessageFor(model => model.FirstOrDefault().QAProviderID, null, new { @class = "text-danger errMsg" })
                                    </div>
                                    @{string Show = (string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderRemarks) ? "display:none" : "display:flex");}
                                    <div title="model.FirstOrDefault().QAProviderRemarks" class="col-md-3 lessWidth input-group">
                                        @Html.TextBoxFor(model => model.FirstOrDefault().QAProviderRemarks, new { @title = Model.FirstOrDefault().QAProviderRemarks, @style = Show, @class = "form-control QARevised ControlHeight", @id = "ProviderID2" })
                                        @Html.ValidationMessageFor(model => model.FirstOrDefault().QAProviderRemarks, null, new { @class = "text-danger errMsg" })
                                    </div>
                                    <div class="input-group-append CoderCorrections" style="@Show">
                                        <span class="input-group-text ControlHeight" style="margin-left:-12px;">
                                            &nbsp;<i id="Provider" title="ProviderID1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                                            &nbsp;<i id="Provider" title="ProviderID1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                                        </span>
                                    </div>
                                    <div title="model.FirstOrDefault().RevisedProviderRemarks" class="col-md-3 input-group CoderCorrections" style="@Show">
                                        @Html.TextBoxFor(model => model.FirstOrDefault().RevisedProviderRemarks, new { @class = "form-control ControlHeight", @id = "RevisedProviderRemarks" })
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label class="col-md-3 lessWidth m-t-15">Payor</label>
                                    @{len = (!string.IsNullOrEmpty(Model.FirstOrDefault().QAPayorText) ? 10 : 20); }
                                    @{string PayorText = (Model.FirstOrDefault().PayorText?.Length > len) ? Model.FirstOrDefault().PayorText.Substring(0, len) + ".." : Model.FirstOrDefault().PayorText;}
                                    @{string QAPayorText = (Model.FirstOrDefault().QAPayorText?.Length > len) ? "/" + Model.FirstOrDefault().QAPayorText.Substring(0, len) + ".." : "/" + Model.FirstOrDefault().QAPayorText;}
                                    @{title = (!string.IsNullOrEmpty(Model.FirstOrDefault().QAPayorText) ? Model.FirstOrDefault().PayorText + "/" + Model.FirstOrDefault().QAPayorText : Model.FirstOrDefault().PayorText);}
                                    <div title="@title" class="col-md-3 input-group">
                                        @{Accepted = (string.IsNullOrEmpty(Model.FirstOrDefault().QAPayorRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                                        @{Rejected = (string.IsNullOrEmpty(Model.FirstOrDefault().QAPayorRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}


                                        @Html.DropDownListFor(model => model.FirstOrDefault().PayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), new { @class = "form-control CoderDetails ControlHeight" })
                                        <div class="input-group-append QACorrections">
                                            <span class="input-group-text">
                                                &nbsp;<i id="PayorID" class="@Accepted" aria-hidden="true"></i>
                                                &nbsp;<i id="PayorID" class="@Rejected" aria-hidden="true"></i>
                                            </span>
                                        </div>
                                    </div>
                                    @{Show = (string.IsNullOrEmpty(Model.FirstOrDefault().QAPayorRemarks) ? "display:none" : "display:flex");}
                                    <div class="col-md-3 input-group">
                                        @Html.DropDownListFor(model => model.FirstOrDefault().QAPayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), "--Select--", new { @id = "PayorID1", @class = "form-control QARevised ControlHeight", @style = (Model.FirstOrDefault().QAPayorID == 0 ? "display:none" : "display:flex") })
                                        @Html.ValidationMessageFor(model => model.FirstOrDefault().QAPayorID, null, new { @class = "text-danger errMsg" })
                                    </div>

                                    <div title="model.FirstOrDefault().QAPayorRemarks" class="col-md-3 input-group">
                                        @Html.TextBoxFor(model => model.FirstOrDefault().QAPayorRemarks, new { @title = Model.FirstOrDefault().QAPayorRemarks, @style = Show, @class = "form-control QARevised ControlHeight", @id = "PayorID2" })
                                        @Html.ValidationMessageFor(model => model.FirstOrDefault().QAPayorRemarks, null, new { @class = "text-danger errMsg" })
                                    </div>
                                    <div class="input-group-append CoderCorrections" style="@Show">
                                        <span class="input-group-text ControlHeight" style="margin-left:-12px;">
                                            &nbsp;<i id="Payor" title="PayorID1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                                            &nbsp;<i id="Payor" title="PayorID1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                                        </span>
                                    </div>
                                    <div title="model.FirstOrDefault().RevisedPayorRemarks" class="col-md-3 input-group CoderCorrections" style="@Show">
                                        @Html.TextBoxFor(model => model.FirstOrDefault().RevisedPayorRemarks, new { @class = "form-control ControlHeight", @id = "RevisedPayorRemarks" })
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label class="col-md-3 lessWidth m-t-15">Note Title</label>
                                    <div title="model.FirstOrDefault().NoteTitle" class="col-md-3">
                                        @Html.TextBoxFor(model => model.FirstOrDefault().NoteTitle, new { @class = "form-control CoderDetails ControlHeight" })
                                    </div>
                                </div>
                                @{
                                    Dictionary<int, string> dictDxCodes = Utility.GetDxCodes(Model.FirstOrDefault().Dx);
                                    Dictionary<int, string> dictQADxCodes = Utility.GetQAOrShadowQADxCodes(Model.FirstOrDefault().QADx);
                                    Dictionary<int, string> dictQADxRemarks = Utility.GetQAOrShadowQADxRemarks(Model.FirstOrDefault().QADxRemarks);
                                    Dictionary<int, string> dictRevisedDxRemarks = Utility.GetQAOrShadowQADxRemarks(Model.FirstOrDefault().RevisedDXRemarks);

                                    dictQADxCodes = (dictQADxCodes == null) ? new Dictionary<int, string>() : dictQADxCodes;
                                    dictQADxRemarks = (dictQADxRemarks == null) ? new Dictionary<int, string>() : dictQADxRemarks;

                                    int count = Math.Max(dictDxCodes.Count(), dictQADxCodes.Count());

                                    int totalDxCount = count + 1;

                                    Utility.AddEmptyRows(dictDxCodes, count, "NA");
                                    Utility.AddEmptyRows(dictQADxCodes, count, "");
                                    Utility.AddEmptyRows(dictQADxRemarks, count, "");
                                    Utility.AddEmptyRows(dictRevisedDxRemarks, count, "");
                                }
                                <div id="DivDx">
                                    @{
                                        int j = 1;
                                        int i;
                                        for (i = 0; i < count; i++)
                                        {
                                            <div class="form-group row">
                                                @if (i == 0)
                                                {
                                                    <label class="col-md-3 lessWidth m-t-15">Dx</label>
                                                }
                                                else
                                                {
                                                    <label class="col-md-3 lessWidth m-t-15"></label>
                                                }

                                                <div title="@dictDxCodes.ElementAt(i).Value" class="col-md-3 input-group">
                                                    <div class="input-group-prepend ControlHeight">
                                                        <span class="input-group-text" id="basic-addon1">@j</span>
                                                    </div>
                                                    <div class="form-control CoderDetails ControlHeight" style="line-height:2.5;overflow:hidden">
                                                        <span style="white-space:nowrap">
                                                            <label style="color: green;">@dictDxCodes.ElementAt(i).Value</label>
                                                        </span>
                                                    </div>
                                                </div>
                                                @{ Show = (string.IsNullOrEmpty(dictRevisedDxRemarks?.ElementAt(i).Value) ? "visibility:hidden" : "display:flex"); }
                                                <div class="col-md-3 input-group" style="@Show">
                                                    <div class="input-group-prepend ControlHeight">
                                                        <span class="input-group-text" id="basic-addon1">@j</span>
                                                    </div>
                                                    <input id="txtDxCode_@j" type="text" class="form-control ControlHeight" autocomplete="off" tabindex="@j" placeholder="Code" value="@dictQADxCodes.ElementAt(i).Value" />
                                                </div>

                                                <div title="" class="col-md-2 input-group">
                                                    <input type="text" id="DxRemarks_@j" style="@Show" class="form-control QARevised ControlHeight" value="@dictQADxRemarks?.ElementAt(i).Value" />
                                                </div>
                                                <div class="input-group-append CoderCorrections ControlHeight" style="@Show">
                                                    <span class="input-group-text ControlHeight" style="margin-left:-12px;">
                                                        &nbsp;<i id="Dx_@j" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                                                        &nbsp;<i id="Dx_@j" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                                                    </span>
                                                </div>

                                                <div title="@dictRevisedDxRemarks?.ElementAt(i).Value" class="col-md-3 input-group CoderCorrections">
                                                    <input type="text" id="RevisedDXRemarks" class="form-control ControlHeight" style="@Show" value="@dictRevisedDxRemarks?.ElementAt(i).Value" />
                                                </div>
                                            </div>

                                            j = j + 1;
                                        }
                                    }
                                </div>

                                @{
                                    Dictionary<int, string> dictCptCodes = Utility.GetCptCodes(Model.FirstOrDefault().CPTCode);
                                    Dictionary<int, string> dictQACptCodes = Utility.GetQAOrShadowQACptCodes(Model.FirstOrDefault().QACPTCode);
                                    Dictionary<int, string> dictQACptRemarks = Utility.GetQAOrShadowQACptRemarks(Model.FirstOrDefault().QACPTCodeRemarks);
                                    Dictionary<int, string> dictRevisedCptRemarks = Utility.GetQAOrShadowQADxRemarks(Model.FirstOrDefault().RevisedCPTRemarks);

                                    dictCptCodes = (dictCptCodes == null) ? new Dictionary<int, string>() : dictCptCodes;
                                    dictQACptCodes = (dictQACptCodes == null) ? new Dictionary<int, string>() : dictQACptCodes;
                                    dictQACptRemarks = (dictQACptRemarks == null) ? new Dictionary<int, string>() : dictQACptRemarks;
                                    dictQACptRemarks = (dictQACptRemarks == null) ? new Dictionary<int, string>() : dictQACptRemarks;

                                    count = Math.Max(dictCptCodes.Count(), Math.Max(dictQACptCodes.Count(), 0));

                                    int totalCptCount = count + 1;

                                    Utility.AddEmptyRows(dictCptCodes, count, "NA");
                                    Utility.AddEmptyRows(dictQACptCodes, count, "");
                                    Utility.AddEmptyRows(dictQACptRemarks, count, "");
                                    Utility.AddEmptyRows(dictRevisedCptRemarks, count, "");

                                }
                                <div id="DivCpt">
                                    @{
                                        j = 1;
                                        for (i = 0; i < count; i++)
                                        {

                                            <div class="form-group row" id="DivCptRow_@j">
                                                @if (i == 0)
                                                {
                                                    <label class="col-md-3 lessWidth m-t-15">CPT</label>
                                                }
                                                else
                                                {
                                                    <label class="col-md-3 lessWidth m-t-15"></label>
                                                }
                                                @{ string[] coderCptcodes = dictCptCodes?.ElementAt(i).Value.Split("^");}
                                                @{ string[] qaCptcodes = dictQACptCodes?.ElementAt(i).Value.Split("^");}
                                                @{ Show = (string.IsNullOrEmpty(dictRevisedCptRemarks?.ElementAt(i).Value) ? "visibility:hidden" : "display:flex"); }
                                                @if (!string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value))
                                                {
                                                    // string codercptCode = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[0]);
                                                    string qacptCode = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[0]);
                                                    // string coderMod = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[1]);
                                                    string qaMod = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[1]);
                                                    // string coderQty = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[2]);
                                                    string qaQty = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[2]);
                                                    //string coderLinks = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[3]);
                                                    string qaLinks = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[3]);
                                                    string link = !string.IsNullOrEmpty(@qaLinks) || @qaLinks != "null" ? @qaLinks : "Link All";
                                                    <div title="Code : @qacptCode, Mod : @qaMod, Quantity : @qaQty, Links : @link" class="col-md-3 input-group" @*style="max-width:26% !important;"*@>
                                                        <div class="input-group-prepend ControlHeight">
                                                            <span class="input-group-text" id="basic-addon1">@j</span>
                                                        </div>
                                                        <input type="text" class="form-control CoderDetails ControlHeight" value="@qacptCode" style="width: 17px;color: green;" />
                                                        <input type="text" class="form-control CoderDetails ControlHeight" value="@qaMod" style="color: green;" />
                                                        <input type="text" class="form-control CoderDetails ControlHeight" value="@qaQty" style="color: green; " />
                                                        <input type="text" class="form-control CoderDetails ControlHeight" value="@qaLinks" style="color: green; " />
                                                    </div>
                                                }
                                                else
                                                {
                                                    string coderModVal = coderCptcodes[1] == "null" ? "" : coderCptcodes[1];
                                                    string coderLinkAllVal = coderCptcodes[3] == "null" ? "" : coderCptcodes[3];
                                                    string links = !string.IsNullOrEmpty(@coderLinkAllVal) || @coderLinkAllVal != "null" ? @coderLinkAllVal : "Link All";
                                                    <div title="Code : @coderCptcodes[0], Mod : @coderModVal, Quantity : @coderCptcodes[2], Links : @links" class="col-md-3 input-group" @*style="max-width:26% !important;"*@>
                                                        <div class="input-group-prepend ControlHeight">
                                                            <span class="input-group-text" id="basic-addon1">@j</span>
                                                        </div>
                                                        <input type="text" class="form-control CoderDetails ControlHeight" style="color: green;width: 17px;" placeholder="Code" value="@coderCptcodes[0]" />
                                                        <input type="text" class="form-control CoderDetails ControlHeight" style="color:green;" placeholder="Mod" value="@coderModVal" />
                                                        <input type="text" class="form-control CoderDetails ControlHeight" style="color:green;" placeholder="1" value="@coderCptcodes[2]" />
                                                        <input type="text" class="form-control CoderDetails ControlHeight" style="color: green;" placeholder="Link All" value="@coderLinkAllVal" />
                                                    </div>
                                                }





                                                <div class="col-md-3 CptlessWidth input-group" style="@Show">
                                                    <div class="input-group-prepend ControlHeight">
                                                        <span class="input-group-text" id="basic-addon1">@j</span>
                                                    </div>

                                                    @{
                                                        string ShadowQaCptVal = "";
                                                        string ShadowQaModVal = "";
                                                        string ShadowQaQtyVal = "";
                                                        string ShadowQaLinkAllVal = "";
                                                        ShadowQaCptVal = !string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value) ? dictQACptCodes?.ElementAt(i).Value : !string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value) ? dictQACptCodes?.ElementAt(i).Value : dictCptCodes?.ElementAt(i).Value;
                                                        if (dictQACptCodes?.ElementAt(i).Value == "NA" && string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value))
                                                        {
                                                            string[] CptCodes = dictCptCodes.ElementAt(i).Value.Split("^");
                                                            ShadowQaCptVal = CptCodes[0];
                                                            ShadowQaModVal = CptCodes[1] == "null" ? "" : CptCodes[1];
                                                            ShadowQaQtyVal = CptCodes[2];
                                                            ShadowQaLinkAllVal = CptCodes[3] == "null" ? "" : CptCodes[3];
                                                        }
                                                        else
                                                        {
                                                            string[] CptCodes = ShadowQaCptVal.Split("^");
                                                            ShadowQaCptVal = CptCodes[0] == "NA" ? "" : CptCodes[0];
                                                            if (ShadowQaCptVal != "")
                                                            {
                                                                ShadowQaModVal = CptCodes[1] == "null" ? "" : CptCodes[1];
                                                                ShadowQaQtyVal = CptCodes[2];
                                                                ShadowQaLinkAllVal = CptCodes[3] == "null" ? "" : CptCodes[3];
                                                            }
                                                        }
                                                    }
                                                    <input type="text" class="form-control QARemarks ControlHeight" id="txtCpt_@j" autocomplete="off" placeholder="Code" value="@ShadowQaCptVal" />
                                                    <input type="text" class="form-control QARemarks ControlHeight" id="txtMod_@j" autocomplete="off" placeholder="Mod" value="@ShadowQaModVal" />
                                                    <input type="text" id="txtQty_@j" class="form-control QARemarks ControlHeight" autocomplete="off" placeholder="1" value="@ShadowQaQtyVal" />
                                                    <input type="text" id="txtLinks_@j" class="form-control QARemarks ControlHeight" autocomplete="off" placeholder="Link All" value="@ShadowQaLinkAllVal" />
                                                </div>

                                                <div title="" class="col-md-2 input-group" style="@Show">
                                                    <input type="text" id="CptRemarks_@j" class="form-control ControlHeight" value="@dictQACptRemarks?.ElementAt(i).Value" />
                                                </div>
                                                <div class="input-group-append CoderCorrections ControlHeight" style="@Show">
                                                    <span class="input-group-text" style="margin-left:-12px;">
                                                        &nbsp;<i id="Cpt_@j" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                                                        &nbsp;<i id="Cpt_@j" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                                                    </span>
                                                </div>
                                                <div title="@dictRevisedCptRemarks?.ElementAt(i).Value" class="col-md-2 input-group CoderCorrections" style="@Show">
                                                    <input type="text" class="form-control ControlHeight" value="@dictRevisedCptRemarks?.ElementAt(i).Value" />
                                                </div>
                                            </div>
                                            j = j + 1;
                                        }
                                    }

                                </div>
                                <div class="form-group row">
                                    <label class="col-md-3 lessWidth m-t-15">Provider Feedback</label>
                                    @{len = (!string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderFeedbackText) ? 10 : 20); }
                                    @{string ProviderFeedbackText = (Model.FirstOrDefault().ProviderFeedbackText?.Length > len) ? Model.FirstOrDefault().ProviderFeedbackText.Substring(0, len) + ".." : Model.FirstOrDefault().ProviderFeedbackText;}
                                    @{string QAProviderFeedbackText = (Model.FirstOrDefault().QAProviderFeedbackText?.Length > len) ? "/" + Model.FirstOrDefault().QAProviderFeedbackText.Substring(0, len) + ".." : "/" + Model.FirstOrDefault().QAProviderFeedbackText;}
                                    @{title = (!string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderFeedbackText) ? Model.FirstOrDefault().ProviderFeedbackText + "/" + Model.FirstOrDefault().QAProviderFeedbackText : Model.FirstOrDefault().ProviderFeedbackText);}
                                    <div title="@title" class="col-md-3 input-group">
                                        @{ Accepted = (string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderFeedbackRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                                        @{ Rejected = (string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderFeedbackRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

                                        @Html.DropDownListFor(model => model.FirstOrDefault().ProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), new { @class = "form-control CoderDetails ControlHeight" })
                                        <div class="input-group-append" style="height: 38px;">
                                            <span class="input-group-text QACorrections">
                                                &nbsp;<i id="Feedback" class="@Accepted" aria-hidden="true"></i>
                                                &nbsp;<i id="Feedback" class="@Rejected" aria-hidden="true"></i>
                                            </span>
                                        </div>
                                    </div>
                                    @{Show = (string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderFeedbackRemarks) ? "display:none" : "display:flex");}
                                    <div class="col-md-3 input-group">
                                        @Html.DropDownListFor(model => model.FirstOrDefault().QAProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), "--Select--", new { @style = Show, @class = "form-control QARevised ControlHeight", @id = "Feedback1" })
                                        @Html.ValidationMessageFor(model => model.FirstOrDefault().QAProviderFeedbackID, null, new { @class = "text-danger errMsg" })
                                    </div>
                                    <div title="model.FirstOrDefault().QAProviderFeedbackRemarks" class="col-md-3 input-group">
                                        @Html.TextBoxFor(model => model.FirstOrDefault().QAProviderFeedbackRemarks, new { @title = Model.FirstOrDefault().QAProviderFeedbackRemarks, @style = Show, @class = "form-control QARevised ControlHeight", @id = "Feedback2" })
                                        @Html.ValidationMessageFor(model => model.FirstOrDefault().QAProviderFeedbackRemarks, null, new { @class = "text-danger errMsg" })
                                    </div>
                                    <div class="input-group-append CoderCorrections ControlHeight" style="@Show">
                                        <span class="input-group-text ControlHeight" style="margin-left:-12px;">
                                            &nbsp;<i id="ProviderFeedback" title="Feedback1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                                            &nbsp;<i id="ProviderFeedback" title="Feedback1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                                        </span>
                                    </div>
                                    <div title="model.FirstOrDefault().RevisedProviderFeedbackRemarks" class="col-md-3 input-group CoderCorrections" style="@Show">
                                        @Html.TextBoxFor(model => model.FirstOrDefault().RevisedProviderFeedbackRemarks, new { @style = Show, @class = "form-control ControlHeight", @id = "RevisedProviderFeedbackRemarks" })
                                    </div>
                                </div>

                                <div class="clearfix"></div>
                                <div class="card">
                                    <div class="card-body">
                                        <h4 class="card-title">QA Details</h4>
                                    </div>
                                    <div class="card-body">
                                        <div class="col-12">
                                            <div class="row mb-3">
                                                <div class="col-lg-6">
                                                    <div class="form-group row">
                                                        <label class="col-md-3 m-t-15">
                                                            Error Type
                                                        </label>
                                                        <div class="col-md-7">
                                                            @Html.DropDownListFor(model => model.FirstOrDefault().QADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), "--Select--", new { @class = "form-control ControlHeight CoderDetails" })
                                                            @Html.ValidationMessageFor(model => model.FirstOrDefault().QADTO.ErrorType, null, new { @class = "text-danger ErrorType" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-lg-6">
                                                    <div class="form-group row">
                                                        <label class="col-md-5 m-t-15"></label>
                                                        <div class="col-md-7">
                                                            <button id="btnsubmit" type="submit" class="btn btn-success">Save</button>
                                                            <button id="SubmitAndGetNext" name="SubmitAndGetNext" type="submit" value="SubmitAndGetNext" class="btn btn-success Available">Save And GetNext</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                    }
                    else
                    {
                        <div class="tab-pane" id="@string.Format("cliam{0}", tabIndex)" role="tabpanel">
                            <div class="p-20" id="@string.Format("tabDiv{0}", tabIndex)">
                                <partial name="_QARebuttalOfCoderClaim" model=tabitem />
                            </div>
                        </div>
                    }
                    tabIndex = tabIndex + 1;
                }
            }
        </div>
    </div>
</div>

<style>
    .errMsg {
        font-weight: bold;
        font-size: 20px;
    }

    #sortable-1 {
        list-style-type: none;
        margin: 0;
        padding: 0;
        width: 25%;
    }

    /*     #sortable-1 li {
            margin: 0 3px 3px 3px;
            padding: 0.4em;
            padding-left: 1.5em;
            font-size: 17px;
            height: 16px;
        }*/

    .default {
        background: #cedc98;
        border: 1px solid #DDDDDD;
        color: #333333;
    }

    .custom-control-label:before {
        left: -35px;
    }

    .custom-control-label:after {
        left: -35px;
    }

    .custom-control {
        padding-left: 0rem;
    }

    .ControlHeight {
        height: 32px;
    }
</style>
<script src="~/dashboardassets/libs/jquery/dist/jquery.min.js"></script>
<script type="text/javascript">
    $("#PayorID1").attr('title', $("#PayorID1 option:selected").text());
    $("#ProviderID").attr('title', $("#ProviderID option:selected").text());
    $("#ProviderFeedbackID").attr('title', $("#ProviderFeedbackID option:selected").text());
    var dxArray = [];
    function DxFunction(txt_0) {
        var id = parseInt(txt_0.split("_")[1]) + parseInt(1);
        if (txt_0.split("_")[1] !== undefined) {
            var currId = parseInt(id) - parseInt(1);
            var val = $("#txtDx_" + currId).val();
            if (val !== "" && val !== null) {
                if ($.inArray(val, dxArray) == -1) {
                    dxArray.push(val);
                    $("#Dx").val(dxArray);
                    var text = "'" + "txtDx_" + id + "'";
                    $("#DivDx").append('<div class="form-group row"><label class= "col-md-3 lessWidth m-t-15" ></label><div class="col-md-2 input-group"></div ><div class="col-md-2 lessWidth input-group"><div class="input-group-prepend"><span class="input-group-text" id="basic-addon1">' + id + '</span></div><input type="text" placeholder="Code" tabindex="' + id + '" onfocusout="DxFunction(' + text + ')" class="form-control CoderDetails txtDx" id="txtDx_' + id + '" /></div></div>');
                    $("#txtDx_" + currId).removeAttr("onfocusout", "");
                    $("#txtDx_" + id).focus();
                }
            } else {
                //var id2 = parseInt(id) - parseInt(1);
                //var val = $("#txt" + id2).val();
                //if (val == "") {
                //    if (id2 !== 0) {
                //        dxArray.splice(id2, id2);
                //        $("#Dx").val(dxArray);
                //        $('#tr' + id2).remove();
                //        //$("#txt" + id2).focus();
                //    }
                //}
            }
        }
    }
</script>
