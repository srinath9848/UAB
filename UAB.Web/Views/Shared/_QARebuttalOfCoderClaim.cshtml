@model UAB.DTO.ChartSummaryDTO
@using UAB.enums
@{
    int tabIndex = Model.TabIndex;
}
<br />
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15"></label>
    <label class="col-md-3 input-group">Coder</label>
    <label class="col-md-3 input-group">QA Corrections</label>
    <label class="col-md-3 lessWidth input-group">QA Comments</label>
    <div class="input-group-append CoderCorrections" style="visibility: hidden;margin-left: 45px;">
        <span class="input-group-text">
            &nbsp;<i class="fa fa-save fa-lg" aria-hidden="true"></i>
            &nbsp;<i class="fa fa-save fa-lg" aria-hidden="true"></i>
        </span>
    </div>
    <label class="col-md-3 lessWidth m-t-15">Coder Comments</label>
</div>
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15">Provider</label>
    @{int len = ((!string.IsNullOrEmpty(Model.QAProviderText) && !Model.ProviderText.Equals(Model.QAProviderText)) ? 10 : 20);}
    @{string ProviderText = (Model.ProviderText?.Length > len) ? Model.ProviderText.Substring(0, len) + ".." : Model.ProviderText;}
    @{string QAProviderText = (Model.QAProviderText?.Length > len) ? "/" + Model.QAProviderText.Substring(0, len) + ".." : "/" + Model.QAProviderText;}
    @{string title = (!string.IsNullOrEmpty(Model.QAProviderText) ? Model.ProviderText + "/" + Model.QAProviderText : Model.ProviderText);}
    <div title="@title" class="col-md-3 input-group">
        @{string Accepted = (string.IsNullOrEmpty(Model.RevisedProviderRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
        @{string Rejected = (string.IsNullOrEmpty(Model.RevisedProviderRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}
        @Html.DropDownListFor(model => model.ProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @id = string.Format("CoderProviderID_{0}", tabIndex), @class = "form-control CoderDetails ControlHeight" })
    </div>
    @{string Show = (string.IsNullOrEmpty(Model.RevisedProviderRemarks) ? "display:none" : "display:flex");}
    <div class="col-md-3 input-group">
        @Html.DropDownListFor(model => model.QAProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @id = string.Format("QAProviderID_{0}", tabIndex), @class = "form-control QARevised ControlHeight", @style = Show })
        @Html.ValidationMessageFor(model => model.QAProviderID, null, new { @class = "text-danger errMsg" })
        <div class="input-group-append CoderCorrections" style="@Show">
            <span class="input-group-text ControlHeight AcceptRejectWidth">
                &nbsp;<i id="ProviderID_@Model.TabIndex" class="@Accepted AdjustAcceptReject" aria-hidden="true"></i>
                &nbsp;<i id="ProviderID_@Model.TabIndex" class="@Rejected" aria-hidden="true"></i>
            </span>
        </div>
    </div>
    <div title="model.QAProviderRemarks" class="col-md-3 input-group">
        @Html.TextBoxFor(model => model.QAProviderRemarks, new { @title = Model.QAProviderRemarks, @style = Show, @class = "form-control QARevised ControlHeight", @id = string.Format("QAProviderIDRemarks_{0}", tabIndex) })
        @Html.ValidationMessageFor(model => model.QAProviderRemarks, null, new { @class = "text-danger errMsg" })
    </div>
    <div title="model.RevisedProviderRemarks" class="col-md-3 input-group CoderCorrections" style="@Show">
        @Html.TextBoxFor(model => model.RevisedProviderRemarks, new { @class = "form-control ControlHeight", @id = string.Format("CoderProviderIDRemarks_{0}", tabIndex) })
    </div>
</div>
@if (Model.ProjectTypename.ToUpper() != "IP")
{
    <div class="form-group row">
        <label class="col-md-3 lessWidth m-t-15">Billing Provider</label>
        @{len = ((!string.IsNullOrEmpty(Model.QABillingProviderText) && !Model.BillingProviderText.Equals(Model.QABillingProviderText)) ? 10 : 20);}
        @{string BillingProviderText = (Model.BillingProviderText?.Length > len) ? Model.BillingProviderText.Substring(0, len) + ".." : Model.BillingProviderText;}
        @{string QABillingProviderText = (Model.QABillingProviderText?.Length > len) ? "/" + Model.QABillingProviderText.Substring(0, len) + ".." : "/" + Model.QABillingProviderText;}
        @{title = (!string.IsNullOrEmpty(Model.QABillingProviderText) ? Model.BillingProviderText + "/" + Model.QABillingProviderText : Model.BillingProviderText);}
        <div title="@title" class="col-md-3 input-group">
            @{ Accepted = (string.IsNullOrEmpty(Model.RevisedBillingProviderRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
            @{Rejected = (string.IsNullOrEmpty(Model.RevisedBillingProviderRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}
            @Html.DropDownListFor(model => model.BillingProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @id = string.Format("CoderBillingProviderID_{0}", tabIndex), @class = "form-control CoderDetails ControlHeight" })
        </div>
        @{ Show = (string.IsNullOrEmpty(Model.RevisedBillingProviderRemarks) ? "display:none" : "display:flex");}
        <div class="col-md-3 input-group">
            @Html.DropDownListFor(model => model.QABillingProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @id = string.Format("QABillingProviderID_{0}", tabIndex), @class = "form-control QARevised ControlHeight", @style = Show })
            @Html.ValidationMessageFor(model => model.QABillingProviderID, null, new { @class = "text-danger errMsg" })
            <div class="input-group-append CoderCorrections" style="@Show">
                <span class="input-group-text ControlHeight AcceptRejectWidth">
                    &nbsp;<i id="BillingProviderID_@Model.TabIndex" class="@Accepted AdjustAcceptReject" aria-hidden="true"></i>
                    &nbsp;<i id="BillingProviderID_@Model.TabIndex" class="@Rejected" aria-hidden="true"></i>
                </span>
            </div>
        </div>
        <div title="model.QABillingProviderRemarks" class="col-md-3 input-group">
            @Html.TextBoxFor(model => model.QABillingProviderRemarks, new { @title = Model.QABillingProviderRemarks, @style = Show, @class = "form-control QARevised ControlHeight", @id = string.Format("QABillingProviderIDRemarks_{0}", tabIndex) })
            @Html.ValidationMessageFor(model => model.QABillingProviderRemarks, null, new { @class = "text-danger errMsg" })
        </div>
        <div title="model.RevisedBillingProviderRemarks" class="col-md-3 input-group CoderCorrections" style="@Show">
            @Html.TextBoxFor(model => model.RevisedBillingProviderRemarks, new { @class = "form-control ControlHeight", @id = string.Format("CoderBillingProviderIDRemarks_{0}", tabIndex) })
        </div>
    </div>
}
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15">Payor</label>
    @{ len = ((!string.IsNullOrEmpty(Model.QAPayorText) && !Model.PayorText.Equals(Model.QAPayorText)) ? 10 : 20);}
    @{string PayorText = (Model.PayorText?.Length > len) ? Model.PayorText.Substring(0, len) + ".." : Model.PayorText;}
    @{string QAPayorText = (Model.QAPayorText?.Length > len) ? "/" + Model.QAPayorText.Substring(0, len) + ".." : "/" + Model.QAPayorText;}
    @{title = (!string.IsNullOrEmpty(Model.QAPayorText) ? Model.PayorText + "/" + Model.QAPayorText : Model.PayorText);}
    <div title="@title" class="col-md-3 input-group">
        @{Accepted = (string.IsNullOrEmpty(Model.RevisedPayorRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
        @{Rejected = (string.IsNullOrEmpty(Model.RevisedPayorRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}
        @Html.DropDownListFor(model => model.PayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), "--Select--", new { @id = string.Format("CoderPayorID_{0}", tabIndex), @class = "form-control CoderDetails ControlHeight" })
    </div>
    @{Show = (string.IsNullOrEmpty(Model.RevisedPayorRemarks) ? "display:none" : "display:flex");}
    <div class="col-md-3 input-group">
        @Html.DropDownListFor(model => model.QAPayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), "--Select--", new { @id = string.Format("QAPayorID_{0}", tabIndex), @class = "form-control QARevised ControlHeight", @style = Show })
        @Html.ValidationMessageFor(model => model.QAPayorID, null, new { @class = "text-danger errMsg" })
        <div class="input-group-append CoderCorrections" style="@Show">
            <span class="input-group-text ControlHeight AcceptRejectWidth">
                &nbsp;<i id="PayorID_@tabIndex" class="@Accepted AdjustAcceptReject" aria-hidden="true"></i>
                &nbsp;<i id="PayorID_@tabIndex" class="@Rejected" aria-hidden="true"></i>
            </span>
        </div>
    </div>

    <div title="model.QAPayorRemarks" class="col-md-3 input-group">
        @Html.TextBoxFor(model => model.QAPayorRemarks, new { @title = Model.QAPayorRemarks, @style = Show, @class = "form-control QARevised ControlHeight", @id = string.Format("QAPayorIDRemarks_{0}", tabIndex) })
        @Html.ValidationMessageFor(model => model.QAPayorRemarks, null, new { @class = "text-danger errMsg" })
    </div>
    <div title="model.RevisedPayorRemarks" class="col-md-3 input-group CoderCorrections" style="@Show">
        @Html.TextBoxFor(model => model.RevisedPayorRemarks, new { @class = "form-control ControlHeight", @id = string.Format("CoderPayorIDRemarks_{0}", tabIndex) })
    </div>
</div>
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15">Note Title</label>
    <div title="model.NoteTitle" class="col-md-3">
        @Html.TextBoxFor(model => model.NoteTitle, new { @class = "form-control CoderDetails ControlHeight" })
    </div>
</div>
@{
    Dictionary<int, string> dictDxCodes = Utility.GetDxCodes(Model.Dx);
    Dictionary<int, string> dictQADxCodes = Utility.GetQAOrShadowQADxCodes(Model.QADx);
    Dictionary<int, string> dictQADxRemarks = Utility.GetQAOrShadowQADxRemarks(Model.QADxRemarks);
    Dictionary<int, string> dictRevisedDxRemarks = Utility.GetQAOrShadowQADxRemarks(Model.RevisedDXRemarks);

    dictQADxCodes = (dictQADxCodes == null) ? new Dictionary<int, string>() : dictQADxCodes;
    dictQADxRemarks = (dictQADxRemarks == null) ? new Dictionary<int, string>() : dictQADxRemarks;

    int count = Math.Max(dictDxCodes.Count(), dictQADxCodes.Count());

    int totalDxCount = count + 1;

    Utility.AddEmptyRows(dictDxCodes, count, "NA");
    Utility.AddEmptyRows(dictQADxCodes, count, "");
    Utility.AddEmptyRows(dictQADxRemarks, count, "");
    Utility.AddEmptyRows(dictRevisedDxRemarks, count, "");
}
<div id="DivDx">
    @{
        int j = 1;
        int i;
        for (i = 0; i < count; i++)
        {
            <div class="form-group row">
                @if (i == 0)
                {
                    <label class="col-md-3 lessWidth m-t-15">Dx</label>
                }
                else
                {
                    <label class="col-md-3 lessWidth m-t-15"></label>
                }
                @{string Dx = dictDxCodes.ElementAt(i).Value;}
                @{string QADx = (dictQADxCodes?.ElementAt(i).Value?.Length > len) ? "/" + dictQADxCodes?.ElementAt(i).Value.Substring(0, len) + ".." : "/" + dictQADxCodes?.ElementAt(i).Value;}

                <div title="@dictDxCodes.ElementAt(i).Value" class="col-md-3 input-group">
                    <div class="input-group-prepend ControlHeight">
                        <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                    </div>
                    <div class="form-control CoderDetails ControlHeight" style="line-height:2.5;overflow:hidden">
                        <span style="white-space:nowrap">
                            @if (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) && !dictDxCodes.ElementAt(i).Value.Equals(dictQADxCodes.ElementAt(i).Value))
                            {
                                <label style="color: red;">@Dx</label>
                                <label style="color:green">@QADx</label>
                            }
                            else
                            {
                                <label style="color: green;">@Dx</label>
                            }
                        </span>
                    </div>
                </div>
                @{ Show = (string.IsNullOrEmpty(dictRevisedDxRemarks?.ElementAt(i).Value) ? "visibility:hidden" : "display:flex"); }
                @{
                    Accepted = (string.IsNullOrEmpty(dictRevisedDxRemarks?.ElementAt(i).Value) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");
                    Rejected = (string.IsNullOrEmpty(dictRevisedDxRemarks?.ElementAt(i).Value) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");
                }
                <div class="col-md-3 input-group" style="@Show">
                    <div class="input-group-prepend ControlHeight">
                        <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                    </div>
                    <input type="hidden" id="@string.Format("CoderDxCodes_{0}_{1}", Model.TabIndex, j)" value="@dictDxCodes.ElementAt(i).Value" />
                    <input id="@string.Format("txtDxCode_{0}_{1}", Model.TabIndex, j)" type="text" class="form-control ControlHeight" autocomplete="off" tabindex="@j" placeholder="Code" value="@dictQADxCodes.ElementAt(i).Value" />
                    <div class="input-group-append CoderCorrections ControlHeight" style="@Show">
                        <span class="input-group-text ControlHeight AcceptRejectWidth">
                            &nbsp;<i id="@string.Format("DxClaim_{0}_{1}", Model.TabIndex, j)" class="@Accepted AdjustAcceptReject" aria-hidden="true"></i>
                            &nbsp;<i id="@string.Format("DxClaim_{0}_{1}", Model.TabIndex, j)" class="@Rejected" aria-hidden="true"></i>
                        </span>
                    </div>
                </div>
                <div title="" class="col-md-3 input-group">
                    <input type="text" id="@string.Format("DxRemarks_{0}_{1}", Model.TabIndex, j)" style="@Show" class="form-control QARevised ControlHeight" value="@dictQADxRemarks?.ElementAt(i).Value" />
                    <span id="@string.Format("validDxRemarksClaim_{0}_{1}", Model.TabIndex, j)" class="text-danger txtdanger" style="display:none">*</span>
                </div>
                <div class="col-md-3 input-group CoderCorrections">
                    <input type="text" id="RevisedDXRemarks" class="@string.Format("form-control ControlHeight CoderDXRemarks_{0}_{1}", Model.TabIndex, j)" style="@Show" value="@dictRevisedDxRemarks?.ElementAt(i).Value" />
                </div>
            </div>

            j = j + 1;
        }
    }
</div>

@{
    Dictionary<int, string> dictCptCodes = Utility.GetCptCodes(Model.CPTCode);
    Dictionary<int, string> dictQACptCodes = Utility.GetQAOrShadowQACptCodes(Model.QACPTCode);
    Dictionary<int, string> dictQACptRemarks = Utility.GetQAOrShadowQACptRemarks(Model.QACPTCodeRemarks);
    Dictionary<int, string> dictRevisedCptRemarks = Utility.GetQAOrShadowQADxRemarks(Model.RevisedCPTRemarks);

    dictCptCodes = (dictCptCodes == null) ? new Dictionary<int, string>() : dictCptCodes;
    dictQACptCodes = (dictQACptCodes == null) ? new Dictionary<int, string>() : dictQACptCodes;
    dictQACptRemarks = (dictQACptRemarks == null) ? new Dictionary<int, string>() : dictQACptRemarks;
    dictQACptRemarks = (dictQACptRemarks == null) ? new Dictionary<int, string>() : dictQACptRemarks;

    count = Math.Max(dictCptCodes.Count(), Math.Max(dictQACptCodes.Count(), 0));

    int totalCptCount = count + 1;

    Utility.AddEmptyRows(dictCptCodes, count, "NA");
    Utility.AddEmptyRows(dictQACptCodes, count, "");
    Utility.AddEmptyRows(dictQACptRemarks, count, "");
    Utility.AddEmptyRows(dictRevisedCptRemarks, count, "");

}
<div id="DivCpt">
    @{
        j = 1;
        for (i = 0; i < count; i++)
        {

            <div class="form-group row" id="@string.Format("DivCptRow_{0}_{1}", Model.TabIndex,j)">
                @if (i == 0)
                {
                    <label class="col-md-3 lessWidth m-t-15">CPT</label>
                }
                else
                {
                    <label class="col-md-3 lessWidth m-t-15"></label>
                }
                @{ string[] coderCptcodes = dictCptCodes?.ElementAt(i).Value.Split("^");}
                @{ string[] qaCptcodes = dictQACptCodes?.ElementAt(i).Value.Split("^");}
                @{ Show = (string.IsNullOrEmpty(dictRevisedCptRemarks?.ElementAt(i).Value) ? "visibility:hidden" : "display:flex"); }

                @{
                    Accepted = (string.IsNullOrEmpty(dictRevisedCptRemarks?.ElementAt(i).Value) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");
                    Rejected = (string.IsNullOrEmpty(dictRevisedCptRemarks?.ElementAt(i).Value) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");
                }

                @if (!string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value))
                {
                    string codercptCode = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[0]);
                    string qacptCode = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[0]);
                    string color = (codercptCode != qacptCode) ? "color:blue;" : "";
                    if (codercptCode == "NA")
                        color = "color:fuchsia;";
                    string cptCode = !string.IsNullOrEmpty(codercptCode) ? codercptCode : "";
                    string cptCode1 = cptCode == qacptCode ? "" : codercptCode + "/";

                    string coderMod = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[1]);
                    string qaMod = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[1]);
                    string mod = qaMod == "null" ? "" : qaMod;
                    color = (coderMod != qaMod) ? "color:blue;" : "";
                    if (coderMod == "NA")
                        color = "color:fuchsia;";
                    string cptMod = !string.IsNullOrEmpty(coderMod) ? coderMod : "";
                    string cptMod1 = cptMod == qaMod ? "" : coderMod + "/";

                    string coderQty = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[2]);
                    string qaQty = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[2]);
                    color = (coderQty != qaQty) ? "color:blue;" : "";
                    if (coderQty == "NA")
                        color = "color:fuchsia;";
                    string cptQty = !string.IsNullOrEmpty(coderQty) ? coderQty : "";
                    string cptQty1 = cptQty == qaQty ? "" : coderQty + "/";

                    string coderLinks = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[3]);
                    string qaLinks = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[3]);
                    color = (coderLinks != qaLinks) ? "color:blue;" : "";
                    if (coderLinks == "NA")
                        color = "color:fuchsia;";
                    string linkAll = qaLinks == "null" ? "" : qaLinks;
                    string cptLinks = !string.IsNullOrEmpty(coderLinks) ? coderLinks : "";
                    string cptLinks1 = !string.IsNullOrEmpty(coderLinks) ? coderLinks + "/" : "";

                    string link = !string.IsNullOrEmpty(@qaLinks) || @qaLinks != "null" ? @qaLinks : "Link All";
                    cptLinks1 = cptLinks == link ? "" : coderLinks + "/";
                    <div title="Code : @cptCode1@qacptCode, Mod : @cptMod1@mod, Quantity : @cptQty1@qaQty, Link : @cptLinks1@link" class="col-md-3 input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                        </div>
                        <div class="form-control CoderDetails" style="min-width:60px;">
                            @if (cptCode == qacptCode)
                            {
                                <span style="color:green">@cptCode</span>
                            }
                            else
                            {
                                <span style="color:red">@cptCode</span>
                                <br />
                                <span style="color:green">@qacptCode</span>
                            }
                        </div>

                        <div class="form-control CoderDetails">
                            @if (cptMod == mod)
                            {
                                <span style="color:green">@cptMod</span>
                            }
                            else
                            {
                                <span style="color:red">@cptMod</span>
                                <br />
                                <span style="color:green">@mod</span>
                            }
                        </div>

                        <div class="form-control CoderDetails">
                            @if (cptQty == qaQty)
                            {
                                <span style="color:green">@cptQty</span>
                            }
                            else
                            {
                                <span style="color:red">@cptQty</span>
                                <br />
                                <span style="color:green">@qaQty</span>
                            }
                        </div>

                        <div class="form-control CoderDetails">
                            @if (cptLinks == linkAll)
                            {
                                <span style="color:green">@cptLinks</span>
                            }
                            else
                            {
                                <span style="color:red">@cptLinks</span>
                                <br />
                                <span style="color:green">@linkAll</span>
                            }
                        </div>

                        @*<input type="hidden" id="@string.Format("CoderCptCodes_{0}_{1}", Model.TabIndex, j)" value="@qacptCode^@qaMod^@qaQty^@qaLinks" />*@
                        <input type="hidden" id="@string.Format("CoderCptCodes_{0}_{1}", Model.TabIndex, j)" value="@cptCode^@cptMod^@cptQty^@cptLinks" />
                    </div>
                }
                else
                {
                    string cptVal = coderCptcodes[0] == "NA" ? "" : coderCptcodes[0];
                    string coderModVal = "";
                    string coderLinkAllVal = "";
                    string qtyVal = "";
                    if (cptVal != "")
                    {
                        coderModVal = coderCptcodes[1] == "null" ? "" : coderCptcodes[1];
                        coderLinkAllVal = coderCptcodes[3] == "null" ? "" : coderCptcodes[3];
                        cptVal = coderCptcodes[0] == "NA" ? "" : coderCptcodes[0];
                        qtyVal = coderCptcodes[2];
                    }
                    <input type="hidden" id="@string.Format("CoderCptCodes_{0}_{1}", Model.TabIndex, j)" value="@cptVal^@coderModVal^@qtyVal^@coderLinkAllVal" />
                    <div title="Code : @cptVal, Mod : @coderModVal, Quantity : @qtyVal, Link : @coderLinkAllVal" class="col-md-3 input-group">
                        <div class="input-group-prepend ControlHeight">
                            <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                        </div>
                        <input type="text" maxlength="5" class="form-control CoderDetails ControlHeight" style="color: green;width: 17px;" placeholder="Code" value="@cptVal" />
                        <input type="text" class="form-control CoderDetails ControlHeight" style="color:green;" placeholder="Mod" value="@coderModVal" />
                        <input type="text" class="form-control CoderDetails ControlHeight" style="color:green;" placeholder="Qty" value="@qtyVal" />
                        <input type="text" class="form-control CoderDetails ControlHeight" style="color: green;" placeholder="Link All" value="@coderLinkAllVal" />
                        <input type="hidden" id="txtCPTCode_@j" value="@cptVal^@coderModVal^@qtyVal^@coderLinkAllVal" />
                    </div>
                }

                <div class="col-md-3 CptlessWidth input-group" style="@Show">
                    <div class="input-group-prepend ControlHeight">
                        <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                    </div>
                    @{
                        string ShadowQaCptVal = "";
                        string ShadowQaModVal = "";
                        string ShadowQaQtyVal = "";
                        string ShadowQaLinkAllVal = "";
                        ShadowQaCptVal = !string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value) ? dictQACptCodes?.ElementAt(i).Value : !string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value) ? dictQACptCodes?.ElementAt(i).Value : dictCptCodes?.ElementAt(i).Value;
                        if (dictQACptCodes?.ElementAt(i).Value == "NA" && string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value))
                        {
                            string[] CptCodes = dictCptCodes.ElementAt(i).Value.Split("^");
                            ShadowQaCptVal = CptCodes[0];
                            ShadowQaModVal = CptCodes[1] == "null" ? "" : CptCodes[1];
                            ShadowQaQtyVal = CptCodes[2];
                            ShadowQaLinkAllVal = CptCodes[3] == "null" ? "" : CptCodes[3];
                        }
                        else
                        {
                            string[] CptCodes = ShadowQaCptVal.Split("^");
                            ShadowQaCptVal = CptCodes[0] == "NA" ? "" : CptCodes[0];
                            if (ShadowQaCptVal != "")
                            {
                                ShadowQaModVal = CptCodes[1] == "null" ? "" : CptCodes[1];
                                ShadowQaQtyVal = CptCodes[2];
                                ShadowQaLinkAllVal = CptCodes[3] == "null" ? "" : CptCodes[3];
                            }
                        }
                    }
                    <input type="text" maxlength="5" class="form-control QARemarks ControlHeight" id="@string.Format("txtCpt_{0}_{1}", Model.TabIndex, j)" style="min-width:48px;" autocomplete="off" placeholder="Code" value="@ShadowQaCptVal" />
                    <input type="text" class="form-control QARemarks ControlHeight" id="@string.Format("txtMod_{0}_{1}", Model.TabIndex, j)" autocomplete="off" placeholder="Mod" value="@ShadowQaModVal" />
                    <input type="text" id="@string.Format("txtQty_{0}_{1}", Model.TabIndex, j)" class="form-control QARemarks ControlHeight" style="max-width:22px;" autocomplete="off" placeholder="Qty" value="@ShadowQaQtyVal" />
                    <input type="text" id="@string.Format("txtLinks_{0}_{1}", Model.TabIndex, j)" class="form-control QARemarks ControlHeight" autocomplete="off" placeholder="Link All" value="@ShadowQaLinkAllVal" />
                    <div class="input-group-append CoderCorrections ControlHeight" style="@Show">
                        <span class="input-group-text AcceptRejectWidth">
                            &nbsp;<i id="@string.Format("Cpt_{0}_{1}", Model.TabIndex,j)" class="@Accepted AdjustAcceptReject" aria-hidden="true"></i>
                            &nbsp;<i id="@string.Format("Cpt_{0}_{1}", Model.TabIndex,j)" class="@Rejected" aria-hidden="true"></i>
                        </span>
                    </div>
                </div>

                <div class="col-md-3 input-group">
                    <input type="text" style="@Show" class="form-control ControlHeight" id="@string.Format("CptRemarks_{0}_{1}", Model.TabIndex, j)" value="@dictQACptRemarks?.ElementAt(i).Value" />
                    <span id="@string.Format("validCptRemarksClaim_{0}_{1}", Model.TabIndex, j)" class="text-danger txtdanger" style="display:none">*</span>

                </div>

                <div class="col-md-3 input-group CoderCorrections">
                    <input type="text" style="@Show" class="@string.Format("form-control ControlHeight CoderCptRemarks_{0}_{1}", Model.TabIndex, j)" value="@dictRevisedCptRemarks?.ElementAt(i).Value" />
                </div>
            </div>
            j = j + 1;
        }
    }
</div>
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15">Provider Feedback</label>
    @{ len = ((!string.IsNullOrEmpty(Model.QAProviderFeedbackText) && !Model.ProviderFeedbackText.Equals(Model.QAProviderFeedbackText)) ? 10 : 20);}
    @{string ProviderFeedbackText = (Model.ProviderFeedbackText?.Length > len) ? Model.ProviderFeedbackText.Substring(0, len) + ".." : Model.ProviderFeedbackText;}
    @{string QAProviderFeedbackText = (Model.QAProviderFeedbackText?.Length > len) ? "/" + Model.QAProviderFeedbackText.Substring(0, len) + ".." : "/" + Model.QAProviderFeedbackText;}
    @{title = (!string.IsNullOrEmpty(Model.QAProviderFeedbackText) ? Model.ProviderFeedbackText + "/" + Model.QAProviderFeedbackText : Model.ProviderFeedbackText);}
    <div title="@title" class="col-md-3 input-group">
        @{ Accepted = (string.IsNullOrEmpty(Model.RevisedProviderFeedbackRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
        @{ Rejected = (string.IsNullOrEmpty(Model.RevisedProviderFeedbackRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}
        <input type="hidden" id="CoderFeedback_@tabIndex" value="@Model.ProviderFeedbackID" />
        @if (ProviderFeedbackText != null)
        {
            @Html.DropDownListFor(model => model.ProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), Model.ProviderFeedbackText, new { @id = string.Format("CoderFeedback_{0}", tabIndex), @class = "form-control CoderDetails ControlHeight" })
        }
        else
        {
            @Html.DropDownListFor(model => model.ProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), "--Select--", new { @id = string.Format("CoderFeedback_{0}", tabIndex), @class = "form-control CoderDetails ControlHeight" })
        }
    </div>
    @{Show = (string.IsNullOrEmpty(Model.RevisedProviderFeedbackRemarks) ? "display:none" : "display:flex");}
    <div class="col-md-3 input-group">
        <select id="QAProviderFeedback_@tabIndex" name="QAProviderFeedback" multiple="multiple" class="form-control ControlHeight">
            @if (ViewBag.ProviderFeedbacks != null)
            {
                foreach (var item in ViewBag.ProviderFeedbacks)
                {
                    if (item.Name != null)
                    {
                        var lst = Model.QAProviderFeedbackID.Split(',').ToList();
                        bool exist = lst.Contains(item.ID.ToString());
                        if (!exist)
                        {
                            <option value="@item.ID"> @item.Name </option>
                        }
                        else
                        {
                            <option value="@item.ID" selected="selected"> @item.Name </option>
                        }
                    }
                }
            }
        </select>
        @*@Html.DropDownListFor(model => model.QAProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), "--Select--", new { @style = Show, @class = "form-control QARevised ControlHeight", @id = string.Format("QAProviderFeedback_{0}", tabIndex) })*@
        @Html.ValidationMessageFor(model => model.QAProviderFeedbackID, null, new { @class = "text-danger errMsg" })
        <div class="input-group-append CoderCorrections ControlHeight" style="@Show">
            <span class="input-group-text ControlHeight AcceptRejectWidth">
                &nbsp;<i id="Feedback_@tabIndex" class="@Accepted AdjustAcceptReject" aria-hidden="true"></i>
                &nbsp;<i id="Feedback_@tabIndex" class="@Rejected" aria-hidden="true"></i>
            </span>
        </div>
    </div>
    <div title="model.QAProviderFeedbackRemarks" class="col-md-3 input-group">
        @Html.TextBoxFor(model => model.QAProviderFeedbackRemarks, new { @title = Model.QAProviderFeedbackRemarks, @style = Show, @class = "form-control QARevised ControlHeight", @id = string.Format("QAProviderFeedbackRemarks_{0}", tabIndex) })
        @Html.ValidationMessageFor(model => model.QAProviderFeedbackRemarks, null, new { @class = "text-danger errMsg" })
    </div>
    <div title="model.RevisedProviderFeedbackRemarks" class="col-md-3 input-group CoderCorrections" style="@Show">
        @Html.TextBoxFor(model => model.RevisedProviderFeedbackRemarks, new { @style = Show, @class = "form-control ControlHeight", @id = string.Format("CoderProviderFeedbackRemarks_{0}", tabIndex) })
    </div>
</div>

<div class="clearfix"></div>
<div class="card">
    <div class="card-body">
        <h4 class="card-title">QA Details</h4>
    </div>
    <div class="card-body">
        <div class="col-12">
            <div class="row mb-3">
                <div class="col-lg-6">
                    <div class="form-group row">
                        <label class="col-md-3 m-t-15">
                            Error Type
                        </label>
                        <div class="col-md-7" title="@Model.QAErrorTypeText">
                            @if (Model.QADTO.ErrorType != null)
                            {
                                <input type="hidden" id="ErrorType_@Model.TabIndex" value="@Model.QADTO.ErrorType" />
                                @Html.DropDownListFor(model => model.QADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), Model.QAErrorTypeText.Split(',')[0], new { @class = "form-control ControlHeight", @readonly = "readonly", @style = "pointer-events: none;", @id = string.Format("ErrorTypes_{0}", Model.TabIndex), @onchange = "ErrorType('" + tabIndex + "')" })
                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.QADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), "--Select--", new { @class = "form-control ControlHeight", @readonly = "readonly", @style = "pointer-events: none;", @id = string.Format("ErrorType_{0}", Model.TabIndex), @onchange = "ErrorType('" + tabIndex + "')" })
                            }
                            @Html.ValidationMessageFor(model => model.QADTO.ErrorType, null, new { @class = "text-danger ErrorType", @id = string.Format("ErrorTypeError_{0}", Model.TabIndex) })

                            @*@Html.DropDownListFor(model => model.QADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), "--Select--", new { @class = "form-control ControlHeight CoderDetails", @id = string.Format("ErrorType_{0}", tabIndex) })*@
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="form-group row">
                        <label class="col-md-5 m-t-15"></label>
                        <div class="col-md-7">
                            <button id="btnsubmit" type="button" class="btn btn-success">Save</button>
                            <button id="SubmitAndGetNext" name="SubmitAndGetNext" type="submit" value="SubmitAndGetNext" class="btn btn-success Available">Save And GetNext</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<link href="~/css/bootstrap-multiselect.css" rel="stylesheet" />
<script src="~/dashboardassets/libs/jquery/dist/jquery.min.js"></script>
<script src="~/js/bootstrap-multiselect.js"></script>
<script type="text/javascript">
    $('#QAProviderFeedback_2').multiselect({
        includeSelectAllOption: true
    });
    $('#QAProviderFeedback_3').multiselect({
        includeSelectAllOption: true
    });
    $('#QAProviderFeedback_4').multiselect({
        includeSelectAllOption: true
    });
</script>