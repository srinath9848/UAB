@model List<UAB.DTO.ChartSummaryDTO>
@using UAB.enums
@*<style type="text/css">
        .col-md-3 {
            margin-left: 10px !important;
        }

        .form-control {
            padding: 0 !important;
        }
    </style>*@
<style type="text/css">
    .col-md-3 {
        margin-left: 10px !important;
    }

    .form-control {
        padding: 0 !important;
    }

    div.CptlessWidth {
        max-width: 20% !important;
    }

    .ControlHeight {
        height: 32px !important;
    }

    label.lessWidth {
        max-width: 12% !important;
    }

    .AlignControl {
        margin-right: -115px;
    }
</style>
<div class="col-md-12">
    <div class="card">
        @Html.HiddenFor(Model => Model.FirstOrDefault().Dx)
        @Html.HiddenFor(Model => Model.FirstOrDefault().CPTCode)
        @Html.HiddenFor(Model => Model.FirstOrDefault().Links)
        @Html.HiddenFor(Model => Model.FirstOrDefault().ProjectName)
        @Html.HiddenFor(Model => Model.FirstOrDefault().ProjectID)
        @Html.HiddenFor(Model => Model.FirstOrDefault().CodingDTO.ClinicalCaseID, new { @id = "ccid" })

        <ul class="nav nav-tabs" role="tablist">
            @{
                int tabIndex = 1;
                foreach (var tabitem in Model)
                {
                    if (tabitem.ClaimId == null)
                    {
                        <li class="nav-item tabDiv1"> <a class="nav-link active tab" data-toggle="tab" id="@tabIndex" alt="tabDiv1" href="#cliam1" role="tab"><span class="hidden-sm-up"></span> <span class="hidden-xs-down tabclick">Cliam @tabIndex</span></a> </li>
                    }
                    else
                    {
                        <li class="@string.Format("nav-item tabDiv{0}", tabIndex)" style="display:inherit;"> <a class="nav-link tab" data-toggle="tab" id="@tabIndex" alt="tabDiv2" href="@string.Format("#cliam{0}", tabIndex)" role="tab"> <span class="hidden-sm-up"></span> <span class="hidden-xs-down tabclick">Cliam @tabIndex</span></a></li>
                    }
                    tabIndex = tabIndex + 1;
                }
            }
        </ul>
        <div class="tab-content tabcontent-border">
            @{
                tabIndex = 1;
                foreach (var tabitem in Model)
                {
                    tabitem.TabIndex = tabIndex;
                    if (tabitem.ClaimId == null)
                    {
                        <div class="tab-pane active" id="cliam1" role="tabpanel">
                            <div class="p-20" id="tabDiv1">
                                <br />
                                <div class="card">
                                    <div class="form-group row">
                                        <label class="col-md-3 m-t-15 AlignControl">Provider</label>
                                        @{int len = (!string.IsNullOrEmpty(Model.FirstOrDefault().ProviderText) ? 10 : 20); }
                                        @{string ProviderText = (Model.FirstOrDefault().ProviderText?.Length > len) ? Model.FirstOrDefault().ProviderText.Substring(0, len) + ".." : Model.FirstOrDefault().ProviderText;}
                                        @{string title = Model.FirstOrDefault().ProviderText;}
                                        <div title="@title" class="col-md-3" style="display:inherit;">
                                            @if (@Model.FirstOrDefault().ProviderID != 0)
                                            {
                                                @Html.DropDownListFor(Model => Model.FirstOrDefault().ProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @class = "form-control CoderDetails ControlHeight", @style = "pointer-events:none;background-color:#e9ecef" })
                                            }
                                            else
                                            {
                                                @Html.DropDownListFor(Model => Model.FirstOrDefault().ProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @class = "form-control CoderDetails ControlHeight" })
                                            }

                                            @Html.ValidationMessageFor(Model => Model.FirstOrDefault().ProviderID, null, new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <label class="col-md-3 m-t-15 AlignControl">Payor</label>
                                        @{len = (!string.IsNullOrEmpty(Model.FirstOrDefault().PayorText) ? 10 : 20); }
                                        @{string PayorText = (Model.FirstOrDefault().PayorText?.Length > len) ? Model.FirstOrDefault().PayorText.Substring(0, len) + ".." : Model.FirstOrDefault().PayorText;}
                                        @{title = Model.FirstOrDefault().PayorText;}
                                        <div title="@title" class="col-md-3" style="display:inherit;">
                                            @Html.DropDownListFor(Model => Model.FirstOrDefault().PayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), "--Select--", new { @class = "form-control CoderDetails ControlHeight" })
                                            @Html.ValidationMessageFor(Model => Model.FirstOrDefault().PayorID, null, new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <label class="col-md-3 m-t-15 AlignControl">Note Title</label>
                                        <div title="@Model.FirstOrDefault().NoteTitle" class="col-md-3">
                                            @Html.TextBoxFor(Model => Model.FirstOrDefault().NoteTitle, new { @class = "form-control CoderDetails ControlHeight", @autocomplete = "off" })
                                            @Html.ValidationMessageFor(Model => Model.FirstOrDefault().NoteTitle, null, new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <!--<div id="DivDx">
                            <div class="form-group row" id="DivDxRow_1">
                                <label class="col-md-3 m-t-15 AlignControl">Dx</label>
                                <div class="col-md-3 input-group">
                                    <div class="input-group-prepend ControlHeight">
                                        <span class="input-group-text dxindex" id="basic-addon1">1</span>
                                    </div>
                                    @Html.TextBoxFor(Model => Model.FirstOrDefault().Dx, new { @class = "form-control CoderDetails txtDx ControlHeight", @autocomplete = "off", @id = "txtDx_1", @placeholder = "Code", @onfocusout = "DxFunction('txtDx_1')" })
                                    @Html.ValidationMessageFor(Model => Model.FirstOrDefault().Dx, null, new { @class = "text-danger Dxerror" })-->
                                    @*<button type="button" class="btn btn-sm" onclick="DeleteDxCodes('DivDxRow_1')"><i class="fa fa-times"></i></button>*@
                                    <!--</div>
                                </div>
                            </div>
                            <div id="DivCpt">
                                <div class="form-group row" id="DivCptRow_1">
                                    <label class="col-md-3 m-t-15 AlignControl">CPT</label>
                                    <div class="col-md-3 CptlessWidth input-group">
                                        <div class="input-group-prepend ControlHeight">
                                            <span class="input-group-text cptindex" id="basic-addon1">1</span>
                                        </div>
                                        @Html.TextBoxFor(Model => Model.FirstOrDefault().CPTCode, new { @class = "form-control CoderDetails txtCpt ControlHeight", @autocomplete = "off", @placeholder = "Code", @id = "txtCpt_1", @tabindex = "5" })
                                        <input type="text" class="form-control CoderDetails txtMod" id="txtMod_1" autocomplete="off" placeholder="Mod" tabindex="6" />
                                        <input type="text" id="txtQty_1" class="form-control CoderDetails txtQty" autocomplete="off" placeholder="1" value="1" tabindex="7" />
                                        <input type="text" id="txtLinks_1" onfocusout="CptFunction('txtLinks_1')" class="form-control CoderDetails txtLinks" autocomplete="off" placeholder="Link All" tabindex="8" />
                                        @Html.ValidationMessageFor(Model => Model.FirstOrDefault().CPTCode, null, new { @class = "text-danger Dxerror" })-->
                                    @*<button type="button" class="btn btn-sm" onclick="DeleteCptCodes('txtLinks_1')"><i class="fa fa-times"></i></button>*@
                                    <!--</div>
                                </div>
                            </div>-->
                                    @{
                                        int i = 1;
                                        foreach (var item in Model.FirstOrDefault().Dx.Split(','))
                                        {
                                            <div class="form-group row">
                                                @if (i == 1)
                                                {
                                                    <label class="col-md-3 m-t-15 AlignControl">Dx</label>
                                                }
                                                else
                                                {
                                                    <label class="col-md-3 m-t-15 AlignControl"></label>
                                                }
                                                <div title="@item" class="col-md-3 input-group">
                                                    <div class="input-group-prepend">
                                                        <span class="input-group-text" id="basic-addon1">@i</span>
                                                    </div>
                                                    <input class="form-control CoderDetails valid" type="text" value="@item">
                                                </div>
                                            </div>
                                            i = i + 1;
                                        }
                                    }

                                    @{
                                        i = 1;
                                        foreach (var item in Model.FirstOrDefault().CPTCode.Split('|'))
                                        {
                                            string[] coderCptcodes = item.Split("^");
                                            string mod = coderCptcodes[1] == "null" ? "" : coderCptcodes[1];
                                            string linkAll = coderCptcodes[3] == "null" ? "" : coderCptcodes[3];
                                            string links = !string.IsNullOrEmpty(@linkAll) || @linkAll != "" ? @linkAll : "Link All";
                                            <div class="form-group row">
                                                @if (i == 1)
                                                {
                                                    <label class="col-md-3 m-t-15 AlignControl">CPT</label>
                                                }
                                                else
                                                {
                                                    <label class="col-md-3 m-t-15 AlignControl"></label>
                                                }
                                                <div title="Code : @coderCptcodes[0], Mod : @mod, Quantity : @coderCptcodes[2], Links : @links" class="col-md-3 lessWidth input-group" style="max-width:20% !important;">
                                                    <div class="input-group-prepend">
                                                        <span class="input-group-text" id="basic-addon1">@i</span>
                                                    </div>
                                                    <input type="text" class="form-control CoderDetails" placeholder="Code" value="@coderCptcodes[0]" style="width:17px;" />
                                                    <input type="text" class="form-control CoderDetails" placeholder="Mod" value="@mod" />
                                                    <input type="text" class="form-control CoderDetails" placeholder="1" value="@coderCptcodes[2]" />
                                                    <input type="text" class="form-control CoderDetails" placeholder="Link All" value="@linkAll" />
                                                </div>
                                            </div>
                                            i = i + 1;
                                        }
                                    }
                                    <div class="form-group row">
                                        <label class="col-md-3 m-t-15 AlignControl">Provider Feedback</label>
                                        @{len = (!string.IsNullOrEmpty(Model.FirstOrDefault().ProviderFeedbackText) ? 10 : 20); }
                                        @{string ProviderFeedbackText = (Model.FirstOrDefault().ProviderFeedbackText?.Length > len) ? Model.FirstOrDefault().ProviderFeedbackText.Substring(0, len) + ".." : Model.FirstOrDefault().ProviderFeedbackText;}
                                        @{title = Model.FirstOrDefault().ProviderFeedbackText;}
                                        <div title="@title" class="col-md-3">
                                            @Html.DropDownListFor(Model => Model.FirstOrDefault().ProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), "--Select--", new { @class = "form-control CoderDetails ControlHeight" })
                                            @Html.ValidationMessageFor(Model => Model.FirstOrDefault().ProviderFeedbackID, null, new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            @*<div class="tab-pane" id="cliam2" role="tabpanel">
                                <div class="p-20" id="tabDiv2">
                                </div>
                            </div>
                            <div class="tab-pane" id="cliam3" role="tabpanel">
                                <div class="p-20" id="tabDiv3">
                                </div>
                            </div>
                            <div class="tab-pane" id="cliam4" role="tabpanel">
                                <div class="p-20" id="tabDiv4">
                                </div>
                            </div>*@
                        </div>
                    }
                    else
                    {
                        <div class="tab-pane" id="@string.Format("cliam{0}", tabIndex)" role="tabpanel">
                            <div class="p-20" id="@string.Format("tabDiv{0}", tabIndex)">
                                <partial name="_ReadyForPostingClaim" model=tabitem />
                            </div>
                        </div>
                    }
                    tabIndex = tabIndex + 1;
                }
            }
        </div>

        <!-- Tabs -->
        @*<div class="card">
                <div class="form-group row">
                    <label class="col-md-3 m-t-15">Provider</label>
                    <div class="col-md-3">
                        @Html.DropDownListFor(Model.FirstOrDefault() => Model.FirstOrDefault().ProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), new { @class = "form-control CoderDetails" })
                        @Html.ValidationMessageFor(Model.FirstOrDefault() => Model.FirstOrDefault().ProviderID, null, new { @class = "text-danger" })
                    </div>
                    <label class="col-md-3 m-t-15">Payor</label>
                    <div class="col-md-3">
                        @Html.DropDownListFor(Model.FirstOrDefault() => Model.FirstOrDefault().PayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), "--Select--", new { @class = "form-control CoderDetails" })
                        @Html.ValidationMessageFor(Model.FirstOrDefault() => Model.FirstOrDefault().PayorID, null, new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-md-3 m-t-15"> Provider Feedback</label>
                    <div class="col-md-3">
                        @Html.DropDownListFor(Model.FirstOrDefault() => Model.FirstOrDefault().ProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), "--Select--", new { @class = "form-control CoderDetails" })
                        @Html.ValidationMessageFor(Model.FirstOrDefault() => Model.FirstOrDefault().ProviderFeedbackID, null, new { @class = "text-danger" })
                    </div>
                    <label class="col-md-3 m-t-15">Note Title</label>
                    <div class="col-md-3">
                        @Html.TextAreaFor(Model.FirstOrDefault() => Model.FirstOrDefault().NoteTitle, new { @class = "form-control CoderDetails", @autocomplete = "off" })
                        @Html.ValidationMessageFor(Model.FirstOrDefault() => Model.FirstOrDefault().NoteTitle, null, new { @class = "text-danger" })
                    </div>
                </div>
                @{
                    int i = 1;
                    foreach (var item in Model.FirstOrDefault().Dx.Split(','))
                    {
                        <div class="form-group row">
                            @if (i == 1)
                            {
                                <label class="col-md-3 m-t-15">Dx</label>
                            }
                            else
                            {
                                <label class="col-md-3 m-t-15"></label>
                            }
                            <div class="col-md-3 input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="basic-addon1">@i</span>
                                </div>
                                <input class="form-control CoderDetails valid" type="text" value="@item">
                            </div>
                        </div>
                        i = i + 1;
                    }
                }

                @{
                    i = 1;
                    foreach (var item in Model.FirstOrDefault().CPTCode.Split('|'))
                    {
                        string[] coderCptcodes = item.Split("^");
                        string mod = coderCptcodes[1] == "null" ? "" : coderCptcodes[1];
                        string linkAll = coderCptcodes[3] == "null" ? "" : coderCptcodes[3];
                        <div class="form-group row">
                            @if (i == 1)
                            {
                                <label class="col-md-3 m-t-15">CPT</label>
                            }
                            else
                            {
                                <label class="col-md-3 m-t-15"></label>
                            }
                            <div class="col-md-3 lessWidth input-group" style="max-width:20% !important;">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="basic-addon1">@i</span>
                                </div>
                                <input type="text" class="form-control CoderDetails" placeholder="Code" value="@coderCptcodes[0]" style="width:17px;" />
                                <input type="text" class="form-control CoderDetails" placeholder="Mod" value="@mod" />
                                <input type="text" class="form-control CoderDetails" placeholder="1" value="@coderCptcodes[2]" />
                                <input type="text" class="form-control CoderDetails" placeholder="Link All" value="@linkAll" />
                            </div>
                        </div>
                        i = i + 1;
                    }
                }
            </div>*@
    </div>

    <div class="border-top">
        <div class="card-body" style="text-align:right">
            <button type="submit" onclick="PostRecord()" class="btn btn-success Approved">Posting Completed</button>
            <button id="postingSubmitAndGetNext" name="postingSubmitAndGetNext" type="submit" value="postingSubmitAndGetNext" class="btn btn-success Approved">Post And GetNext</button>
            <a href="@Url.Action("CodingSummary","UAB")" class="btn btn-danger Approved">Close</a>
        </div>
    </div>
</div>

<script src="~/dashboardassets/libs/jquery/dist/jquery.min.js"></script>
<script src="~/dashboardassets/libs/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.11/jquery.validate.unobtrusive.min.js" type="text/javascript"></script>
<script src="~/dashboardassets/extra-libs/DataTables/datatables.js"></script>
<script type="text/javascript">
    $(document).ready(function () {

    }
</script>