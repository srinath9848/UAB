@model UAB.DTO.ChartSummaryDTO
@using UAB.enums
<br />
<div class="form-group row">
    <label class="col-md-3 m-t-15 AlignControl">Provider</label>
    @{int len = (!string.IsNullOrEmpty(Model.ProviderText) ? 10 : 20); }
    @{string ProviderText = (Model.ProviderText?.Length > len) ? Model.ProviderText.Substring(0, len) + ".." : Model.ProviderText;}
    @{string title = Model.ProviderText;}
    <div title="@title" class="col-md-3" style="display:inherit;">
        @if (@Model.ProviderID != 0)
        {
            @Html.DropDownListFor(model => model.ProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @class = "form-control CoderDetails ControlHeight", @style = "pointer-events:none;background-color:#e9ecef" })
        }
        else
        {
            @Html.DropDownListFor(model => model.ProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @class = "form-control CoderDetails ControlHeight" })
        }

        @Html.ValidationMessageFor(model => model.ProviderID, null, new { @class = "text-danger" })
    </div>
</div>
@if (Model.ProjectTypename.ToUpper() != "IP")
{
    <div class="form-group row">
        <label class="col-md-3 m-t-15 AlignControl">BillingProvider</label>
        @{ len = (!string.IsNullOrEmpty(Model.BillingProviderText) ? 10 : 20); }
        @{string BillingProviderText = (Model.BillingProviderText?.Length > len) ? Model.BillingProviderText.Substring(0, len) + ".." : Model.BillingProviderText;}
        @{ title = Model.BillingProviderText;}
        <div title="@title" class="col-md-3" style="display:inherit;">
            @if (@Model.BillingProviderID != 0)
            {
                @Html.DropDownListFor(model => model.BillingProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @class = "form-control CoderDetails ControlHeight", @style = "pointer-events:none;background-color:#e9ecef" })
            }
            else
            {
                @Html.DropDownListFor(model => model.BillingProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @class = "form-control CoderDetails ControlHeight" })
            }

            @Html.ValidationMessageFor(model => model.BillingProviderID, null, new { @class = "text-danger" })
        </div>
    </div>
}
<div class="form-group row">
    <label class="col-md-3 m-t-15 AlignControl">Payor</label>
    @{len = (!string.IsNullOrEmpty(Model.PayorText) ? 10 : 20); }
    @{string PayorText = (Model.PayorText?.Length > len) ? Model.PayorText.Substring(0, len) + ".." : Model.PayorText;}
    @{title = Model.PayorText;}
    <div title="@title" class="col-md-3" style="display:inherit;">
        @Html.DropDownListFor(model => model.PayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), "--Select--", new { @class = "form-control CoderDetails ControlHeight" })
        @Html.ValidationMessageFor(model => model.PayorID, null, new { @class = "text-danger" })
    </div>
</div>
<div class="form-group row">
    <label class="col-md-3 m-t-15 AlignControl">Note Title</label>
    <div title="@Model.NoteTitle" class="col-md-3">
        @Html.TextBoxFor(model => model.NoteTitle, new { @class = "form-control CoderDetails ControlHeight", @autocomplete = "off" })
        @Html.ValidationMessageFor(model => model.NoteTitle, null, new { @class = "text-danger" })
    </div>
</div>
<!--<div id="DivDx">
<div class="form-group row" id="DivDxRow_1">
    <label class="col-md-3 m-t-15 AlignControl">Dx</label>
    <div class="col-md-3 input-group">
        <div class="input-group-prepend ControlHeight">
            <span class="input-group-text dxindex" id="basic-addon1">1</span>
        </div>
        @Html.TextBoxFor(model => model.Dx, new { @class = "form-control CoderDetails txtDx ControlHeight", @autocomplete = "off", @id = "txtDx_1", @placeholder = "Code", @onfocusout = "DxFunction('txtDx_1')" })
        @Html.ValidationMessageFor(model => model.Dx, null, new { @class = "text-danger Dxerror" })-->
@*<button type="button" class="btn btn-sm" onclick="DeleteDxCodes('DivDxRow_1')"><i class="fa fa-times"></i></button>*@
<!--</div>
    </div>
</div>
<div id="DivCpt">
    <div class="form-group row" id="DivCptRow_1">
        <label class="col-md-3 m-t-15 AlignControl">CPT</label>
        <div class="col-md-3 CptlessWidth input-group">
            <div class="input-group-prepend ControlHeight">
                <span class="input-group-text cptindex" id="basic-addon1">1</span>
            </div>
            @Html.TextBoxFor(model => model.CPTCode, new { @class = "form-control CoderDetails txtCpt ControlHeight", @autocomplete = "off", @placeholder = "Code", @id = "txtCpt_1", @tabindex = "5" })
            <input type="text" class="form-control CoderDetails txtMod" id="txtMod_1" autocomplete="off" placeholder="Mod" tabindex="6" />
            <input type="text" id="txtQty_1" class="form-control CoderDetails txtQty" autocomplete="off" placeholder="1" value="1" tabindex="7" />
            <input type="text" id="txtLinks_1" onfocusout="CptFunction('txtLinks_1')" class="form-control CoderDetails txtLinks" autocomplete="off" placeholder="Link All" tabindex="8" />
            @Html.ValidationMessageFor(model => model.CPTCode, null, new { @class = "text-danger Dxerror" })-->
@*<button type="button" class="btn btn-sm" onclick="DeleteCptCodes('txtLinks_1')"><i class="fa fa-times"></i></button>*@
<!--</div>
    </div>
</div>-->
@{
    int i = 1;
    foreach (var item in Model.Dx.Split(','))
    {
        <div class="form-group row">
            @if (i == 1)
            {
                <label class="col-md-3 m-t-15 AlignControl">Dx</label>
            }
            else
            {
                <label class="col-md-3 m-t-15 AlignControl"></label>
            }
            <div title="@item" class="col-md-3 input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="basic-addon1">@i</span>
                </div>
                <input class="form-control CoderDetails valid" type="text" value="@item">
            </div>
        </div>
        i = i + 1;
    }
}

@{
    i = 1;
    foreach (var item in Model.CPTCode.Split('|'))
    {
        string[] coderCptcodes = item.Split("^");
        string cptVal = coderCptcodes[0] == "NA" ? "" : coderCptcodes[0];
        string mod = "";
        string linkAll = "";
        string qtyVal = "";
        string links = "";
        if (coderCptcodes[0] == "NA")
        {
            cptVal = coderCptcodes[0] == "null" ? "" : coderCptcodes[0];
            mod = coderCptcodes[1] == "null" ? "" : coderCptcodes[1];
            qtyVal = coderCptcodes[2] == "null" ? "" : coderCptcodes[2];
            linkAll = coderCptcodes[3] == "null" ? "" : coderCptcodes[3];
        }
        if (cptVal != "")
        {
            mod = coderCptcodes[1] == "null" ? "" : coderCptcodes[1];
            qtyVal = coderCptcodes[2] == "null" ? "" : coderCptcodes[2];
            linkAll = coderCptcodes[3] == "null" ? "" : coderCptcodes[3];
            links = !string.IsNullOrEmpty(@linkAll) || @linkAll != "" ? @linkAll : "Link All";
        }
        <div class="form-group row">
            @if (i == 1)
            {
                <label class="col-md-3 m-t-15 AlignControl">CPT</label>
            }
            else
            {
                <label class="col-md-3 m-t-15 AlignControl"></label>
            }
            <div title="Code : @cptVal, Mod : @mod, Quantity : @qtyVal, Links : @links" class="col-md-3 lessWidth input-group" style="max-width:20% !important;">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="basic-addon1">@i</span>
                </div>
                <input type="text" class="form-control CoderDetails" placeholder="Code" value="@cptVal" style="width:17px;" />
                <input type="text" class="form-control CoderDetails" placeholder="Mod" value="@mod" />
                <input type="text" class="form-control CoderDetails" placeholder="Qty" value="@qtyVal" />
                <input type="text" class="form-control CoderDetails" placeholder="Link All" value="@linkAll" />
            </div>
        </div>
        i = i + 1;
    }
}
<div class="form-group row">
    <label class="col-md-3 m-t-15 AlignControl">Provider Feedback</label>
    @{len = (!string.IsNullOrEmpty(Model.ProviderFeedbackText) ? 10 : 20); }
    @{string ProviderFeedbackText = (Model.ProviderFeedbackText?.Length > len) ? Model.ProviderFeedbackText.Substring(0, len) + ".." : Model.ProviderFeedbackText;}
    @{title = Model.ProviderFeedbackText;}
    <div title="@title" class="col-md-3">
        @if (ProviderFeedbackText != null)
        {
            @Html.DropDownListFor(model => model.ProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), ProviderFeedbackText, new { @class = "form-control CoderDetails ControlHeight" })
        }
        else
        {
            @Html.DropDownListFor(model => model.ProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), "--Select--", new { @class = "form-control CoderDetails ControlHeight" })
        }
        @Html.ValidationMessageFor(model => model.ProviderFeedbackID, null, new { @class = "text-danger" })
    </div>
</div>