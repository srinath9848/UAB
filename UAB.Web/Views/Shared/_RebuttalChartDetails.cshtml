@model UAB.DTO.ChartSummaryDTO
<div class="col-md-12">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">
                <span>Chart ID : <label style="color: black;">@Model.CodingDTO.ClinicalCaseID&nbsp;&nbsp;&nbsp;&nbsp;</label></span>
                @if (Model.CodedBy != null)
                {
                    <span>Coded by : <label style="color: black;">@Model.CodedBy&nbsp;&nbsp;&nbsp;&nbsp;</label></span>
                }
                @if (Model.QABy != null)
                {
                    <span>
                        QA by : <label style="color:black;"> @Model.QABy &nbsp;&nbsp;&nbsp;&nbsp;</label>
                    </span>
                }
                @if (Model.ShadowQABy != null)
                {
                    <span>
                        ShadowQA by : <label style="color:black;"> @Model.ShadowQABy </label>
                    </span>
                }

            </h4>
        </div>
        @Html.HiddenFor(model => model.CodingDTO.ClinicalCaseID, new { @class = "form-control" })
        @Html.HiddenFor(model => model.ProjectID)
        @Html.HiddenFor(model => model.ProjectName)
        @Html.HiddenFor(model => model.Dx)
        @Html.HiddenFor(model => model.CPTCode)
        @Html.Hidden("hdnPayorID")
        @Html.Hidden("hdnProviderID")
        @Html.Hidden("hdnCpt")
        @Html.Hidden("hdnMod")
        @Html.Hidden("hdnDx")
        @Html.Hidden("hdnProviderFeedbackID")

        @Html.Hidden("hdnPayorIDReject")
        @Html.Hidden("hdnProviderIDReject")
        @Html.Hidden("hdnCptReject")
        @Html.Hidden("hdnModReject")
        @Html.Hidden("hdnDxReject")
        @Html.Hidden("hdnProviderFeedbackIDReject")

        <div class="form-group row">
            <label class="col-md-3 m-t-15"></label>
            <div class="custom-control custom-checkbox mr-sm-2" id="divChkAll">
                <input type="checkbox" class="custom-control-input ShadowQADetails" id="chkAll">
                <label class="custom-control-label" for="chkAll">Accept All</label>
            </div>
            <label class="col-md-1 m-t-15"></label>
            <div class="custom-control mr-sm-2 QACorrectionsComments" style="display:none" ;>
                <label class="">QA Corrections</label>
            </div>
            <label class="col-md-1 m-t-15"></label>
            <div class="custom-control mr-sm-2 QACorrectionsComments" style="display:none" ;>
                <label class="">QA Comments</label>
            </div>
        </div>
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15">Payor</label>
            <div class="col-md-3 lessWidth input-group">
                @{string Accepted = (string.IsNullOrEmpty(Model.QAPayorRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                @{string Rejected = (string.IsNullOrEmpty(Model.QAPayorRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}


                @Html.DropDownListFor(model => model.PayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), new { @class = "form-control CoderDetails" })
                <div class="input-group-append QACorrections">
                    <span class="input-group-text">
                        &nbsp;<i id="PayorID" class="@Accepted" aria-hidden="true"></i>
                        &nbsp;<i id="PayorID" class="@Rejected" aria-hidden="true"></i>
                    </span>
                </div>
            </div>
            <div class="col-md-3 lessWidth input-group">
                @Html.DropDownListFor(model => model.QAPayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), "--Select--", new { @id = "PayorID1", @class = "form-control QARevised", @style = (Model.QAPayorID == 0 ? "display:none" : "display:flex") })
                @Html.ValidationMessageFor(model => model.QAPayorID, null, new { @class = "text-danger errMsg" })
            </div>
            @{string Show = (string.IsNullOrEmpty(Model.QAPayorRemarks) ? "display:none" : "display:flex");}
            <div class="col-md-3 lessWidth input-group">
                @Html.TextBoxFor(model => model.QAPayorRemarks, new { @title = Model.QAPayorRemarks, @style = Show, @class = "form-control QARevised", @id = "PayorID2" })
                @Html.ValidationMessageFor(model => model.QAPayorRemarks, null, new { @class = "text-danger errMsg" })
            </div>
            <div class="input-group-append CoderCorrections" style="@Show">
                <span class="input-group-text">
                    &nbsp;<i id="Payor" title="PayorID1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                    &nbsp;<i id="Payor" title="PayorID1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                </span>
            </div>
            <div class="col-md-3 input-group CoderCorrections" style="@Show">
                @Html.TextBoxFor(model => model.RevisedPayorRemarks, new { @class = "form-control", @id = "RevisedPayorRemarks" })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15">Provider</label>
            <div class="col-md-3 lessWidth input-group">
                @{ Accepted = (string.IsNullOrEmpty(Model.QAProviderRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                @{ Rejected = (string.IsNullOrEmpty(Model.QAProviderRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

                @Html.DropDownListFor(model => model.ProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), new { @class = "form-control CoderDetails" })
                <div class="input-group-append QACorrections">
                    <span class="input-group-text">
                        &nbsp;<i id="ProviderID" class="@Accepted" aria-hidden="true"></i>
                        &nbsp;<i id="ProviderID" class="@Rejected" aria-hidden="true"></i>
                    </span>
                </div>
            </div>
            <div class="col-md-3 lessWidth input-group">
                @Html.DropDownListFor(model => model.QAProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @id = "ProviderID1", @class = "form-control QARevised", @style = (Model.QAProviderID == 0 ? "display:none" : "display:flex") })
                @Html.ValidationMessageFor(model => model.QAProviderID, null, new { @class = "text-danger errMsg" })
            </div>
            @{Show = (string.IsNullOrEmpty(Model.QAProviderRemarks) ? "display:none" : "display:flex");}
            <div class="col-md-3 lessWidth input-group">
                @Html.TextBoxFor(model => model.QAProviderRemarks, new { @title = Model.QAProviderRemarks, @style = Show, @class = "form-control QARevised", @id = "ProviderID2" })
                @Html.ValidationMessageFor(model => model.QAProviderRemarks, null, new { @class = "text-danger errMsg" })
            </div>
            <div class="input-group-append CoderCorrections" style="@Show">
                <span class="input-group-text">
                    &nbsp;<i id="Provider" title="ProviderID1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                    &nbsp;<i id="Provider" title="ProviderID1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                </span>
            </div>
            <div class="col-md-3 input-group CoderCorrections" style="@Show">
                @Html.TextBoxFor(model => model.RevisedProviderRemarks, new { @class = "form-control", @id = "RevisedProviderRemarks" })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15">Note Title</label>
            <div class="col-md-3 lessWidth">
                @Html.TextAreaFor(model => model.NoteTitle, new { @class = "form-control CoderDetails" })
            </div>
        </div>
        <div id="DivDx">
            @{
                int i = 0;
                int j = 1;
                int totalDxCount = Model.Dx.Split(",").Count() + 1;
                foreach (var item in Model.Dx.Split(","))
                {
                    <div class="form-group row">
                        @if (i == 0)
                        {
                            <label class="col-md-3 lessWidth m-t-15">Dx</label>
                        }
                        else
                        {
                            <label class="col-md-3 lessWidth m-t-15"></label>
                        }
                        <div class="col-md-3 lessWidth input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="basic-addon1">@j</span>
                            </div>
                            <input class="form-control CoderDetails valid" type="text" value="@item">
                        </div>
                        <div class="col-md-3 lessWidth input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="basic-addon1">@j</span>
                            </div>
                            <input type="text" id="txtDx_@j" class="form-control txtDx" autocomplete="off" tabindex="@j" placeholder="Code" value="@item" />
                        </div>
                        <div class="input-group-append CoderCorrections">
                            <span class="input-group-text">
                                &nbsp;<i id="Dx_@i" title="Dx_@i" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                                &nbsp;<i id="Dx_@i" title="Dx_@i" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                            </span>
                        </div>
                        <div class="col-md-3 lessWidth input-group Dx_@i" style="display:none">
                            <input type="text" id="Dx_@i" class="form-control QARevised" />
                        </div>
                    </div>

                    i = i + 1;
                    j = j + 1;
                }
            }

            <div class="form-group row">
                <label class="col-md-3 lessWidth m-t-15"></label>
                <div class="col-md-3 lessWidth input-group">
                </div>
                <div class="col-md-3 lessWidth input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="basic-addon1">@totalDxCount</span>
                    </div>
                    <input type="text" id="txtDx_@totalDxCount" onfocusout="DxFunction('txtDx_@totalDxCount')" class="form-control txtDx" tabindex="@totalDxCount" autofocus="autofocus" autocomplete="off" placeholder="Code" />
                </div>
            </div>
        </div>
        <div id="DivCpt">
            @{
                i = 0;
                j = 1;
                int totalCptCount = Model.CPTCode.Split(",").Count() + 1;
                foreach (var item in Model.CPTCode.Split(","))
                {
                    string[] cptcodes = item.Split("^");

                    <div class="form-group row">
                        @if (i == 0)
                        {
                            <label class="col-md-3 lessWidth m-t-15">CPT</label>
                        }
                        else
                        {
                            <label class="col-md-3 lessWidth m-t-15"></label>
                        }

                        <div class="col-md-3 CptlessWidth input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="basic-addon1">@j</span>
                            </div>
                            <input type="text" class="form-control CoderDetails" id="txtCpt_@i" title="txtCpt_@i" autocomplete="off" placeholder="Code" value="@cptcodes[0]" />
                            <input type="text" class="form-control CoderDetails" id="txtMod_@i" title="txtMod_@i" autocomplete="off" placeholder="Mod" value="@cptcodes[1]" />
                            <input type="text" id="txtQty_@i" title="txtQty_@i" class="form-control CoderDetails" autocomplete="off" placeholder="1" value="@cptcodes[2]" />
                            <input type="text" id="txtLinks_@i" title="txtLinks_@i" class="form-control CoderDetails" autocomplete="off" placeholder="Link All" value="@cptcodes[3]" />
                        </div>

                        <div class="col-md-3 CptlessWidth input-group" id="DivCpt">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="basic-addon1">@j</span>
                            </div>
                            <input type="text" class="form-control" id="txtCpt_@j" title="txtCpt_@j" autocomplete="off" placeholder="Code" value="@cptcodes[0]" />
                            <input type="text" class="form-control" id="txtMod_@j" title="txtMod_@j" autocomplete="off" placeholder="Mod" value="@cptcodes[1]" />
                            <input type="text" id="txtQty_@j" title="txtQty_@j" class="form-control" autocomplete="off" placeholder="1" value="@cptcodes[2]" />
                            @if (i + 1 == totalCptCount)
                            {
                                <input type="text" id="txtLinks_@j" title="txtLinks_@j" onfocusout="CptFunction('txtLinks_@j +')" class="form-control" autocomplete="off" placeholder="Link All" value="@cptcodes[3]" />
                            }
                            else
                            {
                                <input type="text" id="txtLinks_@j" title="txtLinks_@j" class="form-control" autocomplete="off" placeholder="Link All" value="@cptcodes[3]" />
                            }
                        </div>
                        <div class="input-group-append CoderCorrections">
                            <span class="input-group-text">
                                &nbsp;<i id="Cpt_@i" title="Cpt_@i" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                                &nbsp;<i id="Cpt_@i" title="Cpt_@i" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                            </span>
                        </div>
                        <div class="col-md-3 lessWidth input-group Cpt_@i" style="display:none">
                            <input type="text" id="Cpt_@i" class="form-control QARevised" />
                        </div>
                    </div>
                    i = i + 1;
                    j = j + 1;
                }
            }
            <div class="form-group row">
                <label class="col-md-3 lessWidth m-t-15"></label>
                <div class="col-md-3 CptlessWidth input-group">
                </div>
                <div class="col-md-3 CptlessWidth input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="basic-addon1">@totalCptCount</span>
                    </div>
                    <input type="text" class="form-control" id="txtCpt_@totalCptCount" title="txtCpt_@totalCptCount" autofocus="autofocus" autocomplete="off" placeholder="Code" />
                    <input type="text" class="form-control" id="txtMod_@totalCptCount" title="txtMod_@totalCptCount" autocomplete="off" placeholder="Mod" />
                    <input type="text" id="txtQty_@totalCptCount" title="txtQty_@totalCptCount" class="form-control" autocomplete="off" placeholder="1" />
                    <input type="text" id="txtLinks_@totalCptCount" title="txtLinks_@totalCptCount" onfocusout="CptFunction('txtLinks_@totalCptCount+')" class="form-control" autocomplete="off" placeholder="Link All" />
                </div>
            </div>
        </div>

        @*<div class="form-group row">
                <label class="col-md-3 lessWidth m-t-15">CPT</label>
                <div class="col-md-3 lessWidth input-group">
                    @{ Accepted = (string.IsNullOrEmpty(Model.QACPTCodeRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                    @{ Rejected = (string.IsNullOrEmpty(Model.QACPTCodeRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

                    @Html.TextAreaFor(model => model.CPTCode, new { @class = "form-control CoderDetails" })
                    <div class="input-group-append QACorrections">
                        <span class="input-group-text">
                            &nbsp;<i id="CPTCode" class="@Accepted" aria-hidden="true"></i>
                            &nbsp;<i id="CPTCode" class="@Rejected" aria-hidden="true"></i>
                        </span>
                    </div>
                </div>
                @{Show = (string.IsNullOrEmpty(Model.QACPTCodeRemarks) ? "display:none" : "display:flex");}
                <div class="col-md-3 lessWidth input-group">
                    @Html.TextAreaFor(model => model.QACPTCode, new { @title = Model.QACPTCode, @style = Show, @id = "CPTCode1", @class = "form-control QARevised" })
                    @Html.ValidationMessageFor(model => model.QACPTCode, null, new { @class = "text-danger errMsg" })
                </div>
                <div class="col-md-3 lessWidth input-group">
                    @Html.TextBoxFor(model => model.QACPTCodeRemarks, new { @title = Model.QACPTCodeRemarks, @style = Show, @class = "form-control QARevised", @id = "CPTCode2" })
                    @Html.ValidationMessageFor(model => model.QACPTCodeRemarks, null, new { @class = "text-danger errMsg" })
                </div>
                <div class="input-group-append CoderCorrections" style="@Show">
                    <span class="input-group-text">
                        &nbsp;<i id="CPT" title="CPTCode1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                        &nbsp;<i id="CPT" title="CPTCode1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                    </span>
                </div>
                <div class="col-md-3 input-group CoderCorrections" style="@Show">
                    @Html.TextBoxFor(model => model.RevisedCPTRemarks, new { @style = Show, @class = "form-control", @id = "RevisedCPTRemarks" })
                </div>
            </div>
            <div class="form-group row">
                <label class="col-md-3 lessWidth m-t-15">Mod</label>
                <div class="col-md-3 lessWidth input-group">
                    @{ Accepted = (string.IsNullOrEmpty(Model.QAModRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                    @{ Rejected = (string.IsNullOrEmpty(Model.QAModRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

                    @Html.TextAreaFor(model => model.Mod, new { @class = "form-control CoderDetails" })
                    <span class="input-group-text QACorrections">
                        &nbsp;<i id="Mod" class="@Accepted" aria-hidden="true"></i>
                        &nbsp;<i id="Mod" class="@Rejected" aria-hidden="true"></i>
                    </span>
                </div>
                @{Show = (string.IsNullOrEmpty(Model.QAModRemarks) ? "display:none" : "display:flex");}
                <div class="col-md-3 lessWidth input-group">
                    @Html.TextAreaFor(model => model.QAMod, new { @title = Model.QAMod, @style = Show, @class = "form-control QARevised", @id = "Mod1" })
                    @Html.ValidationMessageFor(model => model.QAMod, null, new { @class = "text-danger errMsg" })
                </div>
                <div class="col-md-3 lessWidth input-group">
                    @Html.TextBoxFor(model => model.QAModRemarks, new { @title = Model.QAModRemarks, @style = Show, @class = "form-control QARevised", @id = "Mod2" })
                    @Html.ValidationMessageFor(model => model.QAModRemarks, null, new { @class = "text-danger errMsg" })
                </div>
                <div class="input-group-append CoderCorrections" style="@Show">
                    <span class="input-group-text">
                        &nbsp;<i id="Mod" title="Mod1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                        &nbsp;<i id="Mod" title="Mod1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                    </span>
                </div>
                <div class="col-md-3 input-group CoderCorrections" style="@Show">
                    @Html.TextBoxFor(model => model.RevisedModRemarks, new { @class = "form-control", @id = "RevisedModRemarks" })
                </div>
            </div>
            <div class="form-group row">
                <label class="col-md-3 lessWidth m-t-15">Dx</label>
                <div class="col-md-3 lessWidth input-group">
                    @{ Accepted = (string.IsNullOrEmpty(Model.QADxRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                    @{ Rejected = (string.IsNullOrEmpty(Model.QADxRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

                    @Html.TextAreaFor(model => model.Dx, new { @class = "form-control CoderDetails" })
                    <span class="input-group-text QACorrections">
                        &nbsp;<i id="Dx" class="@Accepted" aria-hidden="true"></i>
                        &nbsp;<i id="Dx" class="@Rejected" aria-hidden="true"></i>
                    </span>
                </div>
                @{Show = (string.IsNullOrEmpty(Model.QADxRemarks) ? "display:none" : "display:flex");}
                <div class="col-md-3 lessWidth input-group">
                    @Html.TextAreaFor(model => model.QADx, new { @title = Model.QADx, @style = Show, @id = "Dx1", @class = "form-control QARevised" })
                    @Html.ValidationMessageFor(model => model.QADx, null, new { @class = "text-danger errMsg" })
                </div>
                <div class="col-md-3 lessWidth input-group">
                    @Html.TextBoxFor(model => model.QADxRemarks, new { @title = Model.QADxRemarks, @style = Show, @class = "form-control QARevised", @id = "Dx2" })
                    @Html.ValidationMessageFor(model => model.QADxRemarks, null, new { @class = "text-danger errMsg" })
                </div>
                <div class="input-group-append CoderCorrections" style="@Show">
                    <span class="input-group-text">
                        &nbsp;<i id="DX" title="Dx1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                        &nbsp;<i id="DX" title="Dx1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                    </span>
                </div>
                <div class="col-md-3 input-group CoderCorrections" style="@Show">
                    @Html.TextBoxFor(model => model.RevisedDXRemarks, new { @class = "form-control", @id = "RevisedDXRemarks" })
                </div>
            </div>
            <div class="form-group row">
                <label class="col-md-3 lessWidth m-t-15"> Feedback to Provider</label>
                <div class="col-md-3 lessWidth input-group">
                    @{ Accepted = (string.IsNullOrEmpty(Model.QAProviderFeedbackRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                    @{ Rejected = (string.IsNullOrEmpty(Model.QAProviderFeedbackRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

                    @Html.DropDownListFor(model => model.ProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), new { @class = "form-control CoderDetails" })
                    <div class="input-group-append" style="height: 38px;">
                        <span class="input-group-text QACorrections">
                            &nbsp;<i id="Feedback" class="@Accepted" aria-hidden="true"></i>
                            &nbsp;<i id="Feedback" class="@Rejected" aria-hidden="true"></i>
                        </span>
                    </div>
                </div>
                @{Show = (string.IsNullOrEmpty(Model.QAProviderFeedbackRemarks) ? "display:none" : "display:flex");}
                <div class="col-md-3 lessWidth input-group">
                    @Html.DropDownListFor(model => model.QAProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), "--Select--", new { @style = Show, @class = "form-control QARevised", @id = "Feedback1" })
                    @Html.ValidationMessageFor(model => model.QAProviderFeedbackID, null, new { @class = "text-danger errMsg" })
                </div>
                <div class="col-md-3 lessWidth input-group">
                    @Html.TextBoxFor(model => model.QAProviderFeedbackRemarks, new { @title = Model.QAProviderFeedbackRemarks, @style = Show, @class = "form-control QARevised", @id = "Feedback2" })
                    @Html.ValidationMessageFor(model => model.QAProviderFeedbackRemarks, null, new { @class = "text-danger errMsg" })
                </div>
                <div class="input-group-append CoderCorrections" style="@Show">
                    <span class="input-group-text">
                        &nbsp;<i id="ProviderFeedback" title="Feedback1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                        &nbsp;<i id="ProviderFeedback" title="Feedback1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                    </span>
                </div>
                <div class="col-md-3 input-group CoderCorrections" style="@Show">
                    @Html.TextBoxFor(model => model.RevisedProviderFeedbackRemarks, new { @style = Show, @class = "form-control", @id = "RevisedProviderFeedbackRemarks" })
                </div>
            </div>*@
    </div>

    <div class="clearfix"></div>
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">QA Details</h4>
        </div>
        <div class="card-body">
            <div class="col-12">
                <div class="row mb-3">
                    <div class="col-lg-6">
                        <div class="form-group row">
                            <label class="col-md-3 m-t-15">
                                Error Type
                            </label>
                            <div class="col-md-7">
                                @Html.DropDownListFor(model => model.QADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), "--Select--", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.QADTO.ErrorType, null, new { @class = "text-danger ErrorType" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group row">
                            <label class="col-md-5 m-t-15"></label>
                            <div class="col-md-7">
                                <button id="btnsubmit" type="submit" class="btn btn-success">Save</button>
                                <button id="SubmitAndGetNext" name="SubmitAndGetNext" type="submit" value="SubmitAndGetNext" class="btn btn-success Available">Save And GetNext</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<style>
    .errMsg {
        font-weight: bold;
        font-size: 20px;
    }

    #sortable-1 {
        list-style-type: none;
        margin: 0;
        padding: 0;
        width: 25%;
    }

    /*     #sortable-1 li {
                    margin: 0 3px 3px 3px;
                    padding: 0.4em;
                    padding-left: 1.5em;
                    font-size: 17px;
                    height: 16px;
                }*/

    .default {
        background: #cedc98;
        border: 1px solid #DDDDDD;
        color: #333333;
    }

    .custom-control-label:before {
        left: -35px;
    }

    .custom-control-label:after {
        left: -35px;
    }

    .custom-control {
        padding-left: 0rem;
    }

    div.CptlessWidth {
        max-width: 25% !important;
    }
</style>
<script src="~/dashboardassets/libs/jquery/dist/jquery.min.js"></script>
<script type="text/javascript">
    $("#PayorID1").attr('title', $("#PayorID1 option:selected").text());
    $("#ProviderID").attr('title', $("#ProviderID option:selected").text());
    $("#ProviderFeedbackID").attr('title', $("#ProviderFeedbackID option:selected").text());
</script>
