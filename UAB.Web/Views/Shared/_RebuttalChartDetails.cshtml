@model UAB.DTO.ChartSummaryDTO
@using UAB.enums
<div class="col-md-12">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">
                <span>Chart ID : <label style="color: black;">@Model.CodingDTO.ClinicalCaseID&nbsp;&nbsp;&nbsp;&nbsp;</label></span>
                @if (Model.CodedBy != null)
                {
                    <span>Coded by : <label style="color: black;">@Model.CodedBy&nbsp;&nbsp;&nbsp;&nbsp;</label></span>
                }
                @if (Model.QABy != null)
                {
                    <span>
                        QA by : <label style="color:black;"> @Model.QABy &nbsp;&nbsp;&nbsp;&nbsp;</label>
                    </span>
                }
                @if (Model.ShadowQABy != null)
                {
                    <span>
                        ShadowQA by : <label style="color:black;"> @Model.ShadowQABy </label>
                    </span>
                }

            </h4>
        </div>
        @Html.HiddenFor(model => model.CodingDTO.ClinicalCaseID, new { @class = "form-control" })
        @Html.HiddenFor(model => model.ProjectID)
        @Html.HiddenFor(model => model.ProjectName)
        @Html.HiddenFor(model => model.Dx)
        @Html.HiddenFor(model => model.CPTCode)
        @Html.Hidden("hdnPayorID")
        @Html.Hidden("hdnProviderID")
        @Html.Hidden("hdnCpt")
        @Html.Hidden("hdnMod")
        @Html.Hidden("hdnDx")
        @Html.Hidden("hdnProviderFeedbackID")

        @Html.Hidden("hdnPayorIDReject")
        @Html.Hidden("hdnProviderIDReject")
        @Html.Hidden("hdnCptReject")
        @Html.Hidden("hdnModReject")
        @Html.Hidden("hdnDxReject")
        @Html.Hidden("hdnProviderFeedbackIDReject")
        @Html.Hidden("hdnQADxRemarks")
        @Html.Hidden("hdnQADxCodes")
        @Html.Hidden("hdnQACptRemarks")
        @Html.Hidden("hdnQACptCodes")


        <div class="form-group row">
            <label class="col-md-3 m-t-15"></label>
            <div class="custom-control custom-checkbox mr-sm-2" id="divChkAll">
                <input type="checkbox" class="custom-control-input ShadowQADetails" id="chkAll">
                <label class="custom-control-label" for="chkAll">Accept All</label>
            </div>
            <label class="col-md-1 m-t-15"></label>
            <div class="custom-control mr-sm-2 QACorrectionsComments">
                <label class="">QA Corrections</label>
            </div>
            <label class="col-md-1 m-t-15"></label>
            <div class="custom-control mr-sm-2 QACorrectionsComments" style="display:none" ;>
                <label class="">QA Comments</label>
            </div>
        </div>
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15">Payor</label>
            <div class="col-md-3 lessWidth input-group">
                @{string Accepted = (string.IsNullOrEmpty(Model.QAPayorRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                @{string Rejected = (string.IsNullOrEmpty(Model.QAPayorRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

                @Html.DropDownListFor(model => model.PayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), new { @class = "form-control CoderDetails" })
                <div class="input-group-append QACorrections">
                    <span class="input-group-text">
                        &nbsp;<i id="PayorID" class="@Accepted" aria-hidden="true"></i>
                        &nbsp;<i id="PayorID" class="@Rejected" aria-hidden="true"></i>
                    </span>
                </div>
            </div>
            <div class="col-md-3 lessWidth input-group">
                @Html.DropDownListFor(model => model.QAPayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), "--Select--", new { @id = "PayorID1", @class = "form-control QARevised", @style = (Model.QAPayorID == 0 ? "display:none" : "display:flex") })
                @Html.ValidationMessageFor(model => model.QAPayorID, null, new { @class = "text-danger errMsg" })
            </div>
            @{string Show = (string.IsNullOrEmpty(Model.QAPayorRemarks) ? "display:none" : "display:flex");}
            <div class="col-md-3 lessWidth input-group">
                @Html.TextBoxFor(model => model.QAPayorRemarks, new { @title = Model.QAPayorRemarks, @style = Show, @class = "form-control QARevised", @id = "PayorID2" })
                @Html.ValidationMessageFor(model => model.QAPayorRemarks, null, new { @class = "text-danger errMsg" })
            </div>
            <div class="input-group-append CoderCorrections" style="@Show">
                <span class="input-group-text">
                    &nbsp;<i id="Payor" title="PayorID1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                    &nbsp;<i id="Payor" title="PayorID1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                </span>
            </div>
            <div class="col-md-3 input-group CoderCorrections" style="@Show">
                @Html.TextBoxFor(model => model.RevisedPayorRemarks, new { @class = "form-control", @id = "RevisedPayorRemarks" })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15">Provider</label>
            <div class="col-md-3 lessWidth input-group">
                @{ Accepted = (string.IsNullOrEmpty(Model.QAProviderRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                @{ Rejected = (string.IsNullOrEmpty(Model.QAProviderRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

                @Html.DropDownListFor(model => model.ProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), new { @class = "form-control CoderDetails" })
                <div class="input-group-append QACorrections">
                    <span class="input-group-text">
                        &nbsp;<i id="ProviderID" class="@Accepted" aria-hidden="true"></i>
                        &nbsp;<i id="ProviderID" class="@Rejected" aria-hidden="true"></i>
                    </span>
                </div>
            </div>
            <div class="col-md-3 lessWidth input-group">
                @Html.DropDownListFor(model => model.QAProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @id = "ProviderID1", @class = "form-control QARevised", @style = (Model.QAProviderID == 0 ? "display:none" : "display:flex") })
                @Html.ValidationMessageFor(model => model.QAProviderID, null, new { @class = "text-danger errMsg" })
            </div>
            @{Show = (string.IsNullOrEmpty(Model.QAProviderRemarks) ? "display:none" : "display:flex");}
            <div class="col-md-3 lessWidth input-group">
                @Html.TextBoxFor(model => model.QAProviderRemarks, new { @title = Model.QAProviderRemarks, @style = Show, @class = "form-control QARevised", @id = "ProviderID2" })
                @Html.ValidationMessageFor(model => model.QAProviderRemarks, null, new { @class = "text-danger errMsg" })
            </div>
            <div class="input-group-append CoderCorrections" style="@Show">
                <span class="input-group-text">
                    &nbsp;<i id="Provider" title="ProviderID1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                    &nbsp;<i id="Provider" title="ProviderID1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                </span>
            </div>
            <div class="col-md-3 input-group CoderCorrections" style="@Show">
                @Html.TextBoxFor(model => model.RevisedProviderRemarks, new { @class = "form-control", @id = "RevisedProviderRemarks" })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15"> Feedback to Provider</label>
            <div class="col-md-3 lessWidth input-group">
                @{ Accepted = (string.IsNullOrEmpty(Model.QAProviderFeedbackRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                @{ Rejected = (string.IsNullOrEmpty(Model.QAProviderFeedbackRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

                @Html.DropDownListFor(model => model.ProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), new { @class = "form-control CoderDetails" })
                <div class="input-group-append" style="height: 38px;">
                    <span class="input-group-text QACorrections">
                        &nbsp;<i id="Feedback" class="@Accepted" aria-hidden="true"></i>
                        &nbsp;<i id="Feedback" class="@Rejected" aria-hidden="true"></i>
                    </span>
                </div>
            </div>
            @{Show = (string.IsNullOrEmpty(Model.QAProviderFeedbackRemarks) ? "display:none" : "display:flex");}
            <div class="col-md-3 lessWidth input-group">
                @Html.DropDownListFor(model => model.QAProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), "--Select--", new { @style = Show, @class = "form-control QARevised", @id = "Feedback1" })
                @Html.ValidationMessageFor(model => model.QAProviderFeedbackID, null, new { @class = "text-danger errMsg" })
            </div>
            <div class="col-md-3 lessWidth input-group">
                @Html.TextBoxFor(model => model.QAProviderFeedbackRemarks, new { @title = Model.QAProviderFeedbackRemarks, @style = Show, @class = "form-control QARevised", @id = "Feedback2" })
                @Html.ValidationMessageFor(model => model.QAProviderFeedbackRemarks, null, new { @class = "text-danger errMsg" })
            </div>
            <div class="input-group-append CoderCorrections" style="@Show">
                <span class="input-group-text">
                    &nbsp;<i id="ProviderFeedback" title="Feedback1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                    &nbsp;<i id="ProviderFeedback" title="Feedback1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                </span>
            </div>
            <div class="col-md-3 input-group CoderCorrections" style="@Show">
                @Html.TextBoxFor(model => model.RevisedProviderFeedbackRemarks, new { @style = Show, @class = "form-control", @id = "RevisedProviderFeedbackRemarks" })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15">Note Title</label>
            <div class="col-md-3 lessWidth">
                @Html.TextAreaFor(model => model.NoteTitle, new { @class = "form-control CoderDetails" })
            </div>
        </div>
        <div id="DivDx">
            @{
                int i = 1;

                int totalDxCount = Model.Dx.Split(",").Count() + 1;
                foreach (var item in Model.Dx.Split(","))
                {
                    <div class="form-group row">
                        @if (i == 1)
                        {
                            <label class="col-md-3 lessWidth m-t-15">Dx</label>
                        }
                        else
                        {
                            <label class="col-md-3 lessWidth m-t-15"></label>
                        }
                        <div class="col-md-3 lessWidth input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="basic-addon1">@i</span>
                            </div>
                            <input class="form-control CoderDetails valid" type="text" value="@item">
                            <div class="input-group-append" style="height: 38px;">
                                <span class="input-group-text QACorrections">
                                    &nbsp;<i id="Dx_@i" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                                    &nbsp;<i id="Dx_@i" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                                </span>
                            </div>
                        </div>
                        <div class="col-md-3 lessWidth input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="basic-addon1">@i</span>
                            </div>
                            <input type="text" id="txtDx_@i" class="form-control txtDx" autocomplete="off" tabindex="@i" placeholder="Code" value="@item" />
                        </div>
                        <div class="col-md-3 lessWidth input-group">
                            <input type="text" id="DxRemarks_@i" class="form-control QARevised DxRemarks_@i Dx_@i" style="display:none" />
                        </div>
                    </div>

                    i = i + 1;
                }
            }

            <div class="form-group row">
                <label class="col-md-3 lessWidth m-t-15"></label>
                <div class="col-md-3 lessWidth input-group" style="visibility:hidden;">
                    <div class="input-group-append" style="height: 38px;">
                        <span class="input-group-text">
                            &nbsp;<i class="fa fa-edit fa-lg" aria-hidden="true"></i>
                            &nbsp;<i class="fa fa-edit fa-lg" aria-hidden="true"></i>
                        </span>
                    </div>
                </div>
                <div class="col-md-3 lessWidth input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="basic-addon1">@totalDxCount</span>
                    </div>
                    <input type="text" id="txtDx_@totalDxCount" onfocusout="DxFunction('txtDx_@totalDxCount')" class="form-control txtDx" tabindex="@totalDxCount" autofocus="autofocus" autocomplete="off" placeholder="Code" />
                </div>
            </div>
        </div>
        <div id="DivCpt">
            @{
                i = 1;
                int totalCptCount = Model.CPTCode.Split("|").Count() + 1;
                foreach (var item in Model.CPTCode.Split("|"))
                {
                    string[] cptCodes = item.Split("^");
                    string cptVal = cptCodes[0] == "NA" ? "" : cptCodes[0];
                    string modVal = cptCodes[1] == "null" ? "" : cptCodes[1];
                    string qtyVal = cptCodes[2];
                    string linkAllVal = cptCodes[3] == "null" ? "" : cptCodes[3];
                    <div class="form-group row" id="DivCptRow_@i">
                        @if (i == 1)
                        {
                            <label class="col-md-3 lessWidth m-t-15">CPT</label>
                        }
                        else
                        {
                            <label class="col-md-3 lessWidth m-t-15"></label>
                        }

                        <div class="col-md-3 CptlessWidth input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="basic-addon1">@i</span>
                            </div>
                            <input type="text" class="form-control CoderDetails" autocomplete="off" placeholder="Code" value="@cptVal" />
                            <input type="text" class="form-control CoderDetails" autocomplete="off" placeholder="Mod" value="@modVal" />
                            <input type="text" class="form-control CoderDetails" autocomplete="off" placeholder="1" value="@qtyVal" />
                            <input type="text" class="form-control CoderDetails" autocomplete="off" placeholder="Link All" value="@linkAllVal" />
                            <div class="input-group-append" style="height: 38px;">
                                <span class="input-group-text">
                                    &nbsp;<i id="Cpt_@i" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                                    &nbsp;<i id="Cpt_@i" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                                </span>
                            </div>
                        </div>
                        <div class="col-md-3 CptlessWidth input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="basic-addon1">@i</span>
                            </div>
                            <input type="text" class="form-control" id="txtCpt_@i" autocomplete="off" placeholder="Code" value="@cptVal" />
                            <input type="text" class="form-control" id="txtMod_@i" autocomplete="off" placeholder="Mod" value="@modVal" />
                            <input type="text" class="form-control" id="txtQty_@i" autocomplete="off" placeholder="1" value="@qtyVal" />
                            <input type="text" class="form-control" id="txtLinks_@i" autocomplete="off" placeholder="Link All" value="@linkAllVal" />
                        </div>

                        <div class="col-md-3 lessWidth input-group">
                            <input type="text" id="CptRemarks_@i" class="form-control QARevised CptRemarks_@i Cpt_@i" style="display:none" />
                        </div>
                    </div>
                    i = i + 1;
                }
            }
            <div class="form-group row">
                <label class="col-md-3 lessWidth m-t-15"></label>
                <div class="col-md-3 CptlessWidth input-group">
                </div>
                <div class="col-md-3 CptlessWidth input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="basic-addon1">@totalCptCount</span>
                    </div>
                    <input type="text" class="form-control" id="txtCpt_@totalCptCount" autofocus="autofocus" autocomplete="off" placeholder="Code" />
                    <input type="text" class="form-control" id="txtMod_@totalCptCount" autocomplete="off" placeholder="Mod" />
                    <input type="text" id="txtQty_@totalCptCount" class="form-control" autocomplete="off" placeholder="1" />
                    <input type="text" id="txtLinks_@totalCptCount" onfocusout="CptFunction('txtLinks_@totalCptCount+')" class="form-control" autocomplete="off" placeholder="Link All" />
                </div>
            </div>
        </div>
    </div>

    <div class="clearfix"></div>
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">QA Details</h4>
        </div>
        <div class="card-body">
            <div class="col-12">
                <div class="row mb-3">
                    <div class="col-lg-6">
                        <div class="form-group row">
                            <label class="col-md-3 m-t-15">
                                Error Type
                            </label>
                            <div class="col-md-7">
                                @Html.DropDownListFor(model => model.QADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), "--Select--", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.QADTO.ErrorType, null, new { @class = "text-danger ErrorType" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group row">
                            @*<label class="col-md-5 m-t-15"></label>*@
                            <div class="col-md-15">
                                <a href="@Url.Action("GetCodingBlockedCharts","UAB",new {Role=Roles.QA, ChartType= "Block", ProjectID=@Model.ProjectID, ProjectName=Model.ProjectName,ccid=Model.CodingDTO.ClinicalCaseID,plusorminus="Previous"})" class="btn btn-success Available" id="btnPrevious" style="display:none">Previous</a>
                                <a href="@Url.Action("GetCodingBlockedCharts","UAB",new {Role=Roles.QA, ChartType= "Block", ProjectID=@Model.ProjectID, ProjectName=Model.ProjectName,ccid=Model.CodingDTO.ClinicalCaseID,plusorminus="Next"})" class="btn btn-success Available" id="btnNext" style="display:none">Next</a>
                                <button id="btnBlock" type="button" class="btn btn-danger" onclick="Block()">Block</button>
                                <button id="btnBlockHistory" style="display:none" type="button" class="btn btn-danger" onclick="BlockHistory()">Block History</button>
                                <button id="btnsubmit" type="submit" class="btn btn-success">Save</button>
                                <button id="SubmitAndGetNext" name="SubmitAndGetNext" type="submit" value="SubmitAndGetNext" class="btn btn-success Available">Save And GetNext</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<style>
    .errMsg {
        font-weight: bold;
        font-size: 20px;
    }

    #sortable-1 {
        list-style-type: none;
        margin: 0;
        padding: 0;
        width: 25%;
    }

    /*     #sortable-1 li {
                    margin: 0 3px 3px 3px;
                    padding: 0.4em;
                    padding-left: 1.5em;
                    font-size: 17px;
                    height: 16px;
                }*/

    .default {
        background: #cedc98;
        border: 1px solid #DDDDDD;
        color: #333333;
    }

    .custom-control-label:before {
        left: -35px;
    }

    .custom-control-label:after {
        left: -35px;
    }

    .custom-control {
        padding-left: 0rem;
    }

    div.CptlessWidth {
        max-width: 25% !important;
    }
</style>
<script src="~/dashboardassets/libs/jquery/dist/jquery.min.js"></script>
<script type="text/javascript">
    $("#PayorID1").attr('title', $("#PayorID1 option:selected").text());
    $("#ProviderID").attr('title', $("#ProviderID option:selected").text());
    $("#ProviderFeedbackID").attr('title', $("#ProviderFeedbackID option:selected").text());

    $(document).ready(function () {
        Block = function () {
            $.ajax({
                type: "GET",
                url: "@Url.Action("BlockClinicalcase", "UAB")",
                data: {"ccid": @Model.CodingDTO.ClinicalCaseID},
                success: function (response) {
                    $("#modalContent").html(response);
                },
                failure: function (response) {
                    alert(response);
                }
            });
        };
        BlockHistory = function () {
            $.ajax({
                type: "GET",
                url: "@Url.Action("BlockHistory", "UAB")",
                data: {
                    "name": "@Model.BlockCategory",
                    "remarks": "@Model.BlockRemarks",
                    "createdate": "@Model.BlockedDate"
                    },
                success: function (response) {
                    $("#modalContent").html(response);
                },
                failure: function (response) {
                    alert(response);
                }
            });
        };
});


</script>
