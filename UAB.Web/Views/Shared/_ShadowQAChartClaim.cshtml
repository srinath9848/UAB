@model UAB.DTO.ChartSummaryDTO
@using UAB.enums
@{
    int tabIndex = Model.TabIndex;
    string dxClaim = "txtDx" + tabIndex + "Claim" + "_1";
    string cptClaim = "txt" + tabIndex + "Cpt" + "_1";
    string cptModClaim = "txt" + tabIndex + "mod" + "_1";
    string cptQtyClaim = "txt" + tabIndex + "qty" + "_1";
    string cptLinksClaim = "txt" + tabIndex + "links" + "_1";

    string dx2index = "dx" + tabIndex + "index";
    string Dx2Claim = "txt" + tabIndex + "Dx";
    string Div2DxRow = "Div" + tabIndex + "DxRow_1";

    string cpt2index = "cpt" + tabIndex + "index";
    string Cpt2Link = "txt" + tabIndex + "Link";
    string Div2CptRow = "Div" + tabIndex + "CptRow_1";
}

@{
    string Show = "display:none;";

    if (!string.IsNullOrEmpty(Model.QAPayorText) || !string.IsNullOrEmpty(Model.QAProviderText)
    || !string.IsNullOrEmpty(Model.QACPTCode) || !string.IsNullOrEmpty(Model.QADx) ||
    !string.IsNullOrEmpty(Model.QAProviderFeedbackText))
        Show = "display:flex;";

}

<br />

<div class="form-group row" style="margin-top:10px;">
    <label class="col-md-3 m-t-15"></label>
    <div class="custom-control custom-checkbox col-md-3 input-group" style="margin-left:-50px !important;" id="divChkAll_@tabIndex">
        <input type="checkbox" class="custom-control-input ShadowQADetails" id="chkAll_@tabIndex" onclick="CheckAllboxes('chkAll_@tabIndex')">
        <label class="custom-control-label" for="chkAll_@tabIndex">Accept All</label>
    </div>
    <div class="custom-control col-md-3 input-group QAComments_@tabIndex" style="@Show margin-left:-27px !important">
        <label class="">QA Comments</label>
    </div>
    <div class="custom-control col-md-3 input-group ShadowQACorrectionsComments_@tabIndex" style="@Show margin-left:-54px;">
        <label class="">ShadowQA Corrections</label>
    </div>
    <div class="custom-control col-md-3 input-group ShadowQACorrectionsComments_@tabIndex" style="@Show">
        <label class="">ShadowQA Comments</label>
    </div>
</div>
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15">Provider</label>
    @{int len = ((!string.IsNullOrEmpty(Model.QAProviderText) && !Model.ProviderText.Equals(Model.QAProviderText)) ? 10 : 20);}
    @{string ProviderText = (Model.ProviderText?.Length > len) ? Model.ProviderText.Substring(0, len) + ".." : Model.ProviderText;}
    @{string QAProviderText = (Model.QAProviderText?.Length > len) ? "/" + Model.QAProviderText.Substring(0, len) + ".." : "/" + Model.QAProviderText;}
    @{string title = (!string.IsNullOrEmpty(Model.QAProviderText) ? Model.ProviderText + "/" + Model.QAProviderText : Model.ProviderText);}
    @{ var QARemarks = string.Format("form-control ControlHeight QARemarks_{0}", @Model.TabIndex);}
    @Html.DropDownListFor(model => model.QAProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @class = "form-control CoderDetails ControlHeight", @id = string.Format("QAProviderID_{0}", tabIndex), @style = "display:none;" })

    <div title="@title" class="col-md-3 input-group">
        <div class="form-control CoderDetails ControlHeight" style="line-height:2.5;overflow:hidden">
            <span style="white-space:nowrap">
                @if (!string.IsNullOrEmpty(Model.QAProviderText) && !Model.ProviderText.Equals(Model.QAProviderText))
                {
                    <label style="color: red;">@ProviderText</label>
                    <label style="color: green">@QAProviderText</label>
                }
                else
                {
                    <label style="color: green;">@ProviderText</label>
                }
            </span>
        </div>
        <div class="input-group-append ControlHeight">
            <span class="input-group-text AcceptRejectWidth AcceptRejectWidth_@tabIndex">
                &nbsp;<i id="ProviderID_@Model.TabIndex" data="@tabIndex" class="fa fa-check-circle fa-lg AdjustAcceptReject AdjustAcceptReject_@tabIndex" aria-hidden="true"></i>
                &nbsp;<i id="ProviderID_@Model.TabIndex" data="@tabIndex" class="fa fa-times-circle fa-lg AdjustReject_@tabIndex" aria-hidden="true"></i>
            </span>
        </div>
    </div>
    @{Show = (string.IsNullOrEmpty(Model.QAProviderRemarks) ? "visibility:hidden" : "display:flex");}
    <div title="@Model.QAProviderRemarks" class="col-md-3 input-group" style="@Show">
        <input type="text" class="@QARemarks" disabled value="@Model.QAProviderRemarks" id="@string.Format("QAProviderIDRemarks_{0}", @tabIndex)" />
    </div>
    @{Show = (string.IsNullOrEmpty(Model.QAProviderRemarks) ? "display:none" : "display:flex");}
    <div class="col-md-3 input-group">
        @Html.DropDownListFor(model => model.ShadowQAProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @id = string.Format("ShadowQAProviderID_{0}", Model.TabIndex), @class = string.Format("form-control ProviderID_{0} QARevised_{0} ControlHeight", Model.TabIndex), @style = "display:none" })
        @Html.ValidationMessageFor(model => model.ShadowQAProviderID, null, new { @class = "text-danger errMsg" })
    </div>
    <div class="col-md-3 input-group">
        @Html.TextBoxFor(model => model.ShadowQAProviderRemarks, new { @style = "display:none", @class = string.Format("form-control ProviderID_{0} QARevised_{0} ControlHeight", Model.TabIndex), @id = string.Format("ShadowQAProviderIDRemarks_{0}", Model.TabIndex) })
        @Html.ValidationMessageFor(model => model.ShadowQAProviderRemarks, null, new { @class = "text-danger errMsg" })
        <span id="validProvider_@Model.TabIndex" class="text-danger txtdanger" style="display:none">*</span>
    </div>
</div>
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15">Payor</label>
    @{ len = ((!string.IsNullOrEmpty(Model.QAPayorText) && !Model.PayorText.Equals(Model.QAPayorText)) ? 10 : 20);}
    @{string PayorText = (Model.PayorText?.Length > len) ? Model.PayorText.Substring(0, len) + ".." : Model.PayorText;}
    @{string QAPayorText = (Model.QAPayorText?.Length > len) ? "/" + Model.QAPayorText.Substring(0, len) + ".." : "/" + Model.QAPayorText;}
    @{title = (!string.IsNullOrEmpty(Model.QAPayorText) ? Model.PayorText + "/" + Model.QAPayorText : Model.PayorText);}
    @Html.DropDownListFor(model => model.QAPayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), "--Select--", new { @class = "form-control CoderDetails ControlHeight", @id = string.Format("QAPayorID_{0}", tabIndex), @style = "display:none;" })

    <div title="@title" class="col-md-3 input-group">
        <div name="PayorText" class="form-control CoderDetails ControlHeight" style="line-height:2.5;overflow:hidden">
            <span style="white-space:nowrap">

                @if (!string.IsNullOrEmpty(Model.QAPayorText) && !Model.PayorText.Equals(Model.QAPayorText))
                {
                    <label style="color: red;">@PayorText</label>
                    <label style="color: green">@QAPayorText</label>
                }
                else
                {
                    <label style="color: green;">@PayorText</label>
                }
            </span>
        </div>
        <div class="input-group-append ControlHeight">
            <span class="input-group-text AcceptRejectWidth AcceptRejectWidth_@tabIndex">
                &nbsp;<i id="PayorID_@Model.TabIndex" class="fa fa-check-circle fa-lg AdjustAcceptReject AdjustAcceptReject_@tabIndex" aria-hidden="true"></i>
                &nbsp;<i id="PayorID_@Model.TabIndex" class="fa fa-times-circle fa-lg AdjustReject_@tabIndex" aria-hidden="true"></i>
            </span>
        </div>
    </div>
    @{Show = (string.IsNullOrEmpty(Model.QAPayorRemarks) ? "visibility:hidden" : "display:flex");}
    <div title="@Model.QAPayorRemarks" class="col-md-3 input-group" style="@Show">
        <input type="text" class="@QARemarks" disabled value="@Model.QAPayorRemarks" id="@string.Format("QAPayorIDRemarks_{0}", @tabIndex)" />
    </div>
    @{Show = (string.IsNullOrEmpty(Model.QAPayorRemarks) ? "display:none" : "display:flex");}
    <div class="col-md-3 input-group">
        @Html.DropDownListFor(model => model.ShadowQAPayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), "--Select--", new { @id = string.Format("ShadowQAPayorID_{0}", Model.TabIndex), @class = string.Format("form-control PayorID_{0} QARevised_{0} ControlHeight", Model.TabIndex), @style = "display:none" })
        @Html.ValidationMessageFor(model => model.ShadowQAPayorID, null, new { @class = "text-danger errMsg" })
    </div>
    <div class="col-md-3 input-group">
        @Html.TextBoxFor(model => model.ShadowQAPayorRemarks, new { @style = "display:none", @class = string.Format("form-control PayorID_{0} QARevised_{0} ControlHeight", Model.TabIndex), @id = string.Format("ShadowQAPayorIDRemarks_{0}", Model.TabIndex) })
        @Html.ValidationMessageFor(model => model.ShadowQAPayorRemarks, null, new { @class = "text-danger errMsg" })
        <span id="validPayor_@Model.TabIndex" class="text-danger txtdanger" style="display:none">*</span>
    </div>
</div>

<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15">Note Title</label>
    <div class="col-md-3 input-group">
        @Html.TextBoxFor(model => model.NoteTitle, new { @class = "form-control CoderDetails ControlHeight", @disabled = "true" })
    </div>
</div>
@{
    Dictionary<int, string> dictDxCodes = Utility.GetDxCodes(Model.Dx);
    Dictionary<int, string> dictQADxCodes = Utility.GetQAOrShadowQADxCodes(Model.QADx);
    Dictionary<int, string> dictQADxRemarks = Utility.GetQAOrShadowQADxRemarks(Model.QADxRemarks);

    dictQADxCodes = (dictQADxCodes == null) ? new Dictionary<int, string>() : dictQADxCodes;
    dictQADxRemarks = (dictQADxRemarks == null) ? new Dictionary<int, string>() : dictQADxRemarks;

    int count = Math.Max(dictDxCodes.Count(), dictQADxCodes.Count());

    int totalDxCount = count + 1;

    Utility.AddEmptyRows(dictDxCodes, count, "NA");
    Utility.AddEmptyRows(dictQADxCodes, count, "");
    Utility.AddEmptyRows(dictQADxRemarks, count, "");
}
@{string QARevised = string.Format("QARevised_{0}", Model.TabIndex);}
<div id="DivDx_@tabIndex">
    @{
        int j = 1;
        int i;
        for (i = 0; i < count; i++)
        {
            <div class="form-group row">
                @if (i == 0)
                {
                    <label class="col-md-3 lessWidth m-t-15">Dx</label>
                }
                else
                {
                    <label class="col-md-3 lessWidth m-t-15"></label>
                }

                @{len = ((!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) && !(dictDxCodes?.ElementAt(i).Value).Equals(dictQADxCodes?.ElementAt(i).Value)) ? 10 : 20); }
                @{string Dx = (dictDxCodes.ElementAt(i).Value?.Length > len) ? dictDxCodes.ElementAt(i).Value.Substring(0, len) + ".." : dictDxCodes.ElementAt(i).Value;}
                @{string QADx = (dictQADxCodes?.ElementAt(i).Value?.Length > len) ? "/" + dictQADxCodes?.ElementAt(i).Value.Substring(0, len) + ".." : "/" + dictQADxCodes?.ElementAt(i).Value;}
                @{title = (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) ? dictDxCodes.ElementAt(i).Value + "/" + dictQADxCodes?.ElementAt(i).Value : dictDxCodes.ElementAt(i).Value);}

                @{
                    var DxClaimRemarks = string.Format("form-control DxClaim_{0}_QARemarks_{1}", @Model.TabIndex, @j);
                    var DxClaimShadowQARemarks = string.Format("form-control DxClaim_{0}_ShadowQARemarks_{1}", @Model.TabIndex, @j);
                    var DxClaim = string.Format("DxClaim_{0}_{1}", @Model.TabIndex, @j);
                }
                <div title="@title" class="col-md-3 input-group">
                    <div class="input-group-prepend ControlHeight">
                        <span class="input-group-text @string.Format("dx{0}index", @Model.TabIndex) AdjustSerialNumber" id="basic-addon1">@j</span>
                    </div>
                    <div class="form-control CoderDetails ControlHeight" style="line-height:2.5;overflow:hidden">
                        <span style="white-space:nowrap">
                            @if (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) && !(dictDxCodes?.ElementAt(i).Value).Equals(dictQADxCodes?.ElementAt(i).Value))
                            {
                                <label style="color: red;">@Dx</label>
                                <label style="color:green">@QADx</label>
                            }
                            else
                            {
                                <label style="color: green;">@Dx</label>
                            }
                        </span>
                    </div>
                    <div class="input-group-append ControlHeight" style="height: 45px;">
                        <span class="input-group-text AcceptRejectWidth AcceptRejectWidth_@tabIndex">
                            &nbsp;<i id="@string.Format("DxClaim_{0}_{1}", Model.TabIndex, j)" data="@tabIndex" class="fa fa-check-circle fa-lg AdjustAcceptReject AdjustAcceptReject_@tabIndex" aria-hidden="true"></i>
                            &nbsp;<i id="@string.Format("DxClaim_{0}_{1}", Model.TabIndex, j)" data="@tabIndex" class="fa fa-times-circle fa-lg AdjustReject_@tabIndex" aria-hidden="true"></i>
                        </span>
                    </div>
                </div>
                @{ Show = (string.IsNullOrEmpty(dictQADxRemarks?.ElementAt(i).Value) ? "visibility:hidden" : "display:flex"); }
                <div title="" class="col-md-3 input-group" style="@Show">
                    <input type="text" id="@DxClaim" disabled class="@DxClaimRemarks QARemarks ControlHeight QADxRemarks_@j @string.Format("QADxRemarks_{0}_{1}", Model.TabIndex, j)" value="@dictQADxRemarks?.ElementAt(i).Value" />
                </div>
                <div class="col-md-3 @QARevised input-group @string.Format("DxClaim_{0}_{1}", Model.TabIndex, j)" style="display: none">
                    <div class="input-group-prepend ControlHeight">
                        <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                    </div>
                    @{
                        string QaDxVal = !string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) ? dictQADxCodes?.ElementAt(i).Value : dictDxCodes.ElementAt(i).Value;

                        if (dictQADxCodes?.ElementAt(i).Value == "" && !string.IsNullOrEmpty(dictDxCodes?.ElementAt(i).Value))
                        {
                            QaDxVal = dictDxCodes.ElementAt(i).Value;
                        }
                        var DxClaim_QA = string.Format("DxClaim_{0}_QA_{1}", Model.TabIndex, j);
                    }
                    <input type="hidden" class="@string.Format("txQADx_{0}_{1}", Model.TabIndex, j)" value="@QaDxVal" />
                    <input type="text" id="@string.Format("txtDx{0}Claim_{1}", Model.TabIndex, j)" class="form-control ControlHeight claim_@tabIndex @string.Format("DxClaim_{0}_{1}", Model.TabIndex,i)" autocomplete="off" placeholder="Code" value="@QaDxVal" />
                    @*<input type="text" id="@string.Format("txtDx{0}Claim_{1}", Model.TabIndex,i)" class="form-control ControlHeight claim_@tabIndex @string.Format("DxClaim_{0}_{1}", Model.TabIndex,i)" autocomplete="off" placeholder="Code" value="@item" style="display:none" />*@
                </div>
                <div class="col-md-3 input-group">
                    @{ var dxRemarks = string.Format("DxRemarkss_{0}_{1}", Model.TabIndex, j);}
                    <input type="text" id="@dxRemarks" onchange="removeClaimValid('@dxRemarks')" class="form-control @QARevised ControlHeight @string.Format("DxRemarks_{0}_{1}", Model.TabIndex, j) @string.Format("DxClaim_{0}_{1}", Model.TabIndex, j)" style="display:none" />
                    <span id="@string.Format("validDxRemarksClaim_{0}_{1}", Model.TabIndex, j)" class="text-danger txtdanger" style="display:none">*</span>
                </div>
            </div>

            j = j + 1;
        }
    }
    <input type="hidden" id="@string.Format("txtDx_1_{0}", tabIndex)" value="@totalDxCount" />
    <div class="form-group row">
        <label class="col-md-3 lessWidth m-t-15"></label>
        <div class="col-md-3 input-group">
            <div class="input-group-prepend ControlHeight">
                <span class="@string.Format("input-group-text dx{0}index AdjustSerialNumber", Model.TabIndex)" id="basic-addon1">@totalDxCount</span>
            </div>
            <input class="form-control CoderDetails ControlHeight valid" disabled type="text" value="">
            <div class="input-group-append ControlHeight">
                <span class="input-group-text AcceptRejectWidth AcceptRejectWidth_@tabIndex QACorrections">
                    &nbsp;<i data="@tabIndex" class="fa fa-edit fa-lg AdjustAcceptReject" aria-hidden="true" style="visibility:hidden"></i>
                    &nbsp;<i id="@string.Format("DxClaim_{0}_{1}", Model.TabIndex, totalDxCount)" data="@tabIndex" class="fa fa-times-circle fa-lg ignore" aria-hidden="true"></i>
                </span>
            </div>
        </div>

        <div title="" class="col-md-3 input-group" style="display:flex"></div>
        <div class="col-md-3 @QARevised newlyDxCpt_@tabIndex input-group @string.Format("DxClaim_{0}_{1}", Model.TabIndex, totalDxCount)" id="@Div2DxRow" style="display:none">
            <div class="input-group-prepend ControlHeight">
                <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@totalDxCount</span>
            </div>
            <input type="text" id="@string.Format("txtDx{0}Claim_{1}", Model.TabIndex,totalDxCount)" onfocusout="DxClaims('txtDx_1_@tabIndex')" class="form-control ControlHeight @Dx2Claim claim_@tabIndex" autocomplete="off" placeholder="Code" />
            @*<input type="text" id="@string.Format("txtDx{0}Claim_{1}", Model.TabIndex,totalDxCount)" onfocusout="DxClaims('txtDx_1_@totalDxCount')" class="form-control ControlHeight @Dx2Claim claim_@tabIndex" autocomplete="off" placeholder="Code" />*@
        </div>
        <div class="col-md-3 @QARevised input-group @string.Format("DxClaim_{0}_{1}", Model.TabIndex,totalDxCount)" id="@Div2DxRow" style="display:none">
            <input type="text" id="@string.Format("DxRemarkss_{0}_{1}", Model.TabIndex, j)" class="form-control DxRemarkss_@Model.TabIndex ControlHeight" style="display:flex;" />
            <span id="@string.Format("validDxRemarksClaim_{0}_{1}", Model.TabIndex, j)" class="text-danger txtdanger" style="display:none">*</span>
        </div>
    </div>
</div>
@{
    Dictionary<int, string> dictCptCodes = Utility.GetCptCodes(Model.CPTCode);
    Dictionary<int, string> dictQACptCodes = Utility.GetQAOrShadowQACptCodes(Model.QACPTCode);
    Dictionary<int, string> dictQACptRemarks = Utility.GetQAOrShadowQACptRemarks(Model.QACPTCodeRemarks);

    dictQACptCodes = (dictQACptCodes == null) ? new Dictionary<int, string>() : dictQACptCodes;
    dictQACptRemarks = (dictQACptRemarks == null) ? new Dictionary<int, string>() : dictQACptRemarks;

    int Cptcount = Math.Max(dictCptCodes.Count(), dictQACptCodes.Count());

    int totalCptCount = Cptcount + 1;

    Utility.AddEmptyRows(dictCptCodes, Cptcount, "NA");
    Utility.AddEmptyRows(dictQACptCodes, Cptcount, "");
    Utility.AddEmptyRows(dictQACptRemarks, Cptcount, "");
}
<div id="DivCpt_@tabIndex">
    @{
        j = 1;
        for (i = 0; i < Cptcount; i++)
        {

            <div class="form-group row" id="DivCptRow_@j">
                @if (i == 0)
                {
                    <label class="col-md-3 lessWidth m-t-15">CPT</label>
                }
                else
                {
                    <label class="col-md-3 lessWidth m-t-15"></label>
                }
                @{ string[] coderCptcodes = dictCptCodes?.ElementAt(i).Value.Split("^");}
                @{ string[] qaCptcodes = dictQACptCodes?.ElementAt(i).Value.Split("^");}



                @if (!string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value))
                {
                    string codercptCode = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[0]);
                    string qacptCode = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[0]);
                    string color = (codercptCode != qacptCode) ? "color:blue;" : "";
                    string cptCode = !string.IsNullOrEmpty(codercptCode) ? codercptCode : "";
                    string cptCode1 = cptCode == qacptCode ? "" : codercptCode + "/";

                    string coderMod = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[1]);
                    string qaMod = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[1]);
                    string mod = qaMod == "null" ? "" : qaMod;
                    string cptMod = !string.IsNullOrEmpty(coderMod) ? coderMod : "";
                    string cptMod1 = cptMod == qaMod ? "" : coderMod + "/";

                    string coderQty = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[2]);
                    string qaQty = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[2]);
                    string cptQty = !string.IsNullOrEmpty(coderQty) ? coderQty : "";
                    string cptQty1 = cptQty == qaQty ? "" : coderQty + "/";

                    string coderLinks = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[3]);
                    string qaLinks = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[3]);
                    string linkAll = qaLinks == "null" ? "" : qaLinks;
                    string cptLinks = !string.IsNullOrEmpty(coderLinks) ? coderLinks : "";
                    string cptLinks1 = !string.IsNullOrEmpty(coderLinks) ? coderLinks + "/" : "";

                    string link = !string.IsNullOrEmpty(@qaLinks) || @qaLinks != "null" ? @qaLinks : "Link All";
                    cptLinks1 = cptLinks == link ? "" : coderLinks + "/";
                    <div title="Code : @cptCode1@qacptCode, Mod : @cptMod1@mod, Quantity : @cptQty1@qaQty, Link : @cptLinks1@link" class="col-md-3 input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text @string.Format("cpt{0}index", Model.TabIndex) AdjustSerialNumber" id="basic-addon1">@j</span>
                        </div>
                        @{
                            if (codercptCode == qacptCode)
                            {
                                <div class="form-control CoderDetails" style="min-width:60px;">
                                    <span style="color:green">@codercptCode.Replace("/", "")</span>
                                </div>
                                <div class="form-control CoderDetails">
                                    <span style="color:green">@coderMod.Replace("/", "")</span>
                                </div>
                                <div class="form-control CoderDetails">
                                    <span style="color:green">@coderQty.Replace("/", "")</span>
                                </div>
                                <div class="form-control CoderDetails">
                                    <span style="color:green">@link</span>
                                </div>
                            }
                            else
                            {
                                if (codercptCode == "NA")
                                    color = "color:fuchsia;";
                                <div class="form-control CoderDetails" style="min-width:60px;">
                                    <span style="color:red">@cptCode1.Replace("/", "")</span>
                                    <br />
                                    <span style="color:green">@qacptCode</span>
                                </div>
                                color = (coderMod != qaMod) ? "color:blue;" : "";
                                if (coderMod == "NA")
                                    color = "color:fuchsia;";
                                <div class="form-control CoderDetails">
                                    <span style="color:red">@coderMod.Replace("/", "")</span>
                                    <br />
                                    <span style="color:green">@qaMod</span>
                                </div>

                                color = (coderQty != qaQty) ? "color:blue;" : "";
                                if (coderQty == "NA")
                                    color = "color:fuchsia;";
                                <div class="form-control CoderDetails">
                                    <span style="color:red">@coderQty.Replace("/", "")</span>
                                    <br />
                                    <span style="color:green">@qaQty</span>
                                </div>

                                color = (coderLinks != qaLinks) ? "color:blue;" : "";
                                if (coderLinks == "NA")
                                    color = "color:fuchsia;";
                                <div class="form-control CoderDetails">
                                    <span style="color:red">@cptLinks1.Replace("/", "")</span><br />
                                    <span style="color:green">@link</span>
                                </div>
                            }
                        }

                        <div class="input-group-append">
                            <span class="input-group-text AcceptRejectWidth AcceptRejectWidth_@tabIndex">
                                &nbsp;<i id="@string.Format("Cpt_{0}_{1}", Model.TabIndex,j)" class="fa fa-check-circle fa-lg AdjustAcceptReject AdjustAcceptReject_@tabIndex" aria-hidden="true"></i>
                                &nbsp;<i id="@string.Format("Cpt_{0}_{1}", Model.TabIndex,j)" class="fa fa-times-circle fa-lg AdjustReject_@tabIndex" aria-hidden="true"></i>
                            </span>
                        </div>
                    </div>
                }
                else
                {
                    string cptVal = coderCptcodes[0] == "NA" ? "" : coderCptcodes[0];
                    string modVal1 = coderCptcodes[1] == "null" ? "" : coderCptcodes[1];
                    string qtyVal = coderCptcodes[2];
                    string linkAllVal1 = coderCptcodes[3] == "null" ? "" : coderCptcodes[3];
                    <div title="Code : @cptVal, Mod : @modVal1, Quantity : @qtyVal, Link : @linkAllVal1" class="col-md-3 input-group">
                        <div class="input-group-prepend ControlHeight">
                            <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                        </div>

                        <input type="text" class="form-control CoderDetails ControlHeight" disabled style="color: green;min-width: 50px;" placeholder="Code" value="@cptVal" />
                        <input type="text" class="form-control CoderDetails ControlHeight" disabled style="color:green;min-width: 42px;" placeholder="Mod" value="@modVal1" />
                        <input type="text" class="form-control CoderDetails ControlHeight" disabled style="color:green;max-width: 23px;" placeholder="Qty" value="@qtyVal" />
                        <input type="text" class="form-control CoderDetails ControlHeight" disabled style="color: green;" placeholder="Link All" value="@linkAllVal1" />

                        <div class="input-group-append ControlHeight">
                            <span class="input-group-text ControlHeight AcceptRejectWidth AcceptRejectWidth_@tabIndex">
                                &nbsp;<i id="@string.Format("Cpt_{0}_{1}", Model.TabIndex,j)" data="@tabIndex" class="fa fa-check-circle fa-lg AdjustAcceptReject AdjustAcceptReject_@tabIndex" aria-hidden="true"></i>
                                &nbsp;<i id="@string.Format("Cpt_{0}_{1}", Model.TabIndex,j)" data="@tabIndex" class="fa fa-times-circle fa-lg AdjustReject_@tabIndex" aria-hidden="true"></i>
                            </span>
                        </div>
                    </div>
                }

                @{ Show = (string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? "visibility:hidden" : "display:flex"); }
                <div title="" class="col-md-3 input-group" style="@Show">
                    <input type="text" class="form-control QARemarks ControlHeight @string.Format("QACptRemarks_{0}_{1}", Model.TabIndex,j)" disabled value="@dictQACptRemarks?.ElementAt(i).Value" />
                </div>
                <div class="col-md-3 QACptRevised_@tabIndex input-group @string.Format("Cpt_{0}_{1}", Model.TabIndex,j)" style="display:none">
                    <div class="input-group-prepend ControlHeight">
                        <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                    </div>
                    @{
                        string qacptCode1 = (dictQACptCodes?.ElementAt(i).Value == "" ? coderCptcodes[0] : qaCptcodes[0]);

                        string qaMod1 = (dictQACptCodes?.ElementAt(i).Value == "" ? coderCptcodes[1] : qaCptcodes[1]);

                        string qaQty1 = (dictQACptCodes?.ElementAt(i).Value == "" ? coderCptcodes[2] : qaCptcodes[2]);

                        string qaLinks1 = (dictQACptCodes?.ElementAt(i).Value == "" ? coderCptcodes[3] : qaCptcodes[3]);

                        string modVal = qaMod1 == "null" ? "" : qaMod1;
                        string linkAllVal = qaLinks1 == "null" ? "" : qaLinks1;
                    }
                    <input type="hidden" id="@string.Format("QaCptCodes_{0}_{1}", Model.TabIndex,j)" value="@qacptCode1^@modVal^@qaQty1^@linkAllVal" />
                    <input type="text" maxlength="5" style="min-width:50px;" class="form-control ControlHeight" id="@string.Format("txt{0}Cpt_{1}", Model.TabIndex,j)" autocomplete="off" placeholder="Code" value="@qacptCode1" />
                    <input type="text" style="min-width:42px;" class="form-control ControlHeight" id="@string.Format("txt{0}mod_{1}", Model.TabIndex,j)" autocomplete="off" placeholder="Mod" value="@modVal" />
                    <input type="text" style="max-width:23px;" class="form-control ControlHeight cptQtyClaim" id="@string.Format("txt{0}qty_{1}", Model.TabIndex,j)" autocomplete="off" placeholder="Qty" value="@qaQty1" />
                    <input type="text" class="form-control cptLinksClaim ControlHeight" id="@string.Format("txt{0}links_{1}", Model.TabIndex,j)" autocomplete="off" placeholder="Link All" value="@linkAllVal" />

                </div>
                <div class="col-md-3 QACptRevised_@tabIndex input-group @string.Format("Cpt_{0}_{1}", Model.TabIndex,j)" style="display: none">
                    <input type="text" id="@string.Format("CptRemarkss_{0}_{1}", Model.TabIndex,j)" class="form-control @string.Format("Cpt_{0}_{1}", Model.TabIndex,j) QACptRevised_@tabIndex CptRemarkss_@Model.TabIndex ControlHeight CptRemarks_@j Cpt_@j" style="display:none;" />
                    <span id="@string.Format("validCptRemarksClaim_{0}_{1}", Model.TabIndex, j)" class="text-danger txtdanger" style="display:none">*</span>
                </div>
            </div>
            j = j + 1;
        }
    }
    <input type="hidden" id="@string.Format("txtLinks_1_{0}", tabIndex)" value="@totalCptCount" />
    <div class="form-group row">
        <label class="col-md-3 lessWidth m-t-15"></label>
        <div class="col-md-3 CptlessWidth input-group">
            <div class="input-group-prepend ControlHeight">
                <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@totalCptCount</span>
            </div>
            <input type="text" maxlength="5" style="min-width:50px;" class="form-control CoderDetails ControlHeight" autocomplete="off" placeholder="Code" value="" />
            <input type="text" style="min-width:42px;" class="form-control CoderDetails ControlHeight" autocomplete="off" placeholder="Mod" value="" />
            <input type="text" style="max-width:23px;" class="form-control CoderDetails ControlHeight" autocomplete="off" placeholder="Qty" value="" />
            <input type="text" class="form-control CoderDetails ControlHeight" autocomplete="off" placeholder="Link All" value="" />
            <div class="input-group-append ControlHeight">
                <span class="input-group-text AcceptRejectWidth AcceptRejectWidth_@tabIndex">
                    &nbsp;<i data="@tabIndex" class="fa fa-edit fa-lg AdjustAcceptReject" aria-hidden="true" style="visibility:hidden"></i>
                    &nbsp;<i id="@string.Format("Cpt_{0}_{1}", tabIndex,totalCptCount)" data="@tabIndex" class="fa fa-times-circle fa-lg ignore" aria-hidden="true"></i>
                </span>
            </div>
        </div><div title="" class="col-md-3 input-group" style="display:flex"></div>
        <div id="@Div2CptRow" class="col-md-3 QACptRevised_@tabIndex newlyDxCpt_@tabIndex CptlessWidth input-group @string.Format("Cpt_{0}_{1}", Model.TabIndex,totalCptCount)" style="display:none">
            <div class="input-group-prepend ControlHeight">
                <span class="input-group-text AdjustSerialNumber @cpt2index" id="basic-addon1">@totalCptCount</span>
            </div>
            @{
                cptClaim = "txt" + tabIndex + "Cpt_" + totalCptCount;
                cptModClaim = "txt" + tabIndex + "mod_" + totalCptCount;
                cptQtyClaim = "txt" + tabIndex + "qty_" + totalCptCount;
                cptLinksClaim = "txt" + tabIndex + "links_" + totalCptCount;
                string txtLinks = "'" + "txtLinks_" + tabIndex + "_" + totalCptCount + "'";
            }
            <input type="text" id="@cptClaim" maxlength="5" style="min-width:50px;" class="form-control ControlHeight Cptclaim_@tabIndex" autocomplete="off" placeholder="Code" value="" />
            <input type="text" id="@cptModClaim" style="min-width:42px;" class="form-control ControlHeight Cptclaim_@tabIndex" autocomplete="off" placeholder="Mod" value="" />
            <input type="text" id="@cptQtyClaim" style="max-width:23px;" class="form-control ControlHeight cptQtyClaim Cptclaim_@tabIndex" autocomplete="off" placeholder="Qty" value="1" />
            <input type="text" id="@cptLinksClaim" class="form-control ControlHeight cptLinksClaim @Cpt2Link" autocomplete="off" placeholder="Link All" onfocusout="CptClaims('txtLinks_1_@tabIndex')" />
        </div>
        <div class="col-md-3 QACptRevised_@tabIndex input-group @string.Format("Cpt_{0}_{1}", Model.TabIndex,totalCptCount)" id="@Div2CptRow" style="display:none">
            <input type="text" id="@string.Format("CptRemarkss_{0}_{1}", Model.TabIndex,totalCptCount)" class="form-control ControlHeight" style="display:flex;" />
            <span id="@string.Format("validCptRemarksClaim_{0}_{1}", Model.TabIndex, totalCptCount)" class="text-danger txtdanger" style="display:none">*</span>
        </div>
    </div>
</div>
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15">Provider Feedback</label>
    @{len = ((!string.IsNullOrEmpty(Model.QAProviderFeedbackText) && !Model.ProviderFeedbackText.Equals(Model.QAProviderFeedbackText)) ? 10 : 20); }
    @{string ProviderFeedbackText = (Model.ProviderFeedbackText?.Length > len) ? Model.ProviderFeedbackText.Substring(0, len) + ".." : Model.ProviderFeedbackText;}
    @{string QAProviderFeedbackText = (Model.QAProviderFeedbackText?.Length > len) ? "/" + Model.QAProviderFeedbackText.Substring(0, len) + ".." : "/" + Model.QAProviderFeedbackText;}
    @{title = (!string.IsNullOrEmpty(Model.QAProviderFeedbackText) ? Model.ProviderFeedbackText + "/" + Model.QAProviderFeedbackText : Model.ProviderFeedbackText);}
    @Html.DropDownListFor(model => model.QAProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), "--Select--", new { @class = "form-control CoderDetails ControlHeight", @id = string.Format("QAFeedback_{0}", Model.TabIndex), @style = "display:none;" })

    <div title="@title" class="col-md-3 input-group">
        <div class="form-control CoderDetails ControlHeight" style="line-height:2.5;overflow:hidden">
            <span style="white-space:nowrap">

                @if (!string.IsNullOrEmpty(Model.QAProviderFeedbackText) && !Model.ProviderFeedbackText.Equals(Model.QAProviderFeedbackText))
                {
                    <label style="color: red;">@ProviderFeedbackText</label>
                    <label style="color:green">@QAProviderFeedbackText</label>
                }
                else
                {
                    <label style="color: green;">@ProviderFeedbackText</label>
                }
            </span>
        </div>
        <div class="input-group-append ControlHeight" style="height: 38px;">
            <span class="input-group-text AcceptRejectWidth AcceptRejectWidth_@tabIndex">
                &nbsp;<i id="Feedback_@Model.TabIndex" class="fa fa-check-circle fa-lg AdjustAcceptReject AdjustAcceptReject_@tabIndex" aria-hidden="true"></i>
                &nbsp;<i id="Feedback_@Model.TabIndex" class="fa fa-times-circle fa-lg AdjustReject_@tabIndex" aria-hidden="true"></i>
            </span>
        </div>
    </div>
    @{Show = (string.IsNullOrEmpty(Model.QAProviderFeedbackRemarks) ? "visibility:hidden" : "display:flex");}
    <div title="@Model.QAProviderFeedbackRemarks" class="col-md-3 input-group" style="@Show">
        <input type="text" class="@QARemarks ControlHeight" disabled value="@Model.QAProviderFeedbackRemarks" id="@string.Format("QAProviderFeedbackRemarks_{0}", @tabIndex)" />
    </div>
    @{Show = (string.IsNullOrEmpty(Model.QAProviderFeedbackRemarks) ? "display:none" : "display:flex");}
    <div class="col-md-3 input-group">
        @Html.DropDownListFor(model => model.ShadowQAProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), "--Select--", new { @style = "display:none", @class = string.Format("form-control Feedback_{0} QARevised_{0} ControlHeight", Model.TabIndex), @id = string.Format("ShadowQAProviderFeedback_{0}", Model.TabIndex) })
        @Html.ValidationMessageFor(model => model.ShadowQAProviderFeedbackID, null, new { @class = "text-danger errMsg" })
    </div>
    <div class="col-md-3 input-group">
        @Html.TextBoxFor(model => model.ShadowQAProviderFeedbackRemarks, new { @style = "display:none", @class = string.Format("form-control Feedback_{0} QARevised_{0} ControlHeight", Model.TabIndex), @id = string.Format("ShadowQAProviderFeedbackRemarks_{0}", Model.TabIndex) })
        @Html.ValidationMessageFor(model => model.ShadowQAProviderFeedbackRemarks, null, new { @class = "text-danger errMsg" })
        <span id="validFeedback_@Model.TabIndex" class="text-danger txtdanger" style="display:none">*</span>
    </div>
</div>

<div class="clearfix"></div>
<div class="col-md-6">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">QA Details</h4>
        </div>
        <div class="card-body">
            <div class="col-12">
                <div class="row mb-3">
                    <div class="col-lg-6">
                        <div class="form-group row">
                            <label class="col-md-5 m-t-15">
                                Error Type
                            </label>
                            <div class="col-md-7">
                                @Html.DropDownListFor(model => model.QADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), "--Select--", new { @class = "form-control ControlHeight", @readonly = "readonly", @style = "pointer-events: none;" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="col-md-12">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">Shadow QA Details</h4>
        </div>
        <div class="card-body">
            <div class="col-12">
                <div class="row mb-3">
                    <div class="col-lg-6">
                        <div class="form-group row">
                            <label class="col-md-3 m-t-15">
                                Error Type
                            </label>
                            <div class="col-md-7">
                                @Html.DropDownListFor(model => model.ShadowQADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), "--Select--", new { @class = "form-control ControlHeight", @id = string.Format("ShadowQAErrorType_{0}", tabIndex), @onchange = "ShadowQAErrorType('" + tabIndex + "')" })
                                @Html.ValidationMessageFor(model => model.ShadowQADTO.ErrorType, null, new { @class = "text-danger ErrorType", @id = string.Format("ShadowQAErrorTypeError_{0}", tabIndex) })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group row">
                            <div class="col-md-12">
                                <a href="@Url.Action("GetBlockedChart", "UAB", new { Role = Roles.ShadowQA, ChartType = "Block", ProjectID = @Model.ProjectID, ProjectName = Model.ProjectName, ccids = Model.CCIDs, Previous = "1",CurrCCId = ViewBag.CurrentCCId })" class="clsPrevious btn btn-success Available" id="btnPrevious" style="opacity: 0.65; pointer-events: none">Previous</a>
                                <a href="@Url.Action("GetBlockedChart", "UAB", new { Role = Roles.ShadowQA, ChartType = "Block", ProjectID = @Model.ProjectID, ProjectName = Model.ProjectName, ccids = Model.CCIDs, Next = "1",CurrCCId = ViewBag.CurrentCCId })" class="clsNext btn btn-success Available" id="btnNext" style="opacity: 0.65; pointer-events: none">Next</a>
                                <button id="btnBlock" type="button" class="clsbtnBlock btn btn-danger" onclick="Block()">Block</button>
                                <button id="btnBlockHistory" style="display:none" type="button" class="clsbtnBlockHistory btn btn-danger" onclick="BlockHistory()">Block History</button>
                                <button type="button" id="btnsubmit" class="btn btn-success">Save</button>
                                <button id="SubmitAndGetNext" name="SubmitAndGetNext" type="submit" value="SubmitAndGetNext" class="btn btn-success Available">Save And GetNext</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        $('.cptQtyClaim,.cptLinksClaim').on('keyup keypress change', function (e) {
            this.value = this.value.replace(/[^0-9\.]/g, '');
        });
    });
</script>