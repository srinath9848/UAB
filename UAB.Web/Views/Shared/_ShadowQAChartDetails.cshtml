@model List<UAB.DTO.ChartSummaryDTO>
@using UAB.enums
<div class="col-md-12">
    <div class="card" style="padding-left:10px;">

        @Html.HiddenFor(model => model.FirstOrDefault().CodingDTO.ClinicalCaseID, new { @class = "form-control" })
        @Html.HiddenFor(model => model.FirstOrDefault().ProjectName)
        @Html.HiddenFor(model => model.FirstOrDefault().ProjectID)
        @Html.HiddenFor(model => model.FirstOrDefault().Dx)
        @Html.HiddenFor(model => model.FirstOrDefault().QADx)
        @Html.HiddenFor(model => model.FirstOrDefault().CodingDTO.ClinicalCaseID, new { @id = "ccid" })

        @Html.Hidden("hdnShadowQADxRemarks")
        @Html.Hidden("hdnShadowQADxCodes")
        @Html.Hidden("hdnShadowQACptRemarks")
        @Html.Hidden("hdnShadowQACptCodes")

        @Html.Hidden("hdnAcceptClaim1")
        @Html.Hidden("hdnShadowQAAcceptDxRemarks")
        @Html.Hidden("hdnShadowQAAcceptDxCodes")
        @Html.Hidden("hdnShadowQAAcceptCptRemarks")
        @Html.Hidden("hdnShadowQAAcceptCptCodes")

        @Html.Hidden("hdnClaim1")
        @Html.Hidden("hdnClaim2")
        @Html.Hidden("hdnClaim3")
        @Html.Hidden("hdnClaim4")

        @Html.Hidden("hdnClaimId1")
        @Html.Hidden("hdnClaimId2")
        @Html.Hidden("hdnClaimId3")
        @Html.Hidden("hdnClaimId4")

        @Html.Hidden("hdnShadowQADxRemarks2")
        @Html.Hidden("hdnShadowQADxCodes2")
        @Html.Hidden("hdnShadowQACptRemarks2")
        @Html.Hidden("hdnShadowQACptCodes2")

        @Html.Hidden("hdnAcceptClaim2")
        @Html.Hidden("hdnShadowQAAcceptDxRemarks2")
        @Html.Hidden("hdnShadowQAAcceptDxCodes2")
        @Html.Hidden("hdnShadowQAAcceptCptRemarks2")
        @Html.Hidden("hdnShadowQAAcceptCptCodes2")

        @Html.Hidden("hdnShadowQADxRemarks3")
        @Html.Hidden("hdnShadowQADxCodes3")
        @Html.Hidden("hdnShadowQACptRemarks3")
        @Html.Hidden("hdnShadowQACptCodes3")

        @Html.Hidden("hdnAcceptClaim3")
        @Html.Hidden("hdnShadowQAAcceptDxRemarks3")
        @Html.Hidden("hdnShadowQAAcceptDxCodes3")
        @Html.Hidden("hdnShadowQAAcceptCptRemarks3")
        @Html.Hidden("hdnShadowQAAcceptCptCodes3")

        @Html.Hidden("hdnShadowQADxRemarks4")
        @Html.Hidden("hdnShadowQADxCodes4")
        @Html.Hidden("hdnShadowQACptRemarks4")
        @Html.Hidden("hdnShadowQACptCodes4")

        @Html.Hidden("hdnAcceptClaim4")
        @Html.Hidden("hdnShadowQAAcceptDxRemarks4")
        @Html.Hidden("hdnShadowQAAcceptDxCodes4")
        @Html.Hidden("hdnShadowQAAcceptCptRemarks4")
        @Html.Hidden("hdnShadowQAAcceptCptCodes4")

        @Html.Hidden("hdnShadowQAErrorTypeID1")
        @Html.Hidden("hdnShadowQAErrorTypeID2")
        @Html.Hidden("hdnShadowQAErrorTypeID3")
        @Html.Hidden("hdnShadowQAErrorTypeID4")

        @Html.HiddenFor(model => model.FirstOrDefault().CCIDs)
        <input name="hdnCurrentCCId" type="hidden" value="@(ViewBag.CurrentCCId == null ? "0" : ViewBag.CurrentCCId)" />
        <input name="hdnIsBlocked" type="hidden" value="@(ViewBag.IsBlocked == null ? "0" : "1")" />


        @{
            string Show = "display:none;";

            if (!string.IsNullOrEmpty(Model.FirstOrDefault().QAPayorText) || !string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderText)
            || !string.IsNullOrEmpty(Model.FirstOrDefault().QACPTCode) || !string.IsNullOrEmpty(Model.FirstOrDefault().QADx) ||
            !string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderFeedbackText))
                Show = "display:flex;";

        }
        <ul class="nav nav-tabs" role="tablist">
            @{
                int tabIndex = 1;
                foreach (var tabitem in Model)
                {
                    if (tabitem.ClaimId == null)
                        tabitem.ClaimId = 0;

                    var claimId = string.Format("tabIndex_{0}_ClaimId_{1}", tabIndex, tabitem.ClaimId);
                    if (tabitem.ClaimId == 0)
                    {
                        <li class="nav-item tabDiv1"> <a class="nav-link tab active show" data-toggle="tab" id="@claimId" alt="tabDiv1" href="#claim1" role="tab"><span class="hidden-sm-up"></span> <span class="hidden-xs-down tabclick">Claim @tabIndex</span></a> </li>
                    }
                    else
                    {
                        <li class="@string.Format("nav-item tabDiv{0}", tabIndex)" style="display:inherit;"> <a class="nav-link tab" data-toggle="tab" id="@claimId" alt="tabDiv2" href="@string.Format("#claim{0}", tabIndex)" role="tab"> <span class="hidden-sm-up"></span> <span class="hidden-xs-down tabclick">Claim @tabIndex</span></a></li>
                    }
                    tabIndex = tabIndex + 1;
                }
            }
        </ul>

        <div class="tab-content tabcontent-border">
            @{
                tabIndex = 1;
                foreach (var tabitem in Model)
                {
                    tabitem.TabIndex = tabIndex;
                    if (tabitem.ClaimId == null)
                        tabitem.ClaimId = 0;

                    if (tabitem.ClaimId == 0)
                    {
                        <div class="tab-pane active" id="claim1" role="tabpanel">
                            <div class="p-20" id="tabDiv1">
                                <br />
                                <div class="form-group row" style="margin-top:10px;">
                                    <label class="col-md-3 m-t-15"></label>
                                    <div class="custom-control custom-checkbox col-md-3 input-group" style="margin-left:-50px !important;" id="divChkAll_@tabIndex">
                                        <input type="checkbox" class="custom-control-input ShadowQADetails" id="chkAll_@tabIndex" onclick="CheckAllboxes('chkAll_@tabIndex')">
                                        <label class="custom-control-label" for="chkAll_@tabIndex">Accept All</label>
                                    </div>
                                    <div class="custom-control col-md-3 input-group QAComments" style="@Show margin-left:-27px !important">
                                        <label class="">QA Comments</label>
                                    </div>
                                    <div class="custom-control col-md-3 input-group ShadowQACorrectionsComments" style="@Show margin-left:-54px;">
                                        <label class="">ShadowQA Corrections</label>
                                    </div>
                                    <div class="custom-control col-md-3 input-group ShadowQACorrectionsComments" style="@Show">
                                        <label class="">ShadowQA Comments</label>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label class="col-md-3 lessWidth m-t-15">Provider</label>
                                    @{int len = ((!string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderText) && !Model.FirstOrDefault().ProviderText.Equals(Model.FirstOrDefault().QAProviderText)) ? 10 : 20);}
                                    @{string ProviderText = (Model.FirstOrDefault().ProviderText?.Length > len) ? Model.FirstOrDefault().ProviderText.Substring(0, len) + ".." : Model.FirstOrDefault().ProviderText;}
                                    @{string QAProviderText = (Model.FirstOrDefault().QAProviderText?.Length > len) ? "/" + Model.FirstOrDefault().QAProviderText.Substring(0, len) + ".." : "/" + Model.FirstOrDefault().QAProviderText;}
                                    @{string title = (!string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderText) ? Model.FirstOrDefault().ProviderText + "/" + Model.FirstOrDefault().QAProviderText : Model.FirstOrDefault().ProviderText);}
                                    @Html.DropDownListFor(model => model.FirstOrDefault().QAProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @class = "form-control CoderDetails ControlHeight", @id = string.Format("QAProviderID_{0}", tabIndex), @style = "display:none;" })

                                    <div title="@title" class="col-md-3 input-group">
                                        @{string Accepted = (string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                                        @{string Rejected = (string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

                                        <div class="form-control CoderDetails ControlHeight" style="line-height:2.5;overflow:hidden">
                                            <span style="white-space:nowrap">
                                                @if (!string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderText) && !Model.FirstOrDefault().QAProviderText.Equals(Model.FirstOrDefault().ProviderText))
                                                {
                                                    <label style="color: red;">@ProviderText</label>
                                                    <label style="color: green">@QAProviderText</label>
                                                }
                                                else
                                                {
                                                    <label style="color: green;">@ProviderText</label>
                                                }
                                            </span>
                                        </div>
                                        <div class="input-group-append ControlHeight">
                                            <span class="input-group-text AcceptRejectWidth AcceptRejectWidth_@tabIndex">
                                                &nbsp;<i id="ProviderID_@tabIndex" data="@tabIndex" class="fa fa-check-circle fa-lg AdjustAcceptReject AdjustAcceptReject_@tabIndex" aria-hidden="true"></i>
                                                &nbsp;<i id="ProviderID_@tabIndex" data="@tabIndex" class="fa fa-times-circle fa-lg AdjustReject_@tabIndex" aria-hidden="true"></i>
                                            </span>
                                        </div>
                                    </div>
                                    @{Show = (string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderRemarks) ? "visibility:hidden" : "display:flex");}
                                    <div title="@Model.FirstOrDefault().QAProviderRemarks" class="col-md-3 input-group" style="@Show">
                                        <input type="text" class="form-control QARemarks ControlHeight" disabled value="@Model.FirstOrDefault().QAProviderRemarks" />
                                    </div>
                                    @{Show = (string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderRemarks) ? "display:none" : "display:flex");}
                                    <div class="col-md-3 input-group">
                                        @Html.DropDownListFor(model => model.FirstOrDefault().ShadowQAProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @id = string.Format("ShadowQAProviderID_{0}", @tabIndex), @class = string.Format("form-control QARevised ControlHeight ProviderID_{0}", @tabIndex), @style = "display:none" })
                                        @Html.ValidationMessageFor(model => model.FirstOrDefault().ShadowQAProviderID, null, new { @class = "text-danger errMsg" })
                                    </div>
                                    <div class="col-md-3 input-group">
                                        @Html.TextBoxFor(model => model.FirstOrDefault().ShadowQAProviderRemarks, new { @style = "display:none", @class = string.Format("form-control QARevised ControlHeight ProviderID_{0}", @tabIndex), @id = string.Format("ShadowQAProviderIDRemarks_{0}", @tabIndex) })
                                        @Html.ValidationMessageFor(model => model.FirstOrDefault().ShadowQAProviderRemarks, null, new { @class = "text-danger errMsg" })
                                        <span id="validProvider_@Model.FirstOrDefault().TabIndex" class="text-danger txtdanger" style="display:none">*</span>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label class="col-md-3 lessWidth m-t-15">Payor</label>
                                    @{ len = ((!string.IsNullOrEmpty(Model.FirstOrDefault().QAPayorText) && !Model.FirstOrDefault().PayorText.Equals(Model.FirstOrDefault().QAPayorText)) ? 10 : 20);}
                                    @{string PayorText = (Model.FirstOrDefault().PayorText?.Length > len) ? Model.FirstOrDefault().PayorText.Substring(0, len) + ".." : Model.FirstOrDefault().PayorText;}
                                    @{string QAPayorText = (Model.FirstOrDefault().QAPayorText?.Length > len) ? "/" + Model.FirstOrDefault().QAPayorText.Substring(0, len) + ".." : "/" + Model.FirstOrDefault().QAPayorText;}
                                    @{title = (!string.IsNullOrEmpty(Model.FirstOrDefault().QAPayorText) ? Model.FirstOrDefault().PayorText + "/" + Model.FirstOrDefault().QAPayorText : Model.FirstOrDefault().PayorText);}
                                    @Html.DropDownListFor(model => model.FirstOrDefault().QAPayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), "--Select--", new { @class = "form-control CoderDetails ControlHeight", @id = string.Format("QAPayorID_{0}", tabIndex), @style = "display:none;" })

                                    <div title="@title" class="col-md-3 input-group">
                                        <div name="PayorText" class="form-control CoderDetails ControlHeight" style="line-height:2.5;overflow:hidden">
                                            <span style="white-space:nowrap">
                                                @if (!string.IsNullOrEmpty(Model.FirstOrDefault().QAPayorText) && !Model.FirstOrDefault().QAPayorText.Equals(Model.FirstOrDefault().PayorText))
                                                {
                                                    <label style="color: red;">@PayorText</label>
                                                    <label style="color: green">@QAPayorText</label>
                                                }
                                                else
                                                {
                                                    <label style="color: green;">@PayorText</label>
                                                }
                                            </span>
                                        </div>
                                        <div class="input-group-append ControlHeight">
                                            <span class="input-group-text AcceptRejectWidth AcceptRejectWidth_@tabIndex">
                                                &nbsp;<i id="PayorID_@tabIndex" data="@tabIndex" class="fa fa-check-circle fa-lg AdjustAcceptReject AdjustAcceptReject_@tabIndex" aria-hidden="true"></i>
                                                &nbsp;<i id="PayorID_@tabIndex" data="@tabIndex" class="fa fa-times-circle fa-lg AdjustReject_@tabIndex" aria-hidden="true"></i>
                                            </span>
                                        </div>
                                    </div>
                                    @{Show = (string.IsNullOrEmpty(Model.FirstOrDefault().QAPayorRemarks) ? "visibility:hidden" : "display:flex");}
                                    <div title="@Model.FirstOrDefault().QAPayorRemarks" class="col-md-3 input-group" style="@Show">
                                        <input type="text" class="form-control QARemarks ControlHeight" value="@Model.FirstOrDefault().QAPayorRemarks" />
                                    </div>
                                    @{Show = (string.IsNullOrEmpty(Model.FirstOrDefault().QAPayorRemarks) ? "display:none" : "display:flex");}
                                    <div class="col-md-3 input-group">
                                        @Html.DropDownListFor(model => model.FirstOrDefault().ShadowQAPayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), "--Select--", new { @id = string.Format("ShadowQAPayorID_{0}", @tabIndex), @class = string.Format("form-control QARevised ControlHeight PayorID_{0}", @tabIndex), @style = "display:none" })
                                        @Html.ValidationMessageFor(model => model.FirstOrDefault().ShadowQAPayorID, null, new { @class = "text-danger errMsg" })
                                    </div>
                                    <div class="col-md-3 input-group">
                                        @Html.TextBoxFor(model => model.FirstOrDefault().ShadowQAPayorRemarks, new { @style = "display:none", @class = string.Format("form-control QARevised ControlHeight PayorID_{0}", @tabIndex), @id = string.Format("ShadowQAPayorIDRemarks_{0}", @tabIndex) })
                                        @Html.ValidationMessageFor(model => model.FirstOrDefault().ShadowQAPayorRemarks, null, new { @class = "text-danger errMsg" })
                                        <span id="validPayor_@Model.FirstOrDefault().TabIndex" class="text-danger txtdanger" style="display:none">*</span>
                                    </div>
                                </div>

                                <div class="form-group row">
                                    <label class="col-md-3 lessWidth m-t-15">Note Title</label>
                                    <div class="col-md-3 input-group">
                                        @Html.TextBoxFor(model => model.FirstOrDefault().NoteTitle, new { @class = "form-control CoderDetails ControlHeight", @disabled = "true" })
                                    </div>
                                </div>
                                @{
                                    Dictionary<int, string> dictDxCodes = Utility.GetDxCodes(Model.FirstOrDefault().Dx);
                                    Dictionary<int, string> dictQADxCodes = Utility.GetQAOrShadowQADxCodes(Model.FirstOrDefault().QADx);
                                    Dictionary<int, string> dictQADxRemarks = Utility.GetQAOrShadowQADxRemarks(Model.FirstOrDefault().QADxRemarks);

                                    dictQADxCodes = (dictQADxCodes == null) ? new Dictionary<int, string>() : dictQADxCodes;
                                    dictQADxRemarks = (dictQADxRemarks == null) ? new Dictionary<int, string>() : dictQADxRemarks;

                                    int count = Math.Max(dictDxCodes.Count(), dictQADxCodes.Count());

                                    int totalDxCount = count + 1;

                                    Utility.AddEmptyRows(dictDxCodes, count, "NA");
                                    Utility.AddEmptyRows(dictQADxCodes, count, "");
                                    Utility.AddEmptyRows(dictQADxRemarks, count, "");
                                }
                                <div id="DivDx">
                                    @{
                                        int j = 1;
                                        int i;
                                        for (i = 0; i < count; i++)
                                        {
                                            <div class="form-group row">
                                                @if (i == 0)
                                                {
                                                    <label class="col-md-3 lessWidth m-t-15">Dx</label>
                                                }
                                                else
                                                {
                                                    <label class="col-md-3 lessWidth m-t-15"></label>
                                                }

                                                @{len = ((!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) && !(dictQADxCodes?.ElementAt(i).Value).Equals(dictDxCodes?.ElementAt(i).Value)) ? 10 : 20); }
                                                @{string Dx = (dictDxCodes.ElementAt(i).Value?.Length > len) ? dictDxCodes.ElementAt(i).Value.Substring(0, len) + ".." : dictDxCodes.ElementAt(i).Value;}
                                                @{string QADx = (dictQADxCodes?.ElementAt(i).Value?.Length > len) ? "/" + dictQADxCodes?.ElementAt(i).Value.Substring(0, len) + ".." : "/" + dictQADxCodes?.ElementAt(i).Value;}
                                                @{title = (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) ? dictDxCodes.ElementAt(i).Value + "/" + dictQADxCodes?.ElementAt(i).Value : dictDxCodes.ElementAt(i).Value);}

                                                <div title="@title" class="col-md-3 input-group">
                                                    <div class="input-group-prepend ControlHeight">
                                                        <span class="input-group-text ControlHeight AdjustSerialNumber" id="basic-addon1">@j</span>
                                                    </div>
                                                    <div class="form-control CoderDetails ControlHeight" style="line-height:2.5;overflow:hidden">
                                                        <span style="white-space:nowrap">
                                                            @if (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) && !(dictQADxCodes?.ElementAt(i).Value).Equals(dictDxCodes?.ElementAt(i).Value))
                                                            {
                                                                <label style="color: red;">@Dx</label>
                                                                <label style="color: green">@QADx</label>
                                                            }
                                                            else
                                                            {
                                                                <label style="color: green;">@Dx</label>
                                                            }
                                                        </span>
                                                    </div>
                                                    <div class="input-group-append ControlHeight">
                                                        <span class="input-group-text ControlHeight AcceptRejectWidth AcceptRejectWidth_@tabIndex">
                                                            &nbsp;<i id="Dx_@j" data="@tabIndex" class="fa fa-check-circle fa-lg AdjustAcceptReject AdjustAcceptReject_@tabIndex" aria-hidden="true"></i>
                                                            &nbsp;<i id="Dx_@j" data="@tabIndex" class="fa fa-times-circle fa-lg AdjustReject_@tabIndex" aria-hidden="true"></i>
                                                        </span>
                                                    </div>
                                                </div>
                                                @{ Show = (string.IsNullOrEmpty(dictQADxRemarks?.ElementAt(i).Value) ? "visibility:hidden" : "display:flex"); }
                                                <div title="" class="col-md-3 input-group" style="@Show">
                                                    <input type="text" class="form-control QARemarks ControlHeight" id="QADxRemarks_@j" disabled value="@dictQADxRemarks?.ElementAt(i).Value" />
                                                </div>
                                                <div class="col-md-3 input-group QADxRevised_@tabIndex Dx_@j" style="display:none;">
                                                    <div class="input-group-prepend ControlHeight">
                                                        <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                                                    </div>
                                                    @{
                                                        string QaDxVal = !string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) ? dictQADxCodes?.ElementAt(i).Value : dictDxCodes.ElementAt(i).Value;

                                                        if (dictQADxCodes?.ElementAt(i).Value == "" && !string.IsNullOrEmpty(dictDxCodes?.ElementAt(i).Value))
                                                        {
                                                            QaDxVal = dictDxCodes.ElementAt(i).Value;
                                                        }
                                                    }
                                                    <input type="hidden" class="txQADx_@j" value="@QaDxVal" />
                                                    <input type="text" id="txtDx_@j" class="form-control txtDx ControlHeight" autocomplete="off" placeholder="Code" value="@QaDxVal" />
                                                </div>
                                                <div class="col-md-3 input-group QADxRevised_@tabIndex Dx_@j" style="display:none;">
                                                    <input type="text" id="DxRemarks_@j" class="form-control ControlHeight DxRemarks_@j QADxRevised_@tabIndex Dx_@j" style="display:none;" />
                                                    <span id="validDx_@j" class="text-danger txtdanger" style="display:none">*</span>
                                                </div>
                                            </div>
                                            j = j + 1;
                                        }
                                    }

                                    <div class="form-group row">
                                        <label class="col-md-3 lessWidth m-t-15"></label>
                                        <div class="col-md-3 input-group">
                                            <div class="input-group-prepend ControlHeight">
                                                <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@totalDxCount</span>
                                            </div>
                                            <input class="form-control CoderDetails ControlHeight valid" disabled type="text" value="">
                                            <div class="input-group-append">
                                                <span class="input-group-text QACorrections ControlHeight AcceptRejectWidth AcceptRejectWidth_@tabIndex">
                                                    &nbsp;<i data="@tabIndex" class="fa fa-edit fa-lg AdjustAcceptReject" aria-hidden="true" style="visibility:hidden"></i>
                                                    &nbsp;<i id="Dx_@totalDxCount" data="@tabIndex" class="fa fa-times-circle fa-lg ignore" aria-hidden="true"></i>
                                                </span>
                                            </div>
                                        </div>
                                        <div title="" class="col-md-3 input-group" style="display:flex"></div>
                                        <div class="col-md-3 newlyDxCpt_@tabIndex QADxRevised_@tabIndex input-group Dx_@totalDxCount" style="display:none">
                                            <div class="input-group-prepend ControlHeight">
                                                <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@totalDxCount</span>
                                            </div>
                                            <input type="text" id="txtDx_@totalDxCount" onfocusout="DxFunction('txtDx_@totalDxCount')" class="form-control ControlHeight txtDx" autofocus="autofocus" autocomplete="off" placeholder="Code" />
                                        </div>
                                        <div class="col-md-3 input-group Dx_@totalDxCount" style="display:none">
                                            <input type="text" id="DxRemarks_@totalDxCount" class="form-control QADxRevised_@tabIndex ControlHeight DxRemarks_@totalDxCount Dx_@totalDxCount" onchange="removevalid('Dx_@totalDxCount')" style="display:flex;" />
                                            <span id="validDx_@totalDxCount" class="text-danger txtdanger" style="display:none">*</span>
                                        </div>
                                    </div>
                                </div>
                                @{
                                    Dictionary<int, string> dictCptCodes = Utility.GetCptCodes(Model.FirstOrDefault().CPTCode);
                                    Dictionary<int, string> dictQACptCodes = Utility.GetQAOrShadowQACptCodes(Model.FirstOrDefault().QACPTCode);
                                    Dictionary<int, string> dictQACptRemarks = Utility.GetQAOrShadowQACptRemarks(Model.FirstOrDefault().QACPTCodeRemarks);

                                    dictQACptCodes = (dictQACptCodes == null) ? new Dictionary<int, string>() : dictQACptCodes;
                                    dictQACptRemarks = (dictQACptRemarks == null) ? new Dictionary<int, string>() : dictQACptRemarks;

                                    int Cptcount = Math.Max(dictCptCodes.Count(), dictQACptCodes.Count());

                                    int totalCptCount = Cptcount + 1;

                                    Utility.AddEmptyRows(dictCptCodes, Cptcount, "NA");
                                    Utility.AddEmptyRows(dictQACptCodes, Cptcount, "");
                                    Utility.AddEmptyRows(dictQACptRemarks, Cptcount, "");
                                }
                                <div id="DivCpt">
                                    @{
                                        j = 1;
                                        for (i = 0; i < Cptcount; i++)
                                        {
                                            <div class="form-group row" id="DivCptRow_@j">
                                                @if (i == 0)
                                                {
                                                    <label class="col-md-3 lessWidth m-t-15">CPT</label>
                                                }
                                                else
                                                {
                                                    <label class="col-md-3 lessWidth m-t-15"></label>
                                                }
                                                @{ string[] coderCptcodes = dictCptCodes?.ElementAt(i).Value.Split("^");}
                                                @{ string[] qaCptcodes = dictQACptCodes?.ElementAt(i).Value.Split("^");}


                                                @if (!string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value))
                                                {
                                                    string codercptCode = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[0]);
                                                    string qacptCode = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[0]);
                                                    string color = (codercptCode != qacptCode) ? "color:blue;" : "";
                                                    string cptCode = !string.IsNullOrEmpty(codercptCode) ? codercptCode : "";
                                                    string cptCode1 = cptCode == qacptCode ? "" : codercptCode + "/";

                                                    string coderMod = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[1]);
                                                    string qaMod = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[1]);
                                                    string mod = qaMod == "null" ? "" : qaMod;
                                                    string cptMod = !string.IsNullOrEmpty(coderMod) ? coderMod : "";
                                                    string cptMod1 = cptMod == qaMod ? "" : coderMod + "/";

                                                    string coderQty = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[2]);
                                                    string qaQty = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[2]);
                                                    string cptQty = !string.IsNullOrEmpty(coderQty) ? coderQty : "";
                                                    string cptQty1 = cptQty == qaQty ? "" : coderQty + "/";

                                                    string coderLinks = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[3]);
                                                    string qaLinks = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[3]);
                                                    string linkAll = qaLinks == "null" ? "" : qaLinks;
                                                    string cptLinks = !string.IsNullOrEmpty(coderLinks) ? coderLinks : "";
                                                    string cptLinks1 = !string.IsNullOrEmpty(coderLinks) ? coderLinks + "/" : "";

                                                    string link = !string.IsNullOrEmpty(@qaLinks) || @qaLinks != "null" ? @qaLinks : "Link All";
                                                    cptLinks1 = cptLinks == link ? "" : coderLinks + "/";
                                                    <div title="Code : @cptCode1@qacptCode, Mod : @cptMod1@qaMod, Quantity : @cptQty1@qaQty, Link : @cptLinks1@link" class="col-md-3 input-group">
                                                        <div class="input-group-prepend">
                                                            <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                                                        </div>
                                                        @{
                                                            if (codercptCode == qacptCode)
                                                            {
                                                                <div class="form-control CoderDetails" style="min-width:60px;">
                                                                    <span style="color:green">@codercptCode.Replace("/", "")</span>
                                                                </div>
                                                                <div class="form-control CoderDetails">
                                                                    <span style="color:green">@coderMod.Replace("/", "")</span>
                                                                </div>
                                                                <div class="form-control CoderDetails">
                                                                    <span style="color:green">@coderQty.Replace("/", "")</span>
                                                                </div>
                                                                <div class="form-control CoderDetails">
                                                                    <span style="color:green">@cptLinks1.Replace("/", "")</span>
                                                                </div>
                                                            }
                                                            else
                                                            {
                                                                if (codercptCode == "NA")
                                                                    color = "color:fuchsia;";
                                                                <div class="form-control CoderDetails" style="min-width:60px;">
                                                                    <span style="color:green">@cptCode1.Replace("/", "")</span>
                                                                    <br />
                                                                    <span style="color:red">@qacptCode</span>
                                                                </div>
                                                                color = (coderMod != qaMod) ? "color:blue;" : "";
                                                                if (coderMod == "NA")
                                                                    color = "color:fuchsia;";
                                                                <div class="form-control CoderDetails">
                                                                    <span style="color:green">@coderMod.Replace("/", "")</span>
                                                                    <br />
                                                                    <span style="color:red">@qaMod</span>
                                                                </div>

                                                                color = (coderQty != qaQty) ? "color:blue;" : "";
                                                                if (coderQty == "NA")
                                                                    color = "color:fuchsia;";
                                                                <div class="form-control CoderDetails">
                                                                    <span style="color:green">@coderQty.Replace("/", "")</span>
                                                                    <br />
                                                                    <span style="color:red">@qaQty</span>
                                                                </div>

                                                                color = (coderLinks != qaLinks) ? "color:blue;" : "";
                                                                if (coderLinks == "NA")
                                                                    color = "color:fuchsia;";
                                                                <div class="form-control CoderDetails">
                                                                    <span style="color:green">@cptLinks1.Replace("/", "")</span><br />
                                                                    <span style="color:red">@link</span>
                                                                </div>
                                                            }
                                                        }

                                                        <div class="input-group-append">
                                                            <span class="input-group-text AcceptRejectWidth AcceptRejectWidth_@tabIndex">
                                                                &nbsp;<i id="Cpt_@j" class="fa fa-check-circle fa-lg AdjustAcceptReject AdjustAcceptReject_@tabIndex" aria-hidden="true"></i>
                                                                &nbsp;<i id="Cpt_@j" class="fa fa-times-circle fa-lg AdjustReject_@tabIndex" aria-hidden="true"></i>
                                                            </span>
                                                        </div>
                                                    </div>
                                                }
                                                else
                                                {
                                                    string cptVal = coderCptcodes[0] == "NA" ? "" : coderCptcodes[0];
                                                    string modVal1 = coderCptcodes[1] == "null" ? "" : coderCptcodes[1];
                                                    string qtyVal = coderCptcodes[2];
                                                    string linkAllVal1 = coderCptcodes[3] == "null" ? "" : coderCptcodes[3];
                                                    <div title="Code : @cptVal, Mod : @modVal1, Quantity : @qtyVal, Link : @linkAllVal1" class="col-md-3 input-group">
                                                        <div class="input-group-prepend ControlHeight">
                                                            <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                                                        </div>
                                                        <input type="text" class="form-control CoderDetails ControlHeight" disabled style="color: green;min-width: 50px;" placeholder="Code" value="@cptVal" />
                                                        <input type="text" class="form-control CoderDetails ControlHeight" disabled style="color:green;min-width: 42px;" placeholder="Mod" value="@modVal1" />
                                                        <input type="text" class="form-control CoderDetails ControlHeight" disabled style="color:green;max-width: 23px;" placeholder="Qty" value="@qtyVal" />
                                                        <input type="text" class="form-control CoderDetails ControlHeight" disabled style="color: green;" placeholder="Link All" value="@linkAllVal1" />

                                                        <div class="input-group-append ControlHeight">
                                                            <span class="input-group-text ControlHeight AcceptRejectWidth AcceptRejectWidth_@tabIndex">
                                                                &nbsp;<i id="Cpt_@j" class="fa fa-check-circle fa-lg AdjustAcceptReject AdjustAcceptReject_@tabIndex" aria-hidden="true"></i>
                                                                &nbsp;<i id="Cpt_@j" class="fa fa-times-circle fa-lg AdjustReject_@tabIndex" aria-hidden="true"></i>
                                                            </span>
                                                        </div>
                                                    </div>
                                                }

                                                @{ Show = (string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? "visibility:hidden" : "display:flex"); }
                                                <div title="" class="col-md-3 input-group" style="@Show">
                                                    <input type="text" class="form-control QARemarks ControlHeight" id="QACptRemarks_@j" disabled value="@dictQACptRemarks?.ElementAt(i).Value" />
                                                </div>
                                                <div class="col-md-3 CptlessWidth QACptRevised_@tabIndex input-group Cpt_@j" style="display:none">
                                                    <div class="input-group-prepend ControlHeight">
                                                        <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                                                    </div>
                                                    @{
                                                        string qacptCode1 = (dictQACptCodes?.ElementAt(i).Value == "" ? coderCptcodes[0] : qaCptcodes[0]);

                                                        string qaMod1 = (dictQACptCodes?.ElementAt(i).Value == "" ? coderCptcodes[1] : qaCptcodes[1]);

                                                        string qaQty1 = (dictQACptCodes?.ElementAt(i).Value == "" ? coderCptcodes[2] : qaCptcodes[2]);

                                                        string qaLinks1 = (dictQACptCodes?.ElementAt(i).Value == "" ? coderCptcodes[3] : qaCptcodes[3]);

                                                        string modVal = qaMod1 == "null" ? "" : qaMod1;
                                                        string linkAllVal = qaLinks1 == "null" ? "" : qaLinks1;
                                                    }
                                                    <input type="hidden" id="QaCptCodes_@j" value="@qacptCode1^@modVal^@qaQty1^@linkAllVal" />
                                                    <input type="text" class="form-control ControlHeight" style="min-width:50px;" id="txtCpt_@j" autocomplete="off" placeholder="Code" value="@qacptCode1" />
                                                    <input type="text" class="form-control ControlHeight" style="min-width:42px;" id="txtMod_@j" autocomplete="off" placeholder="Mod" value="@modVal" />
                                                    <input type="text" id="txtQty_@j" class="form-control ControlHeight" style="max-width:23px;" autocomplete="off" placeholder="Qty" value="@qaQty1" />
                                                    <input type="text" id="txtLinks_@j" class="form-control ControlHeight" autocomplete="off" placeholder="Link All" value="@linkAllVal" />
                                                </div>
                                                <div class="col-md-3 QACptRevised_@tabIndex input-group Cpt_@j" style="display:none">
                                                    <input type="text" id="CptRemarks_@j" class="form-control ControlHeight CptRemarks_@j Cpt_@j" />
                                                    <span id="validCpt_@j" class="text-danger txtdanger" style="display:none">*</span>
                                                </div>
                                            </div>
                                            j = j + 1;
                                        }
                                    }
                                    <div class="form-group row" id="DivCptRow_@totalCptCount">
                                        <label class="col-md-3 lessWidth m-t-15"></label>
                                        <div class="col-md-3 CptlessWidth input-group">
                                            <div class="input-group-prepend ControlHeight">
                                                <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@totalCptCount</span>
                                            </div>
                                            <input type="text" maxlength="5" style="min-width:50px;" disabled class="form-control CoderDetails ControlHeight" autocomplete="off" placeholder="Code" value="" />
                                            <input type="text" style="min-width:42px;" disabled class="form-control CoderDetails ControlHeight" autocomplete="off" placeholder="Mod" value="" />
                                            <input type="text" style="max-width:23px;" disabled class="form-control CoderDetails ControlHeight" autocomplete="off" placeholder="Qty" value="" />
                                            <input type="text" disabled class="form-control CoderDetails ControlHeight" autocomplete="off" placeholder="Link All" value="" />
                                            <div class="input-group-append ControlHeight">
                                                <span class="input-group-text AcceptRejectWidth AcceptRejectWidth_@tabIndex">
                                                    &nbsp;<i data="@tabIndex" class="fa fa-edit fa-lg AdjustAcceptReject" aria-hidden="true" style="visibility:hidden"></i>
                                                    &nbsp;<i id="Cpt_@totalCptCount" data="@tabIndex" class="fa fa-times-circle fa-lg ignore" aria-hidden="true"></i>
                                                </span>
                                            </div>
                                        </div><div title="" class="col-md-3 input-group" style="display:flex"></div>
                                        <div class="col-md-3 QACptRevised_@tabIndex newlyDxCpt_@tabIndex CptlessWidth input-group Cpt_@totalCptCount" style="display:none">
                                            <div class="input-group-prepend ControlHeight">
                                                <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@totalCptCount</span>
                                            </div>
                                            <input type="text" maxlength="5" style="min-width:50px;" class="form-control ControlHeight" id="txtCpt_@totalCptCount" autocomplete="off" placeholder="Code" value="" />
                                            <input type="text" style="min-width:42px;" class="form-control ControlHeight" id="txtMod_@totalCptCount" autocomplete="off" placeholder="Mod" value="" />
                                            <input type="text" style="max-width:23px;" class="form-control ControlHeight" id="txtQty_@totalCptCount" autocomplete="off" placeholder="Qty" value="1" />
                                            <input type="text" class="form-control ControlHeight" id="txtLinks_@totalCptCount" autocomplete="off" placeholder="Link All" onfocusout="CptFunction('txtLinks_@totalCptCount')" />
                                        </div>
                                        <div class="col-md-3 QACptRevised_@tabIndex input-group Cpt_@totalCptCount" id="CptRemarks_@i" style="display:none">
                                            <input type="text" id="CptRemarks_@totalCptCount" class="form-control ControlHeight CptRemarks_@totalCptCount Cpt_@totalCptCount" style="display:none" />
                                            <span id="validCpt_@totalCptCount" class="text-danger txtdanger" style="display:none">*</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label class="col-md-3 lessWidth m-t-15">Provider Feedback</label>

                                    @{ len = ((!string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderFeedbackText) && !Model.FirstOrDefault().ProviderFeedbackText.Equals(Model.FirstOrDefault().QAProviderFeedbackText)) ? 10 : 20);}
                                    @{string ProviderFeedbackText = (Model.FirstOrDefault().ProviderFeedbackText?.Length > len) ? Model.FirstOrDefault().ProviderFeedbackText.Substring(0, len) + ".." : Model.FirstOrDefault().ProviderFeedbackText;}
                                    @{string QAProviderFeedbackText = (Model.FirstOrDefault().QAProviderFeedbackText?.Length > len) ? "/" + Model.FirstOrDefault().QAProviderFeedbackText.Substring(0, len) + ".." : "/" + Model.FirstOrDefault().QAProviderFeedbackText;}
                                    @{title = (!string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderFeedbackText) ? Model.FirstOrDefault().ProviderFeedbackText + "/" + Model.FirstOrDefault().QAProviderFeedbackText : Model.FirstOrDefault().ProviderFeedbackText);}
                                    @Html.DropDownListFor(model => model.FirstOrDefault().QAProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), "--Select--", new { @class = "form-control CoderDetails ControlHeight", @id = string.Format("QAFeedback_{0}", tabIndex), @style = "display:none;" })

                                    <div title="@title" class="col-md-3 input-group">
                                        <div class="form-control CoderDetails ControlHeight" style="line-height:2.5;overflow:hidden">
                                            <span style="white-space:nowrap">
                                                @if (!string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderFeedbackText) && !Model.FirstOrDefault().ProviderFeedbackText.Equals(Model.FirstOrDefault().QAProviderFeedbackText))
                                                {
                                                    <label style="color: red;">@ProviderFeedbackText</label>
                                                    <label style="color:green">@QAProviderFeedbackText</label>
                                                }
                                                else
                                                {
                                                    <label style="color: green;">@ProviderFeedbackText</label>
                                                }
                                            </span>
                                        </div>
                                        <div class="input-group-append ControlHeight">
                                            <span class="input-group-text AcceptRejectWidth AcceptRejectWidth_@tabIndex">
                                                &nbsp;<i id="Feedback_@tabIndex" data="@tabIndex" class="fa fa-check-circle fa-lg AdjustAcceptReject AdjustAcceptReject_@tabIndex" aria-hidden="true"></i>
                                                &nbsp;<i id="Feedback_@tabIndex" data="@tabIndex" class="fa fa-times-circle fa-lg AdjustReject_@tabIndex" aria-hidden="true"></i>
                                            </span>
                                        </div>
                                    </div>
                                    @{Show = (string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderFeedbackRemarks) ? "visibility:hidden" : "display:flex");}
                                    <div title="@Model.FirstOrDefault().QAProviderFeedbackRemarks" class="col-md-3 input-group" style="@Show">
                                        <input type="text" class="form-control QARemarks ControlHeight" disabled value="@Model.FirstOrDefault().QAProviderFeedbackRemarks" />
                                    </div>
                                    @{Show = (string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderFeedbackRemarks) ? "display:none" : "display:flex");}
                                    <div class="col-md-3 input-group">
                                        @Html.DropDownListFor(model => model.FirstOrDefault().ShadowQAProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), "--Select--", new { @style = "display:none", @class = string.Format("form-control QARevised ControlHeight Feedback_{0}", @tabIndex), @id = string.Format("ShadowQAProviderFeedback_{0}", @tabIndex) })
                                        @Html.ValidationMessageFor(model => model.FirstOrDefault().ShadowQAProviderFeedbackID, null, new { @class = "text-danger errMsg" })
                                    </div>
                                    <div class="col-md-3 input-group">
                                        @Html.TextBoxFor(model => model.FirstOrDefault().ShadowQAProviderFeedbackRemarks, new { @style = "display:none", @class = string.Format("form-control QARevised ControlHeight Feedback_{0}", @tabIndex), @id = string.Format("ShadowQAProviderFeedbackRemarks_{0}", @tabIndex) })
                                        @Html.ValidationMessageFor(model => model.FirstOrDefault().ShadowQAProviderFeedbackRemarks, null, new { @class = "text-danger errMsg" })
                                        <span id="validFeedback_@Model.FirstOrDefault().TabIndex" class="text-danger txtdanger" style="display:none">*</span>
                                    </div>
                                </div>

                                <div class="clearfix"></div>
                                <div class="col-md-6">
                                    <div class="card">
                                        <div class="card-body">
                                            <h4 class="card-title">QA Details</h4>
                                        </div>
                                        <div class="card-body">
                                            <div class="col-12">
                                                <div class="row mb-3">
                                                    <div class="col-lg-6">
                                                        <div class="form-group row">
                                                            <label class="col-md-5 m-t-15">
                                                                Error Type
                                                            </label>
                                                            <div class="col-md-7">
                                                                @Html.DropDownListFor(model => model.FirstOrDefault().QADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), "--Select--", new { @class = "form-control ControlHeight", @readonly = "readonly", @style = "pointer-events: none;" })
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="card">
                                        <div class="card-body">
                                            <h4 class="card-title">Shadow QA Details</h4>
                                        </div>
                                        <div class="card-body">
                                            <div class="col-12">
                                                <div class="row mb-3">
                                                    <div class="col-lg-6">
                                                        <div class="form-group row">
                                                            <label class="col-md-3 m-t-15">
                                                                Error Type
                                                            </label>
                                                            <div class="col-md-7">
                                                                @Html.DropDownListFor(model => model.FirstOrDefault().ShadowQADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), "--Select--", new { @class = "form-control ControlHeight", @id = string.Format("ShadowQAErrorType_{0}", tabIndex), @onchange = "ShadowQAErrorType('" + tabIndex + "')" })
                                                                @Html.ValidationMessageFor(model => model.FirstOrDefault().ShadowQADTO.ErrorType, null, new { @class = "text-danger ErrorType", @id = string.Format("ShadowQAErrorTypeError_{0}", tabIndex) })
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-6">
                                                        <div class="form-group row">
                                                            <div class="col-md-12">
                                                                <a href="@Url.Action("GetBlockedChart", "UAB", new { Role = Roles.ShadowQA, ChartType = "Block", ProjectID = @Model.FirstOrDefault().ProjectID, ProjectName = Model.FirstOrDefault().ProjectName, ccids = Model.FirstOrDefault().CCIDs, Previous = "1",CurrCCId = ViewBag.CurrentCCId })" class="clsPrevious btn btn-success Available" id="btnPrevious" style="opacity: 0.65; pointer-events: none">Previous</a>
                                                                <a href="@Url.Action("GetBlockedChart", "UAB", new { Role = Roles.ShadowQA, ChartType = "Block", ProjectID = @Model.FirstOrDefault().ProjectID, ProjectName = Model.FirstOrDefault().ProjectName, ccids = Model.FirstOrDefault().CCIDs, Next = "1",CurrCCId = ViewBag.CurrentCCId })" class="clsNext btn btn-success Available" id="btnNext" style="opacity: 0.65; pointer-events: none">Next</a>
                                                                <button id="btnBlock" type="button" class="clsbtnBlock btn btn-danger" onclick="Block()">Block</button>
                                                                <button id="btnBlockHistory" style="display:none" type="button" class="clsbtnBlockHistory btn btn-danger" onclick="BlockHistory()">Block History</button>
                                                                <button type="button" id="btnsubmit" class="btn btn-success">Save</button>
                                                                <button id="SubmitAndGetNext" name="SubmitAndGetNext" type="submit" value="SubmitAndGetNext" class="btn btn-success Available">Save And GetNext</button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="tab-pane" id="@string.Format("claim{0}", tabIndex)" role="tabpanel">
                            <div class="p-20" id="@string.Format("tabDiv{0}", tabIndex)">
                                <partial name="_ShadowQAChartClaim" model=tabitem />
                            </div>
                        </div>
                    }
                    tabIndex = tabIndex + 1;
                }
            }

        </div>
    </div>
</div>
<style>
    .errMsg {
        font-weight: bold;
        font-size: 20px;
    }

    #sortable-1 {
        list-style-type: none;
        margin: 0;
        padding: 0;
        width: 25%;
    }

    /*     #sortable-1 li {
                                margin: 0 3px 3px 3px;
                                padding: 0.4em;
                                padding-left: 1.5em;
                                font-size: 17px;
                                height: 16px;
                            }*/

    .default {
        background: #cedc98;
        border: 1px solid #DDDDDD;
        color: #333333;
    }

    .custom-control-label:before {
        left: -35px;
    }

    .custom-control-label:after {
        left: -35px;
    }

    .custom-control {
        padding-left: 0rem;
    }

    .CoderDetails {
        width: 146px;
    }

    .ControlHeight {
        height: 32px !important;
    }

    .AdjustSerialNumber {
        max-width: 25px;
        padding-left: 5px;
    }

    .AcceptRejectWidth {
        max-width: 50px;
    }

    .AdjustAcceptReject {
        margin-left: -13px;
    }
</style>
<script src="~/dashboardassets/libs/jquery/dist/jquery.min.js"></script>
<script src="~/dashboardassets/libs/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.11/jquery.validate.unobtrusive.min.js" type="text/javascript"></script>
<script src="~/dashboardassets/extra-libs/DataTables/datatables.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        Block = function () {
            $.ajax({
                type: "GET",
                url: "@Url.Action("BlockClinicalcase", "UAB")",
                data: {"ccid": @Model.FirstOrDefault().CodingDTO.ClinicalCaseID},
                success: function (response) {
                    $("#modalContent").html(response);
                },
                failure: function (response) {
                    alert(response);
                }
            });
        };
        BlockHistory = function () {
            $.ajax({
                type: "GET",
                url: "@Url.Action("BlockHistory", "UAB")",
                data: {
                    "name": "@Model.FirstOrDefault().BlockCategory",
                    "remarks": "@Model.FirstOrDefault().BlockRemarks",
                    "createdate": "@Model.FirstOrDefault().BlockedDate"
                    },
                success: function (response) {
                    $("#modalContent").html(response);
                },
                failure: function (response) {
                    alert(response);
                }
            });
        };
});
</script>




