@model UAB.DTO.ChartSummaryDTO
@using UAB.enums
@*<div class="col-md-12">*@
<div class="card">
    <div class="card-body">
        <h4 class="card-title">
            <span>Chart ID : <label style="color: black;">@Model.CodingDTO.ClinicalCaseID&nbsp;&nbsp;&nbsp;&nbsp;</label></span>
            @if (Model.CodedBy != null)
            {
                <span>Coded by : <label style="color: black;">@Model.CodedBy&nbsp;&nbsp;&nbsp;&nbsp;</label></span>
            }
            @if (Model.QABy != null)
            {
                <span>
                    QA by : <label style="color:black;"> @Model.QABy&nbsp;&nbsp;&nbsp;&nbsp; </label>
                </span>
            }
        </h4>
    </div>
    @Html.HiddenFor(model => model.CodingDTO.ClinicalCaseID, new { @class = "form-control" })
    @Html.HiddenFor(model => model.ProjectName)
    @Html.HiddenFor(model => model.ProjectID)
    @Html.HiddenFor(model => model.Dx)
    @Html.HiddenFor(model => model.QADx)
    @Html.HiddenFor(model => model.CodingDTO.ClinicalCaseID, new { @id = "ccid" })
    @Html.Hidden("hdnShadowQADxRemarks")
    @Html.Hidden("hdnShadowQADxCodes")
    @Html.Hidden("hdnShadowQACptRemarks")
    @Html.Hidden("hdnShadowQACptCodes")


    @{
        bool isQAAgreed = false;
        string Show = "visibility:hidden";

        if (string.IsNullOrEmpty(Model.QAPayorText) && string.IsNullOrEmpty(Model.QAProviderText)
        && string.IsNullOrEmpty(Model.QACPTCode) && string.IsNullOrEmpty(Model.QADx) &&
        string.IsNullOrEmpty(Model.QAProviderFeedbackText))
            isQAAgreed = true;

        if (!string.IsNullOrEmpty(Model.QAPayorText) || !string.IsNullOrEmpty(Model.QAProviderText)
        || !string.IsNullOrEmpty(Model.QACPTCode) || !string.IsNullOrEmpty(Model.QADx) ||
        !string.IsNullOrEmpty(Model.QAProviderFeedbackText))
            Show = "display:flex";

    }
    @Html.Hidden("hdnIsQAAgreed", isQAAgreed)

    <div class="form-group row">
        <label class="col-md-3 m-t-15"></label>
        <div class="custom-control custom-checkbox col-md-2 input-group" id="divChkAll">
            <input type="checkbox" class="custom-control-input ShadowQADetails" id="chkAll">
            <label class="custom-control-label" for="chkAll">Accept All</label>
        </div>
        <div class="custom-control col-md-2 input-group QAComments" style="@Show;margin-left:-54px;">
            <label class="">QA Comments</label>
        </div>
        <div class="custom-control col-md-3 input-group ShadowQACorrectionsComments" style="display:none;margin-left:-54px;">
            <label class="">ShadowQA Corrections</label>
        </div>
        <div class="custom-control col-md-2 input-group ShadowQACorrectionsComments" style="display:none;">
            <label class="">ShadowQA Comments</label>
        </div>
    </div>
    <div class="form-group row">
        <label class="col-md-3 lessWidth m-t-15">Payor</label>
        @{int len = (!string.IsNullOrEmpty(Model.QAPayorText) ? 10 : 20); }
        @{string PayorText = (Model.PayorText?.Length > len) ? Model.PayorText.Substring(0, len) + ".." : Model.PayorText;}
        @{string QAPayorText = (Model.QAPayorText?.Length > len) ? "/" + Model.QAPayorText.Substring(0, len) + ".." : "/" + Model.QAPayorText;}
        @{string title = (!string.IsNullOrEmpty(Model.QAPayorText) ? Model.PayorText + "/" + Model.QAPayorText : Model.PayorText);}

        <div title="@title" class="col-md-3 lessWidth input-group">
            <div name="PayorText" class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
                <span style="white-space:nowrap">

                    @if (!string.IsNullOrEmpty(Model.QAPayorText))
                    {
                        <label style="color: red;">@PayorText</label>
                        <label style="color: green">@QAPayorText</label>
                    }
                    else
                    {
                        <label style="color: green;">@PayorText</label>
                    }
                </span>
            </div>
            <div class="input-group-append">
                <span class="input-group-text">
                    &nbsp;<i id="PayorID" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                    &nbsp;<i id="PayorID" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                </span>
            </div>
        </div>
        @{Show = (string.IsNullOrEmpty(Model.QAPayorRemarks) ? "visibility:hidden" : "display:flex");}
        <div title="@Model.QAPayorRemarks" class="col-md-2 input-group" style="@Show">
            <input type="text" class="form-control QARemarks" value="@Model.QAPayorRemarks" />
        </div>
        <div class="col-md-3 input-group">
            @Html.DropDownListFor(model => model.ShadowQAPayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), "--Select--", new { @id = "PayorID1", @class = "form-control QARevised", @style = "display:none" })
            @Html.ValidationMessageFor(model => model.ShadowQAPayorID, null, new { @class = "text-danger errMsg" })
        </div>
        <div class="col-md-2 input-group">
            @Html.TextBoxFor(model => model.ShadowQAPayorRemarks, new { @style = "display:none", @class = "form-control QARevised", @id = "PayorID2" })
            @Html.ValidationMessageFor(model => model.ShadowQAPayorRemarks, null, new { @class = "text-danger errMsg" })
        </div>
    </div>
    <div class="form-group row">
        <label class="col-md-3 lessWidth m-t-15">Provider</label>
        @{ len = (!string.IsNullOrEmpty(Model.QAProviderText) ? 10 : 20); }
        @{string ProviderText = (Model.ProviderText?.Length > len) ? Model.ProviderText.Substring(0, len) + ".." : Model.ProviderText;}
        @{string QAProviderText = (Model.QAProviderText?.Length > len) ? "/" + Model.QAProviderText.Substring(0, len) + ".." : "/" + Model.QAProviderText;}
        @{title = (!string.IsNullOrEmpty(Model.QAProviderText) ? Model.ProviderText + "/" + Model.QAProviderText : Model.ProviderText);}

        <div title="@title" class="col-md-3 lessWidth input-group">
            <div class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
                <span style="white-space:nowrap">
                    @if (!string.IsNullOrEmpty(Model.QAProviderText))
                    {
                        <label style="color: red;">@ProviderText</label>
                        <label style="color: green">@QAProviderText</label>
                    }
                    else
                    {
                        <label style="color: green;">@ProviderText</label>
                    }
                </span>
            </div>
            <div class="input-group-append">
                <span class="input-group-text">
                    &nbsp;<i id="ProviderID" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                    &nbsp;<i id="ProviderID" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                </span>
            </div>
        </div>
        @{Show = (string.IsNullOrEmpty(Model.QAProviderRemarks) ? "visibility:hidden" : "display:flex");}
        <div title="@Model.QAProviderRemarks" class="col-md-2 input-group" style="@Show">
            <input type="text" class="form-control QARemarks" value="@Model.QAProviderRemarks" />
        </div>

        <div class="col-md-3 input-group">
            @Html.DropDownListFor(model => model.ShadowQAProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @id = "ProviderID1", @class = "form-control QARevised", @style = "display:none" })
            @Html.ValidationMessageFor(model => model.ShadowQAProviderID, null, new { @class = "text-danger errMsg" })
        </div>
        <div class="col-md-2 input-group">
            @Html.TextBoxFor(model => model.ShadowQAProviderRemarks, new { @style = "display:none", @class = "form-control QARevised", @id = "ProviderID2" })
            @Html.ValidationMessageFor(model => model.ShadowQAProviderRemarks, null, new { @class = "text-danger errMsg" })
        </div>
    </div>
    @*<div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15">CPT</label>
            @{len = (!string.IsNullOrEmpty(Model.QACPTCode) ? 10 : 20); }
            @{string CPTCode = (Model.CPTCode?.Length > len) ? Model.CPTCode.Substring(0, len) + ".." : Model.CPTCode;}
            @{string QACPTCode = (Model.QACPTCode?.Length > len) ? "/" + Model.QACPTCode.Substring(0, len) + ".." : "/" + Model.QACPTCode;}
            @{title = (!string.IsNullOrEmpty(Model.QACPTCode) ? Model.CPTCode + "/" + Model.QACPTCode : Model.CPTCode);}

            <div title="@title" class="col-md-3 lessWidth input-group">
                <div class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
                    <span style="white-space:nowrap">
                        @if (!string.IsNullOrEmpty(Model.QACPTCode))
                        {
                            <label style="color: red;">@CPTCode</label>
                            <label style="color:green">@QACPTCode</label>
                        }
                        else
                        {
                            <label style="color: green;">@CPTCode</label>
                        }
                    </span>
                </div>
                <div class="input-group-append">
                    <span class="input-group-text">
                        &nbsp;<i id="CPTCode" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                        &nbsp;<i id="CPTCode" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                    </span>
                </div>
            </div>
            @{Show = (string.IsNullOrEmpty(Model.QACPTCodeRemarks) ? "visibility:hidden" : "display:flex");}
            <div title="@Model.QACPTCodeRemarks" class="col-md-2 input-group" style="@Show">
                <input type="text" class="form-control QARemarks" value="@Model.QACPTCodeRemarks" />
            </div>
            <div class="col-md-3 input-group">
                @Html.TextAreaFor(model => model.ShadowQACPTCode, new { @style = "display:none", @id = "CPTCode1", @class = "form-control QARevised" })
                @Html.ValidationMessageFor(model => model.ShadowQACPTCode, null, new { @class = "text-danger errMsg" })
            </div>
            <div class="col-md-2 input-group">
                @Html.TextBoxFor(model => model.ShadowQACPTCodeRemarks, new { @style = "display:none", @class = "form-control QARevised", @id = "CPTCode2" })
                @Html.ValidationMessageFor(model => model.ShadowQACPTCodeRemarks, null, new { @class = "text-danger errMsg" })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15">Mod</label>
            @{len = (!string.IsNullOrEmpty(Model.QAMod) ? 10 : 20); }
            @{string Mod = (Model.Mod?.Length > len) ? Model.Mod.Substring(0, len) + ".." : Model.Mod;}
            @{string QAMod = (Model.QAMod?.Length > len) ? "/" + Model.QAMod.Substring(0, len) + ".." : "/" + Model.QAMod;}
            @{title = (!string.IsNullOrEmpty(Model.QAMod) ? Model.Mod + "/" + Model.QAMod : Model.Mod);}

            <div title="@title" class="col-md-3 lessWidth input-group">
                <div class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
                    <span style="white-space:nowrap">
                        @if (!string.IsNullOrEmpty(Model.QAMod))
                        {
                            <label style="color: red;">@Mod</label>
                            <label style="color:green">@QAMod</label>
                        }
                        else
                        {
                            <label style="color: green;">@Mod</label>
                        }
                    </span>
                </div>
                <span class="input-group-text">
                    &nbsp;<i id="Mod" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                    &nbsp;<i id="Mod" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                </span>
            </div>
            @{Show = (string.IsNullOrEmpty(Model.QAModRemarks) ? "visibility:hidden" : "display:flex");}
            <div title="@Model.QAModRemarks" class="col-md-2 input-group" style="@Show">
                <input type="text" class="form-control QARemarks" value="@Model.QAModRemarks" />
            </div>
            <div class="col-md-3 input-group">
                @Html.TextAreaFor(model => model.ShadowQAMod, new { @style = "display:none", @class = "form-control QARevised", @id = "Mod1" })
                @Html.ValidationMessageFor(model => model.ShadowQAMod, null, new { @class = "text-danger errMsg" })
            </div>
            <div class="col-md-2 input-group">
                @Html.TextBoxFor(model => model.ShadowQAModRemarks, new { @style = "display:none", @class = "form-control QARevised", @id = "Mod2" })
                @Html.ValidationMessageFor(model => model.ShadowQAModRemarks, null, new { @class = "text-danger errMsg" })
            </div>
        </div>*@
    <div class="form-group row">
        <label class="col-md-3 lessWidth m-t-15"> Feedback to Provider</label>
        @{len = (!string.IsNullOrEmpty(Model.QAProviderFeedbackText) ? 10 : 20); }
        @{string ProviderFeedbackText = (Model.ProviderFeedbackText?.Length > len) ? Model.ProviderFeedbackText.Substring(0, len) + ".." : Model.ProviderFeedbackText;}
        @{string QAProviderFeedbackText = (Model.QAProviderFeedbackText?.Length > len) ? "/" + Model.QAProviderFeedbackText.Substring(0, len) + ".." : "/" + Model.QAProviderFeedbackText;}
        @{title = (!string.IsNullOrEmpty(Model.QAProviderFeedbackText) ? Model.ProviderFeedbackText + "/" + Model.QAProviderFeedbackText : Model.ProviderFeedbackText);}

        <div title="@title" class="col-md-3 lessWidth input-group">
            <div class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
                <span style="white-space:nowrap">

                    @if (!string.IsNullOrEmpty(Model.QAProviderFeedbackText))
                    {
                        <label style="color: red;">@ProviderFeedbackText</label>
                        <label style="color:green">@QAProviderFeedbackText</label>
                    }
                    else
                    {
                        <label style="color: green;">@ProviderFeedbackText</label>
                    }
                </span>
            </div>
            <div class="input-group-append" style="height: 38px;">
                <span class="input-group-text">
                    &nbsp;<i id="Feedback" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                    &nbsp;<i id="Feedback" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                </span>
            </div>
        </div>
        @{Show = (string.IsNullOrEmpty(Model.QAProviderFeedbackRemarks) ? "visibility:hidden" : "display:flex");}
        <div title="@Model.QAProviderFeedbackRemarks" class="col-md-2 input-group" style="@Show">
            <input type="text" class="form-control QARemarks" value="@Model.QAProviderFeedbackRemarks" />
        </div>
        <div class="col-md-3 input-group">
            @Html.DropDownListFor(model => model.ShadowQAProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), "--Select--", new { @style = "display:none", @class = "form-control QARevised", @id = "Feedback1" })
            @Html.ValidationMessageFor(model => model.ShadowQAProviderFeedbackID, null, new { @class = "text-danger errMsg" })
        </div>
        <div class="col-md-2 input-group">
            @Html.TextBoxFor(model => model.ShadowQAProviderFeedbackRemarks, new { @style = "display:none", @class = "form-control QARevised", @id = "Feedback2" })
            @Html.ValidationMessageFor(model => model.ShadowQAProviderFeedbackRemarks, null, new { @class = "text-danger errMsg" })
        </div>
    </div>
    <div class="form-group row">
        <label class="col-md-3 lessWidth m-t-15">Note Title</label>
        <div class="col-md-3">
            @Html.TextAreaFor(model => model.NoteTitle, new { @class = "form-control CoderDetails" })
        </div>
    </div>
    @{
        Dictionary<int, string> dictDxCodes = Utility.GetDxCodes(Model.Dx);
        Dictionary<int, string> dictQADxCodes = Utility.GetQAOrShadowQADxCodes(Model.QADx);
        Dictionary<int, string> dictQADxRemarks = Utility.GetQAOrShadowQADxRemarks(Model.QADxRemarks);

        dictQADxCodes = (dictQADxCodes == null) ? new Dictionary<int, string>() : dictQADxCodes;
        dictQADxRemarks = (dictQADxRemarks == null) ? new Dictionary<int, string>() : dictQADxRemarks;

        int count = Math.Max(dictDxCodes.Count(), dictQADxCodes.Count());

        int totalDxCount = count + 1;

        Utility.AddEmptyRows(dictDxCodes, count, "NA");
        Utility.AddEmptyRows(dictQADxCodes, count, "");
        Utility.AddEmptyRows(dictQADxRemarks, count, "");
    }
    <div id="DivDx">
        @{
            int j = 1;
            int i;
            for (i = 0; i < count; i++)
            {
                <div class="form-group row">
                    @if (i == 0)
                    {
                        <label class="col-md-3 lessWidth m-t-15">Dx</label>
                    }
                    else
                    {
                        <label class="col-md-3 lessWidth m-t-15"></label>
                    }

                    @{len = (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) ? 10 : 20); }
                    @{string Dx = (dictDxCodes.ElementAt(i).Value?.Length > len) ? dictDxCodes.ElementAt(i).Value.Substring(0, len) + ".." : dictDxCodes.ElementAt(i).Value;}
                    @{string QADx = (dictQADxCodes?.ElementAt(i).Value?.Length > len) ? "/" + dictQADxCodes?.ElementAt(i).Value.Substring(0, len) + ".." : "/" + dictQADxCodes?.ElementAt(i).Value;}
                    @{title = (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) ? dictDxCodes.ElementAt(i).Value + "/" + dictQADxCodes?.ElementAt(i).Value : dictDxCodes.ElementAt(i).Value);}

                    <div title="@title" class="col-md-3 lessWidth input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="basic-addon1">@j</span>
                        </div>
                        <div class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
                            <span style="white-space:nowrap">
                                @if (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value))
                                {
                                    <label style="color: red;">@Dx</label>
                                    <label style="color:green">@QADx</label>
                                }
                                else
                                {
                                    <label style="color: green;">@Dx</label>
                                }
                            </span>
                        </div>
                        <div class="input-group-append" style="height: 45px;">
                            <span class="input-group-text">
                                &nbsp;<i id="Dx_@j" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                                &nbsp;<i id="Dx_@j" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                            </span>
                        </div>
                    </div>
                    @{ Show = (string.IsNullOrEmpty(dictQADxRemarks?.ElementAt(i).Value) ? "visibility:hidden" : "display:flex"); }
                    <div title="" class="col-md-2 input-group" style="@Show">
                        <input type="text" class="form-control QARemarks" value="@dictQADxRemarks?.ElementAt(i).Value" />
                    </div>
                    <div class="col-md-3 lessWidth input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="basic-addon1">@j</span>
                        </div>
                        @{
                            string QaDxVal = !string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) ? dictQADxCodes?.ElementAt(i).Value : dictDxCodes.ElementAt(i).Value;

                            if (dictQADxCodes?.ElementAt(i).Value == "" && !string.IsNullOrEmpty(dictDxCodes?.ElementAt(i).Value))
                            {
                                QaDxVal = dictDxCodes.ElementAt(i).Value;
                            }
                        }
                        <input type="text" id="txtDx_@j" class="form-control txtDx" autocomplete="off" tabindex="@j" placeholder="Code" value="@QaDxVal" />
                    </div>
                    <div class="col-md-3 lessWidth input-group">
                        <input type="text" id="DxRemarks_@j" class="form-control DxRemarks_@j Dx_@j" style="display:none" />
                    </div>
                </div>

                j = j + 1;
            }
        }

        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15"></label>
            <div class="col-md-3 lessWidth input-group">
            </div>
            <div class="col-md-2 input-group" style="visibility:hidden;">
                <div class="input-group-append" style="height: 38px;">
                    <span class="input-group-text">
                        &nbsp;<i class="fa fa-edit fa-lg" aria-hidden="true"></i>
                        &nbsp;<i class="fa fa-edit fa-lg" aria-hidden="true"></i>
                    </span>
                </div>
            </div>
            <div class="col-md-3 lessWidth input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="basic-addon1">@totalDxCount</span>
                </div>
                <input type="text" id="txtDx_@totalDxCount" onfocusout="DxFunction('txtDx_@totalDxCount')" class="form-control txtDx" tabindex="@totalDxCount" autofocus="autofocus" autocomplete="off" placeholder="Code" />
            </div>
        </div>
    </div>
    @{
        Dictionary<int, string> dictCptCodes = Utility.GetCptCodes(Model.CPTCode);
        Dictionary<int, string> dictQACptCodes = Utility.GetQAOrShadowQACptCodes(Model.QACPTCode);
        Dictionary<int, string> dictQACptRemarks = Utility.GetQAOrShadowQACptRemarks(Model.QACPTCodeRemarks);

        dictQACptCodes = (dictQACptCodes == null) ? new Dictionary<int, string>() : dictQACptCodes;
        dictQACptRemarks = (dictQACptRemarks == null) ? new Dictionary<int, string>() : dictQACptRemarks;

        int Cptcount = Math.Max(dictCptCodes.Count(), dictQACptCodes.Count());

        int totalCptCount = Cptcount + 1;

        Utility.AddEmptyRows(dictCptCodes, count, "NA");
        Utility.AddEmptyRows(dictQACptCodes, count, "");
        Utility.AddEmptyRows(dictQACptRemarks, count, "");
    }
    <div id="DivCpt">
        @{
            j = 1;
            for (i = 0; i < Cptcount; i++)
            {

                <div class="form-group row" id="DivCptRow_@j">
                    @if (i == 0)
                    {
                        <label class="col-md-3 lessWidth m-t-15">CPT</label>
                    }
                    else
                    {
                        <label class="col-md-3 lessWidth m-t-15"></label>
                    }
                    @{ string[] coderCptcodes = dictCptCodes?.ElementAt(i).Value.Split("^");}
                    @{ string[] qaCptcodes = dictQACptCodes?.ElementAt(i).Value.Split("^");}

                    <div class="col-md-3 input-group" style="max-width:26% !important;">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="basic-addon1">@j</span>
                        </div>

                        @if (!string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value))
                        {
                            string codercptCode = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[0]);
                            string qacptCode = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[0]);
                            string color = (codercptCode != qacptCode) ? "color:blue;" : "";
                            if (codercptCode == "NA")
                                color = "color:fuchsia;";
                            <input type="text" class="form-control CoderDetails" value="@qacptCode" style="width:17px;@color" />

                            string coderMod = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[1]);
                            string qaMod = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[1]);
                            string mod = qaMod == "null" ? "" : qaMod;
                            color = (coderMod != qaMod) ? "color:blue;" : "";
                            if (coderMod == "NA")
                                color = "color:fuchsia;";
                            <input type="text" class="form-control CoderDetails" value="@mod" style="@color" />

                            string coderQty = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[2]);
                            string qaQty = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[2]);
                            color = (coderQty != qaQty) ? "color:blue;" : "";
                            if (coderQty == "NA")
                                color = "color:fuchsia;";
                            <input type="text" class="form-control CoderDetails" value="@qaQty" style="@color" />

                            string coderLinks = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[3]);
                            string qaLinks = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[3]);
                            string linkAll = qaLinks == "null" ? "" : qaLinks;
                            color = (coderLinks != qaLinks) ? "color:blue;" : "";
                            if (coderLinks == "NA")
                                color = "color:fuchsia;";
                            <input type="text" class="form-control CoderDetails" value="@linkAll" style="@color" />
                        }
                        else
                        {
                            string cptVal = coderCptcodes[0] == "NA" ? "" : coderCptcodes[0];
                            string modVal1 = coderCptcodes[1] == "null" ? "" : coderCptcodes[1];
                            string qtyVal = coderCptcodes[2];
                            string linkAllVal1 = coderCptcodes[3] == "null" ? "" : coderCptcodes[3];

                            <input type="text" class="form-control CoderDetails" style="color: green;width: 17px;" placeholder="Code" value="@cptVal" />
                            <input type="text" class="form-control CoderDetails" style="color:green;" placeholder="Mod" value="@modVal1" />
                            <input type="text" class="form-control CoderDetails" style="color:green;" placeholder="1" value="@qtyVal" />
                            <input type="text" class="form-control CoderDetails" style="color: green;" placeholder="Link All" value="@linkAllVal1" />

                        }
                        <div class="input-group-append" style="height: 45px;">
                            <span class="input-group-text">
                                &nbsp;<i id="Cpt_@j" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                                &nbsp;<i id="Cpt_@j" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                            </span>
                        </div>
                    </div>

                    @{ Show = (string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? "visibility:hidden" : "display:flex"); }
                    <div title="" class="col-md-2 input-group" style="@Show">
                        <input type="text" class="form-control QARemarks" value="@dictQACptRemarks?.ElementAt(i).Value" />
                    </div>
                    <div class="col-md-3 CptlessWidth input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="basic-addon1">@j</span>
                        </div>
                        @{
                            string qacptCode1 = (dictQACptCodes?.ElementAt(i).Value == "" ? coderCptcodes[0] : qaCptcodes[0]);

                            string qaMod1 = (dictQACptCodes?.ElementAt(i).Value == "" ? coderCptcodes[1] : qaCptcodes[1]);

                            string qaQty1 = (dictQACptCodes?.ElementAt(i).Value == "" ? coderCptcodes[2] : qaCptcodes[2]);

                            string qaLinks1 = (dictQACptCodes?.ElementAt(i).Value == "" ? coderCptcodes[3] : qaCptcodes[3]);

                            string modVal = qaMod1 == "null" ? "" : qaMod1;
                            string linkAllVal = qaLinks1 == "null" ? "" : qaLinks1;
                        }
                        <input type="text" class="form-control" id="txtCpt_@j" autocomplete="off" placeholder="Code" value="@qacptCode1" />
                        <input type="text" class="form-control" id="txtMod_@j" autocomplete="off" placeholder="Mod" value="@modVal" />
                        <input type="text" id="txtQty_@j" class="form-control" autocomplete="off" placeholder="1" value="@qaQty1" />
                        <input type="text" id="txtLinks_@j" class="form-control" autocomplete="off" placeholder="Link All" value="@linkAllVal" />
                    </div>
                    <div class="col-md-3 lessWidth input-group">
                        <input type="text" id="CptRemarks_@j" class="form-control CptRemarks_@j Cpt_@j" style="display:none" />
                    </div>
                </div>
                j = j + 1;
            }
        }
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15"></label>
            <div class="col-md-3 CptlessWidth input-group" style="visibility:hidden;max-width:26% !important;">
                <div class="input-group-append" style="height: 38px;">
                    <span class="input-group-text">
                        &nbsp;<i class="fa fa-edit fa-lg" aria-hidden="true"></i>
                        &nbsp;<i class="fa fa-edit fa-lg" aria-hidden="true"></i>
                    </span>
                </div>
            </div>
            <div class="col-md-2 input-group">
            </div>
            <div class="col-md-3 CptlessWidth input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="basic-addon1">@totalCptCount</span>
                </div>
                <input type="text" class="form-control" id="txtCpt_@totalCptCount" autofocus="autofocus" autocomplete="off" placeholder="Code" />
                <input type="text" class="form-control" id="txtMod_@totalCptCount" autocomplete="off" placeholder="Mod" />
                <input type="text" id="txtQty_@totalCptCount" class="form-control" autocomplete="off" placeholder="1" />
                <input type="text" id="txtLinks_@totalCptCount" onfocusout="CptFunction('txtLinks_@totalCptCount+')" class="form-control" autocomplete="off" placeholder="Link All" />
            </div>
        </div>
    </div>
</div>
<div class="clearfix"></div>
<div class="col-md-6">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">QA Details</h4>
        </div>
        <div class="card-body">
            <div class="col-12">
                <div class="row mb-3">
                    <div class="col-lg-6">
                        <div class="form-group row">
                            <label class="col-md-5 m-t-15">
                                Error Type
                            </label>
                            <div class="col-md-7">
                                @Html.DropDownListFor(model => model.QADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), new { @class = "form-control", @readonly = "readonly", @style = "pointer-events: none;" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="col-md-6">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">Shadow QA Details</h4>
        </div>
        <div class="card-body">
            <div class="col-12">
                <div class="row mb-3">
                    <div class="col-lg-12">
                        <div class="form-group row">
                            <label class="col-md-5 m-t-15">
                                Error Type
                            </label>
                            <div class="col-md-7">
                                @Html.DropDownListFor(model => model.ShadowQADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), "--Select--", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ShadowQADTO.ErrorType, null, new { @class = "text-danger ErrorType" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group row">
                            <div class="col-md-12">
                                <a href="@Url.Action("GetCodingBlockedCharts","UAB",new {Role=Roles.ShadowQA, ChartType= "Block", ProjectID=@Model.ProjectID, ProjectName=Model.ProjectName,ccid=Model.CodingDTO.ClinicalCaseID,plusorminus="Previous"})" class="btn btn-success Available" id="btnPrevious" style="display:none">Previous</a>
                                <a href="@Url.Action("GetCodingBlockedCharts","UAB",new {Role=Roles.ShadowQA, ChartType= "Block", ProjectID=@Model.ProjectID, ProjectName=Model.ProjectName,ccid=Model.CodingDTO.ClinicalCaseID,plusorminus="Next"})" class="btn btn-success Available" id="btnNext" style="display:none">Next</a>
                                <button id="btnBlock" type="button" class="btn btn-danger" onclick="Block()">Block</button>
                                <button id="btnBlockHistory" style="display:none" type="button" class="btn btn-danger" onclick="BlockHistory()">Block History</button>
                                <button type="submit" id="btnsubmit" class="btn btn-success">Save</button>
                                <button id="SubmitAndGetNext" name="SubmitAndGetNext" type="submit" value="SubmitAndGetNext" class="btn btn-success Available">Save And GetNext</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@*</div>*@

<style>
    .errMsg {
        font-weight: bold;
        font-size: 20px;
    }

    #sortable-1 {
        list-style-type: none;
        margin: 0;
        padding: 0;
        width: 25%;
    }

    /*     #sortable-1 li {
                    margin: 0 3px 3px 3px;
                    padding: 0.4em;
                    padding-left: 1.5em;
                    font-size: 17px;
                    height: 16px;
                }*/

    .default {
        background: #cedc98;
        border: 1px solid #DDDDDD;
        color: #333333;
    }

    .custom-control-label:before {
        left: -35px;
    }

    .custom-control-label:after {
        left: -35px;
    }

    .custom-control {
        padding-left: 0rem;
    }

    .CoderDetails {
        width: 146px;
    }
</style>
<script src="~/dashboardassets/libs/jquery/dist/jquery.min.js"></script>
<script src="~/dashboardassets/libs/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.11/jquery.validate.unobtrusive.min.js" type="text/javascript"></script>
<script src="~/dashboardassets/extra-libs/DataTables/datatables.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        Block = function () {
            $.ajax({
                type: "GET",
                url: "@Url.Action("BlockClinicalcase", "UAB")",
                data: {"ccid": @Model.CodingDTO.ClinicalCaseID},
                success: function (response) {
                    $("#modalContent").html(response);
                },
                failure: function (response) {
                    alert(response);
                }
            });
        };
        BlockHistory = function () {
            $.ajax({
                type: "GET",
                url: "@Url.Action("BlockHistory", "UAB")",
                data: {
                    "name": "@Model.BlockCategory",
                    "remarks": "@Model.BlockRemarks",
                    "createdate": "@Model.BlockedDate"
                    },
                success: function (response) {
                    $("#modalContent").html(response);
                },
                failure: function (response) {
                    alert(response);
                }
            });
        };
});
</script>