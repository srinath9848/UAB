@model UAB.DTO.ChartSummaryDTO
@using UAB.enums
<br />
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15"></label>
    <label class="col-md-3 CPTWidth m-t-15">Coder/QA</label>
    <label class="col-md-3 CPTWidth m-t-15">ShadowQA Corrections</label>
    <label class="col-md-3 lessWidth m-t-15">ShadowQA Comments</label>
    <div class="input-group-append CoderCorrections" style="visibility:hidden">
        <span class="input-group-text">
            &nbsp;<i class="fa fa-save fa-lg" aria-hidden="true"></i>
            &nbsp;<i class="fa fa-save fa-lg" aria-hidden="true"></i>
        </span>
    </div>
    <label class="col-md-3 lessWidth m-t-15">QA Comments</label>
</div>
@*<div class="form-group row">
        <div class="custom-control col-md-2 input-group QAComments">
            <label class="" style="margin-left: 207px;">Coder</label>
        </div>
        <div class="custom-control col-md-3 input-group QAComments" style="margin-left: 180px !important;">
            <label class="">ShadowQA Corrections</label>
        </div>
        <div class="custom-control col-md-2 input-group QAComments" style="margin-left: -27px;">
            <label class="">ShadowQA Comments</label>
        </div>
        <div class="custom-control col-md-2 input-group CoderComments" style="display:flex;margin-left:70px;">
            <label class="">QA Comments</label>
        </div>
    </div>*@

<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15">Provider</label>
    @{int len = (!string.IsNullOrEmpty(Model.QAProviderText) ? 10 : 20); }
    @{string ProviderText = (Model.ProviderText?.Length > len) ? Model.ProviderText.Substring(0, len) + ".." : Model.ProviderText;}
    @{string QAProviderText = (Model.QAProviderText?.Length > len) ? "/" + Model.QAProviderText.Substring(0, len) + ".." : "/" + Model.QAProviderText;}
    @{string title = (!string.IsNullOrEmpty(Model.QAProviderText) ? Model.ProviderText + "/" + Model.QAProviderText : Model.ProviderText);}
    @Html.DropDownListFor(model => model.ProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), new { @style = "display:none", @class = "form-control CoderDetails" })
    <div title="@title" class="col-md-3 CPTWidth input-group">
        <div class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
            <span style="white-space:nowrap">

                @if (!string.IsNullOrEmpty(Model.QAProviderText))
                {
                    <label style="color: red;">@ProviderText</label>
                    <label style="color: green">@QAProviderText</label>
                }
                else
                {
                    <label style="color: green;">@ProviderText</label>
                }
            </span>
        </div>
    </div>
    @{string Show = (string.IsNullOrEmpty(Model.QAProviderRemarks) ? "display:none" : "display:flex");}
    <div class="col-md-3 CPTWidth input-group" style="@Show">
        @Html.DropDownListFor(model => model.ShadowQAProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @id = "ProviderID1", @class = "form-control QARevised" })
        @Html.ValidationMessageFor(model => model.ShadowQAProviderID, null, new { @class = "text-danger errMsg" })
    </div>
    <div class="col-md-3 lessWidth input-group" style="@Show">
        @Html.TextBoxFor(model => model.ShadowQAProviderRemarks, new { @title = Model.ShadowQAProviderRemarks, @style = Show, @class = "form-control QARevised" })
        @Html.ValidationMessageFor(model => model.ShadowQAProviderRemarks, null, new { @class = "text-danger errMsg" })
    </div>
    <div class="input-group-append CoderCorrections" style="@Show">
        <span class="input-group-text">
            &nbsp;<i id="Provider" title="ProviderID1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
            &nbsp;<i id="Provider" title="ProviderID1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
        </span>
    </div>
    <div class="col-md-3 input-group CoderCorrections" style="@Show">
        @Html.TextBoxFor(model => model.QAProviderRemarks, new { @class = "form-control", @id = "RevisedProviderRemarks" })
    </div>
</div>
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15">Payor</label>
    @{len = (!string.IsNullOrEmpty(Model.QAPayorText) ? 10 : 20); }
    @{string PayorText = (Model.PayorText?.Length > len) ? Model.PayorText.Substring(0, len) + ".." : Model.PayorText;}
    @{string QAPayorText = (Model.QAPayorText?.Length > len) ? "/" + Model.QAPayorText.Substring(0, len) + ".." : "/" + Model.QAPayorText;}
    @{title = (!string.IsNullOrEmpty(Model.QAPayorText) ? Model.PayorText + "/" + Model.QAPayorText : Model.PayorText);}
    @Html.DropDownListFor(model => model.PayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), new { @style = "display:none", @class = "form-control CoderDetails" })

    <div title="@title" class="col-md-3 CPTWidth input-group">
        <div name="PayorText" class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
            <span style="white-space:nowrap">
                @if (!string.IsNullOrEmpty(Model.QAPayorText))
                {
                    <label style="color:red">@PayorText</label>
                    <label style="color:green;">@QAPayorText</label>
                }
                else
                {
                    <label style="color: green;">@PayorText</label>
                }
            </span>
        </div>
    </div>
    <!--<div class="col-md-3 lessWidth input-group">-->
    @*@{string Accepted = (string.IsNullOrEmpty(Model.QAPayorRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
        @{string Rejected = (string.IsNullOrEmpty(Model.QAPayorRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}


        @Html.DropDownListFor(model => model.PayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), new { @class = "form-control CoderDetails" })*@
    <!--<div class="input-group-append QACorrections">
            <span class="input-group-text">
                &nbsp;<i id="PayorID" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                &nbsp;<i id="PayorID" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
            </span>
        </div>
    </div>-->
    @{Show = (string.IsNullOrEmpty(Model.QAPayorRemarks) ? "display:none" : "display:flex");}
    <div class="col-md-3 CPTWidth input-group" style="@Show">
        @Html.DropDownListFor(model => model.ShadowQAPayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), "--Select--", new { @id = "PayorID1", @class = "form-control QARevised" })
        @Html.ValidationMessageFor(model => model.ShadowQAPayorID, null, new { @class = "text-danger errMsg" })
    </div>
    <div class="col-md-3 lessWidth input-group" style="@Show">
        @Html.TextBoxFor(model => model.ShadowQAPayorRemarks, new { @title = Model.ShadowQAPayorRemarks, @style = Show, @class = "form-control QARevised", @id = "PayorID2" })
        @Html.ValidationMessageFor(model => model.ShadowQAPayorRemarks, null, new { @class = "text-danger errMsg" })
    </div>
    <div class="input-group-append CoderCorrections" style="@Show">
        <span class="input-group-text">
            &nbsp;<i id="Payor" title="PayorID1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
            &nbsp;<i id="Payor" title="PayorID1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
        </span>
    </div>
    <div class="col-md-3 input-group CoderCorrections" style="@Show">
        @Html.TextBoxFor(model => model.QAPayorRemarks, new { @class = "form-control", @id = "RevisedPayorRemarks" })
    </div>
</div>
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15"> Feedback to Provider</label>

    <div title="@title" class="col-md-3 CPTWidth input-group">
        <div class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
            <span style="white-space:nowrap">
                <label style="color: green;">@Model.ProviderFeedbackText</label>
            </span>
        </div>
    </div>
    @{Show = (string.IsNullOrEmpty(Model.QAProviderFeedbackRemarks) ? "display:none" : "display:flex");}
    <div class="col-md-3 CPTWidth input-group" style="@Show">
        @Html.DropDownListFor(model => model.ShadowQAProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), "--Select--", new { @id = "Feedback1", @class = "form-control QARevised" })
        @Html.ValidationMessageFor(model => model.ShadowQAProviderFeedbackID, null, new { @class = "text-danger errMsg" })
    </div>
    <div class="col-md-3 lessWidth input-group" style="@Show">
        @Html.TextBoxFor(model => model.ShadowQAProviderFeedbackRemarks, new { @title = Model.ShadowQAProviderFeedbackRemarks, @class = "form-control QARevised", @id = "ProviderFeedbackIDRemarks2" })
        @Html.ValidationMessageFor(model => model.ShadowQAProviderFeedbackRemarks, null, new { @class = "text-danger errMsg" })
    </div>
    <div class="input-group-append CoderCorrections" style="@Show">
        <span class="input-group-text">
            &nbsp;<i id="ProviderFeedback" title="Feedback1" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
            &nbsp;<i id="ProviderFeedback" title="Feedback1" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
        </span>
    </div>
    <div class="col-md-3 input-group lessWidth" style="@Show">
        @Html.TextBoxFor(model => model.QAProviderFeedbackRemarks, new { @style = Show, @class = "form-control", @id = "RevisedProviderFeedbackRemarks" })
    </div>
</div>
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15">Note Title</label>
    <div class="col-md-3 CPTWidth">
        @Html.TextAreaFor(model => model.NoteTitle, new { @class = "form-control CoderDetails" })
    </div>
</div>
@{

    Dictionary<int, string> dictDxCodes = Utility.GetDxCodes(Model.Dx);
    Dictionary<int, string> dictQADxCodes = Utility.GetQAOrShadowQADxCodes(Model.QADx);
    Dictionary<int, string> dictQADxRemarks = Utility.GetQAOrShadowQADxRemarks(Model.QADxRemarks);
    Dictionary<int, string> dictShadowQADxCodes = Utility.GetQAOrShadowQADxCodes(Model.ShadowQADx);
    Dictionary<int, string> dictShadowQADxRemarks = Utility.GetQAOrShadowQADxRemarks(Model.ShadowQADxRemarks);

    dictQADxCodes = (dictQADxCodes == null ? new Dictionary<int, string>() : dictQADxCodes);
    dictQADxRemarks = (dictQADxRemarks == null ? new Dictionary<int, string>() : dictQADxRemarks);

    dictShadowQADxCodes = (dictShadowQADxCodes == null ? new Dictionary<int, string>() : dictShadowQADxCodes);
    dictShadowQADxRemarks = (dictShadowQADxRemarks == null ? new Dictionary<int, string>() : dictShadowQADxRemarks);

    int count = Math.Max(dictDxCodes.Count(), Math.Max(dictQADxCodes.Count(), dictShadowQADxCodes.Count()));

    int totalDxCount = count + 1;

    Utility.AddEmptyRows(dictDxCodes, count, "NA");
    Utility.AddEmptyRows(dictQADxCodes, count, "");
    Utility.AddEmptyRows(dictQADxRemarks, count, "");
    Utility.AddEmptyRows(dictShadowQADxCodes, count, "");
    Utility.AddEmptyRows(dictShadowQADxRemarks, count, "");
}

<div id="DivDx">
    @{
        int j = 1;
        int i;
        for (i = 0; i < count; i++)
        {
            <div class="form-group row">
                @if (i == 0)
                {
                    <label class="col-md-3 lessWidth m-t-15">Dx</label>
                }
                else
                {
                    <label class="col-md-3 lessWidth m-t-15"></label>
                }

                @{len = (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) ? 10 : 20); }
                @{string Dx = (dictDxCodes.ElementAt(i).Value?.Length > len) ? dictDxCodes.ElementAt(i).Value.Substring(0, len) + ".." : dictDxCodes.ElementAt(i).Value;}
                @{string QADx = (dictQADxCodes?.ElementAt(i).Value?.Length > len) ? "/" + dictQADxCodes?.ElementAt(i).Value.Substring(0, len) + ".." : "/" + dictQADxCodes?.ElementAt(i).Value;}
                @{title = (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) ? dictDxCodes.ElementAt(i).Value + "/" + dictQADxCodes?.ElementAt(i).Value : dictDxCodes.ElementAt(i).Value);}

                <div class="col-md-3 CPTWidth input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="basic-addon1">@j</span>
                    </div>
                    <div class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
                        <span style="white-space:nowrap">
                            @if (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value))
                            {
                                <label style="color: red">@Dx</label>
                                <label style="color: green">@QADx</label>
                            }
                            else
                            {
                                <label style="color: green">@Dx</label>
                            }
                        </span>
                    </div>
                </div>
                @{ Show = (string.IsNullOrEmpty(dictQADxRemarks?.ElementAt(i).Value) ? "visibility:hidden" : "display:flex"); }
                <div class="col-md-3 CPTWidth input-group" style="@Show">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="basic-addon1">@j</span>
                    </div>
                    @{
                        string ShadowQaDxVal = (string.IsNullOrEmpty(dictShadowQADxCodes?.ElementAt(i).Value)) ? dictQADxCodes?.ElementAt(i).Value : dictShadowQADxCodes?.ElementAt(i).Value;
                    }
                    <input type="text" id="txtDx_@j" class="form-control txtDx" autocomplete="off" tabindex="@i" placeholder="Code" value="@ShadowQaDxVal" />
                </div>
                <div title="" class="col-md-2 input-group" style="@Show">
                    <input type="text" class="form-control" value="@dictShadowQADxRemarks?.ElementAt(i).Value" />
                </div>
                <div class="input-group-append CoderCorrections" style="@Show">
                    <span class="input-group-text">
                        &nbsp;<i id="Dx_@j" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                        &nbsp;<i id="Dx_@j" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                    </span>
                </div>
                <div title="" class="col-md-2 input-group" style="@Show">
                    <input type="text" class="form-control QARemarks" value="@dictQADxRemarks?.ElementAt(i).Value" />
                </div>

            </div>

            j = j + 1;
        }
    }
</div>

@{
    Dictionary<int, string> dictCptCodes = Utility.GetCptCodes(Model.CPTCode);
    Dictionary<int, string> dictQACptCodes = Utility.GetQAOrShadowQACptCodes(Model.QACPTCode);
    Dictionary<int, string> dictQACptRemarks = Utility.GetQAOrShadowQACptRemarks(Model.QACPTCodeRemarks);
    Dictionary<int, string> dictShadowQACptCodes = Utility.GetQAOrShadowQACptCodes(Model.ShadowQACPTCode);
    Dictionary<int, string> dictShadowQACptRemarks = Utility.GetQAOrShadowQACptRemarks(Model.ShadowQACPTCodeRemarks);

    dictQACptCodes = (dictQACptCodes == null) ? new Dictionary<int, string>() : dictQACptCodes;
    dictQACptRemarks = (dictQACptRemarks == null) ? new Dictionary<int, string>() : dictQACptRemarks;

    dictShadowQACptCodes = (dictShadowQACptCodes == null) ? new Dictionary<int, string>() : dictShadowQACptCodes;
    dictShadowQACptRemarks = (dictShadowQACptRemarks == null) ? new Dictionary<int, string>() : dictShadowQACptRemarks;

    count = Math.Max(dictCptCodes.Count(), Math.Max(dictQACptCodes.Count(), dictShadowQACptCodes.Count()));

    Utility.AddEmptyRows(dictCptCodes, count, "NA");
    Utility.AddEmptyRows(dictQACptCodes, count, "");
    Utility.AddEmptyRows(dictQACptRemarks, count, "");
    Utility.AddEmptyRows(dictShadowQACptCodes, count, "");
    Utility.AddEmptyRows(dictShadowQACptRemarks, count, "");

}
<div id="DivCpt">
    @{
        j = 1;
        for (i = 0; i < count; i++)
        {

            <div class="form-group row" id="DivCptRow_@j">
                @if (i == 0)
                {
                    <label class="col-md-3 lessWidth m-t-15">CPT</label>
                }
                else
                {
                    <label class="col-md-3 lessWidth m-t-15"></label>
                }
                @{ string[] coderCptcodes = dictCptCodes?.ElementAt(i).Value.Split("^");}
                @{ string[] qaCptcodes = dictQACptCodes?.ElementAt(i).Value.Split("^");}


                <div class="col-md-3 input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="basic-addon1">@j</span>
                    </div>

                    @{
                        string coderModVal = coderCptcodes[1] == "null" ? "" : coderCptcodes[1];
                        string coderLinkAllVal = coderCptcodes[3] == "null" ? "" : coderCptcodes[3];

                        <input type="text" class="form-control CoderDetails" style="width: 17px;" placeholder="Code" value="@coderCptcodes[0]" />
                        <input type="text" class="form-control CoderDetails" style="" placeholder="Mod" value="@coderModVal" />
                        <input type="text" class="form-control CoderDetails" style="" placeholder="1" value="@coderCptcodes[2]" />
                        <input type="text" class="form-control CoderDetails" style="" placeholder="Link All" value="@coderLinkAllVal" />
                    }
                </div>
                @{ Show = (string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? "visibility:hidden" : "display:flex"); }
                <div class="col-md-3 CPTWidth input-group" style="@Show">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="basic-addon1">@j</span>
                    </div>

                    @{
                        string ShadowQaCptVal = "";
                        string ShadowQaModVal = "";
                        string ShadowQaQtyVal = "";
                        string ShadowQaLinkAllVal = "";
                        ShadowQaCptVal = !string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value) ? dictQACptCodes?.ElementAt(i).Value : !string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value) ? dictQACptCodes?.ElementAt(i).Value : dictCptCodes?.ElementAt(i).Value;
                        if (dictQACptCodes?.ElementAt(i).Value == "" && string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value))
                        {
                            string[] CptCodes = dictCptCodes.ElementAt(i).Value.Split("^");
                            ShadowQaCptVal = CptCodes[0];
                            ShadowQaModVal = CptCodes[1] == "null" ? "" : CptCodes[1];
                            ShadowQaQtyVal = CptCodes[2];
                            ShadowQaLinkAllVal = CptCodes[3] == "null" ? "" : CptCodes[3];
                        }
                        else
                        {
                            string[] CptCodes = ShadowQaCptVal.Split("^");
                            ShadowQaCptVal = CptCodes[0] == "NA" ? "" : CptCodes[0];
                            if (ShadowQaCptVal != "")
                            {
                                ShadowQaModVal = CptCodes[1] == "null" ? "" : CptCodes[1];
                                ShadowQaQtyVal = CptCodes[2];
                                ShadowQaLinkAllVal = CptCodes[3] == "null" ? "" : CptCodes[3];
                            }
                        }
                    }
                    <input type="text" class="form-control QARemarks" id="txtCpt_@j" autocomplete="off" placeholder="Code" value="@ShadowQaCptVal" />
                    <input type="text" class="form-control QARemarks" id="txtMod_@j" autocomplete="off" placeholder="Mod" value="@ShadowQaModVal" />
                    <input type="text" id="txtQty_@j" class="form-control QARemarks" autocomplete="off" placeholder="1" value="@ShadowQaQtyVal" />
                    <input type="text" id="txtLinks_@j" class="form-control QARemarks" autocomplete="off" placeholder="Link All" value="@ShadowQaLinkAllVal" />
                </div>
                <div title="" class="col-md-2 input-group" style="@Show">
                    <input type="text" class="form-control QACptRemarks_@j" value="@dictShadowQACptRemarks?.ElementAt(i).Value" />
                </div>
                <div class="input-group-append CoderCorrections" style="@Show">
                    <span class="input-group-text">
                        &nbsp;<i id="Cpt_@j" class="fa fa-check-circle fa-lg" aria-hidden="true"></i>
                        &nbsp;<i id="Cpt_@j" class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                    </span>
                </div>
                <div class="col-md-2 input-group" style="@Show">
                    <input type="text" class="form-control CoderDetails" value="@dictQACptRemarks?.ElementAt(i).Value" />
                </div>
            </div>
            j = j + 1;
        }
    }
</div>