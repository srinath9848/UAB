@model UAB.DTO.ChartSummaryDTO
@using UAB.enums
@{
    int tabIndex = Model.TabIndex;
    string dxClaim = "txtDx" + tabIndex + "Claim" + "_1";
    string cptClaim = "txt" + tabIndex + "Cpt" + "_1";
    string cptModClaim = "txt" + tabIndex + "mod" + "_1";
    string cptQtyClaim = "txt" + tabIndex + "qty" + "_1";
    string cptLinksClaim = "txt" + tabIndex + "links" + "_1";

    string dx2index = "dx" + tabIndex + "index";
    string Dx2Claim = "txt" + tabIndex + "Dx";
    string Div2DxRow = "Div" + tabIndex + "DxRow_1";

    string cpt2index = "cpt" + tabIndex + "index";
    string Cpt2Link = "txt" + tabIndex + "Link";
    string Div2CptRow = "Div" + tabIndex + "CptRow_1";
}
<br />
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15"></label>
    <label class="col-md-3 CPTWidth m-t-15">Coder/QA</label>
    <label class="col-md-3 CPTWidth m-t-15">ShadowQA Corrections</label>
    <label class="col-md-3 m-t-15">ShadowQA Comments</label>
    <label class="col-md-3 m-t-15">QA Comments</label>
</div>
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15">Provider</label>
    @{int len = ((!string.IsNullOrEmpty(Model.QAProviderText) && !Model.ProviderText.Equals(Model.QAProviderText)) ? 10 : 20); }
    @{string ProviderText = (Model.ProviderText?.Length > len) ? Model.ProviderText.Substring(0, len) + ".." : Model.ProviderText;}
    @{string QAProviderText = (Model.QAProviderText?.Length > len) ? "/" + Model.QAProviderText.Substring(0, len) + ".." : "/" + Model.QAProviderText;}
    @{string title = (!string.IsNullOrEmpty(Model.QAProviderText) ? Model.ProviderText + "/" + Model.QAProviderText : Model.ProviderText);}
    @Html.DropDownListFor(model => model.QAProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @class = "form-control CoderDetails ControlHeight", @id = string.Format("QAProviderID_{0}", tabIndex), @style = "display:none;" })

    <div title="@title" class="col-md-3 CPTWidth input-group">
        <div class="form-control CoderDetails ControlHeight" style="line-height:2.5;overflow:hidden">
            <span style="white-space:nowrap">
                @if (!string.IsNullOrEmpty(Model.QAProviderText) && !Model.ProviderText.Equals(Model.QAProviderText))
                {
                    <label style="color: red;">@ProviderText</label>
                    <label style="color: green">@QAProviderText</label>
                }
                else
                {
                    <label style="color: green;">@ProviderText</label>
                }
            </span>
        </div>
        @{string Show = (string.IsNullOrEmpty(Model.QAProviderRemarks) ? "display:none" : "display:flex");}

        @{string Accepted = (string.IsNullOrEmpty(Model.QAProviderRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
        @{string Rejected = (string.IsNullOrEmpty(Model.QAProviderRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}
        @if (!Model.IsCoderRebutted)
        {
            @if (Model.ShadowQAProviderText.Equals(Model.QAProviderText))
            {
                Accepted = "fa fa-check-circle fa-lg accept";
                Rejected = "fa fa-times-circle fa-lg";
                Show = "display:none";
            }
        }
        <div class="input-group-append ControlHeight" style="@Show">
            <span class="input-group-text AcceptRejectWidth">
                &nbsp;<i id="ProviderID_@Model.TabIndex" data="@tabIndex" class="@Accepted AdjustAcceptReject" aria-hidden="true"></i>
                &nbsp;<i id="ProviderID_@Model.TabIndex" data="@tabIndex" class="@Rejected AdjustReject" aria-hidden="true"></i>
            </span>
        </div>
    </div>
    <div class="col-md-3 CPTWidth input-group" style="@Show">
        @Html.DropDownListFor(model => model.ShadowQAProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @id = string.Format("ShadowQAProviderID_{0}", tabIndex), @class = "form-control QARevised ControlHeight" })
        @Html.ValidationMessageFor(model => model.ShadowQAProviderID, null, new { @class = "text-danger errMsg" })

    </div>
    <div class="col-md-3 input-group" style="@Show">
        @Html.TextBoxFor(model => model.ShadowQAProviderRemarks, new { @title = Model.ShadowQAProviderRemarks, @style = Show, @class = "form-control QARevised ControlHeight", @id = string.Format("ShadowQAProviderIDRemarks_{0}", tabIndex) })
    </div>

    <div class="col-md-3 input-group CoderCorrections" style="@Show">
        @Html.TextBoxFor(model => model.QAProviderRemarks, new { @class = "form-control ControlHeight", @id = string.Format("QAProviderIDRemarks_{0}", tabIndex) })
    </div>
</div>
@if (Model.ProjectTypename.ToUpper() != "IP")
{
    <div class="form-group row">
        <label class="col-md-3 lessWidth m-t-15">Billing Provider</label>
        @{len = ((!string.IsNullOrEmpty(Model.QABillingProviderText) && !Model.BillingProviderText.Equals(Model.QABillingProviderText)) ? 10 : 20); }
        @{string BillingProviderText = (Model.BillingProviderText?.Length > len) ? Model.BillingProviderText.Substring(0, len) + ".." : Model.BillingProviderText;}
        @{string QABillingProviderText = (Model.QABillingProviderText?.Length > len) ? "/" + Model.QABillingProviderText.Substring(0, len) + ".." : "/" + Model.QABillingProviderText;}
        @{title = (!string.IsNullOrEmpty(Model.QABillingProviderText) ? Model.BillingProviderText + "/" + Model.QABillingProviderText : Model.BillingProviderText);}
        @Html.DropDownListFor(model => model.QABillingProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @class = "form-control CoderDetails ControlHeight", @id = string.Format("QABillingProviderID_{0}", tabIndex), @style = "display:none;" })

        <div title="@title" class="col-md-3 CPTWidth input-group">
            <div name="BillingProviderText" class="form-control CoderDetails ControlHeight" style="line-height:2.5;overflow:hidden">
                <span style="white-space:nowrap">
                    @if (!string.IsNullOrEmpty(Model.QABillingProviderText) && !Model.BillingProviderText.Equals(Model.QABillingProviderText))
                    {
                        <label style="color:red">@BillingProviderText</label>
                        <label style="color:green;">@QABillingProviderText</label>
                    }
                    else
                    {
                        <label style="color: green;">@BillingProviderText</label>
                    }
                </span>
            </div>
            @{Show = (string.IsNullOrEmpty(Model.QABillingProviderRemarks) ? "display:none" : "display:flex");}

            @{ Accepted = (string.IsNullOrEmpty(Model.QABillingProviderRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
            @{ Rejected = (string.IsNullOrEmpty(Model.QABillingProviderRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}
            @if (!Model.IsCoderRebutted)
            {
                @if (Model.ShadowQABillingProviderText.Equals(Model.QABillingProviderText))
                {
                    Accepted = "fa fa-check-circle fa-lg accept";
                    Rejected = "fa fa-times-circle fa-lg";
                    Show = "display:none";
                }
            }
            <div class="input-group-append ControlHeight" style="@Show">
                <span class="input-group-text AcceptRejectWidth">
                    &nbsp;<i id="BillingProviderID_@tabIndex" data="@tabIndex" class="@Accepted AdjustAcceptReject" aria-hidden="true"></i>
                    &nbsp;<i id="BillingProviderID_@tabIndex" data="@tabIndex" class="@Rejected AdjustReject" aria-hidden="true"></i>
                </span>
            </div>
        </div>
        <div class="col-md-3 CPTWidth input-group" style="@Show">
            @Html.DropDownListFor(model => model.ShadowQABillingProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @id = string.Format("ShadowQABillingProviderID_{0}", tabIndex), @class = "form-control QARevised ControlHeight" })
        </div>
        <div class="col-md-3 input-group" style="@Show">
            @Html.TextBoxFor(model => model.ShadowQABillingProviderRemarks, new { @title = Model.ShadowQABillingProviderRemarks, @style = Show, @class = "form-control QARevised ControlHeight", @id = string.Format("ShadowQABillingProviderIDRemarks_{0}", tabIndex) })
            @Html.ValidationMessageFor(model => model.ShadowQABillingProviderRemarks, null, new { @class = "text-danger errMsg" })
        </div>

        <div class="col-md-3 input-group CoderCorrections" style="@Show">
            @Html.TextBoxFor(model => model.QABillingProviderRemarks, new { @class = "form-control ControlHeight", @id = string.Format("QABillingProviderIDRemarks_{0}", @tabIndex) })
        </div>
    </div>
}
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15">Payor</label>
    @{len = ((!string.IsNullOrEmpty(Model.QAPayorText) && !Model.PayorText.Equals(Model.QAPayorText)) ? 10 : 20); }
    @{string PayorText = (Model.PayorText?.Length > len) ? Model.PayorText.Substring(0, len) + ".." : Model.PayorText;}
    @{string QAPayorText = (Model.QAPayorText?.Length > len) ? "/" + Model.QAPayorText.Substring(0, len) + ".." : "/" + Model.QAPayorText;}
    @{title = (!string.IsNullOrEmpty(Model.QAPayorText) ? Model.PayorText + "/" + Model.QAPayorText : Model.PayorText);}
    @Html.DropDownListFor(model => model.QAPayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), "--Select--", new { @class = "form-control CoderDetails ControlHeight", @id = string.Format("QAPayorID_{0}", tabIndex), @style = "display:none;" })

    <div title="@title" class="col-md-3 CPTWidth input-group">
        <div name="PayorText" class="form-control CoderDetails ControlHeight" style="line-height:2.5;overflow:hidden">
            <span style="white-space:nowrap">
                @if (!string.IsNullOrEmpty(Model.QAPayorText) && !Model.PayorText.Equals(Model.QAPayorText))
                {
                    <label style="color:red">@PayorText</label>
                    <label style="color:green;">@QAPayorText</label>
                }
                else
                {
                    <label style="color: green;">@PayorText</label>
                }
            </span>
        </div>
        @{Show = (string.IsNullOrEmpty(Model.QAPayorRemarks) ? "display:none" : "display:flex");}

        @{ Accepted = (string.IsNullOrEmpty(Model.QAPayorRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
        @{ Rejected = (string.IsNullOrEmpty(Model.QAPayorRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}
        @if (!Model.IsCoderRebutted)
        {
            @if (Model.ShadowQAPayorText.Equals(Model.QAPayorText))
            {
                Accepted = "fa fa-check-circle fa-lg accept";
                Rejected = "fa fa-times-circle fa-lg";
                Show = "display:none";
            }
        }
        <div class="input-group-append ControlHeight" style="@Show">
            <span class="input-group-text AcceptRejectWidth">
                &nbsp;<i id="PayorID_@tabIndex" data="@tabIndex" class="@Accepted AdjustAcceptReject" aria-hidden="true"></i>
                &nbsp;<i id="PayorID_@tabIndex" data="@tabIndex" class="@Rejected AdjustReject" aria-hidden="true"></i>
            </span>
        </div>
    </div>
    <div class="col-md-3 CPTWidth input-group" style="@Show">
        @Html.DropDownListFor(model => model.ShadowQAPayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), "--Select--", new { @id = string.Format("ShadowQAPayorID_{0}", tabIndex), @class = "form-control QARevised ControlHeight" })
    </div>
    <div class="col-md-3 input-group" style="@Show">
        @Html.TextBoxFor(model => model.ShadowQAPayorRemarks, new { @title = Model.ShadowQAPayorRemarks, @style = Show, @class = "form-control QARevised ControlHeight", @id = string.Format("ShadowQAPayorIDRemarks_{0}", tabIndex) })
        @Html.ValidationMessageFor(model => model.ShadowQAPayorRemarks, null, new { @class = "text-danger errMsg" })
    </div>

    <div class="col-md-3 input-group CoderCorrections" style="@Show">
        @Html.TextBoxFor(model => model.QAPayorRemarks, new { @class = "form-control ControlHeight", @id = string.Format("QAPayorIDRemarks_{0}", @tabIndex) })
    </div>
</div>
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15">Note Title</label>
    <div class="col-md-3 CPTWidth">
        @Html.TextBoxFor(model => model.NoteTitle, new { @class = "form-control CoderDetails ControlHeight" })
    </div>
</div>
@{

    Dictionary<int, string> dictDxCodes = Utility.GetDxCodes(Model.Dx);
    Dictionary<int, string> dictQADxCodes = Utility.GetQAOrShadowQADxCodes(Model.QADx);
    Dictionary<int, string> dictQADxRemarks = Utility.GetQAOrShadowQADxRemarks(Model.QADxRemarks);
    Dictionary<int, string> dictShadowQADxCodes = Utility.GetQAOrShadowQADxCodes(Model.ShadowQADx);
    Dictionary<int, string> dictShadowQADxRemarks = Utility.GetQAOrShadowQADxRemarks(Model.ShadowQADxRemarks);

    dictQADxCodes = (dictQADxCodes == null ? new Dictionary<int, string>() : dictQADxCodes);
    dictQADxRemarks = (dictQADxRemarks == null ? new Dictionary<int, string>() : dictQADxRemarks);

    dictShadowQADxCodes = (dictShadowQADxCodes == null ? new Dictionary<int, string>() : dictShadowQADxCodes);
    dictShadowQADxRemarks = (dictShadowQADxRemarks == null ? new Dictionary<int, string>() : dictShadowQADxRemarks);

    int count = Math.Max(dictDxCodes.Count(), Math.Max(dictQADxCodes.Count(), dictShadowQADxCodes.Count()));

    int totalDxCount = count + 1;

    Utility.AddEmptyRows(dictDxCodes, count, "NA");
    Utility.AddEmptyRows(dictQADxCodes, count, "");
    Utility.AddEmptyRows(dictQADxRemarks, count, "");
    Utility.AddEmptyRows(dictShadowQADxCodes, count, "");
    Utility.AddEmptyRows(dictShadowQADxRemarks, count, "");
}

<div id="DivDx">
    @{
        int j = 1;
        int i;
        for (i = 0; i < count; i++)
        {
            <div class="form-group row">
                @if (i == 0)
                {
                    <label class="col-md-3 lessWidth m-t-15">Dx</label>
                }
                else
                {
                    <label class="col-md-3 lessWidth m-t-15"></label>
                }
                @{ Accepted = (string.IsNullOrEmpty(dictQADxRemarks?.ElementAt(i).Value) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                @{ Rejected = (string.IsNullOrEmpty(dictQADxRemarks?.ElementAt(i).Value) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}
                @{ Show = (string.IsNullOrEmpty(dictQADxRemarks?.ElementAt(i).Value) ? "display:none" : "display:flex"); }

                @{string Dx = dictDxCodes.ElementAt(i).Value;}
                @{string QADx = (dictQADxCodes?.ElementAt(i).Value?.Length > len) ? "/" + dictQADxCodes?.ElementAt(i).Value.Substring(0, len) + ".." : "/" + dictQADxCodes?.ElementAt(i).Value;}
                @{
                    string ShadowQaDxVal = !string.IsNullOrEmpty(dictShadowQADxCodes?.ElementAt(i).Value) ? dictShadowQADxCodes?.ElementAt(i).Value : !string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) ? dictQADxCodes?.ElementAt(i).Value : dictDxCodes?.ElementAt(i).Value;
                    @if (!Model.IsCoderRebutted)
                    {
                        if (QADx.Replace("/", "") == ShadowQaDxVal)
                        {
                            Accepted = "fa fa-check-circle fa-lg accept";
                            Rejected = "fa fa-times-circle fa-lg";
                            Show = "display:none";
                        }
                    }
                }
                <div class="col-md-3 CPTWidth input-group">
                    <div class="input-group-prepend ControlHeight">
                        <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                    </div>
                    <div class="form-control CoderDetails ControlHeight" style="line-height:2.5;overflow:hidden">
                        <span style="white-space:nowrap">
                            @if (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) && !dictDxCodes.ElementAt(i).Value.Equals(dictQADxCodes.ElementAt(i).Value))
                            {
                                <label style="color: red;">@Dx</label>
                                <label style="color:green">@QADx</label>
                            }
                            else
                            {
                                <label style="color: green;">@Dx</label>
                            }
                        </span>
                    </div>

                    <div class="input-group-append ControlHeight" style="@Show">
                        <span class="input-group-text ControlHeight AcceptRejectWidth">
                            &nbsp;<i id="@string.Format("DxClaim_{0}_{1}", Model.TabIndex, j)" class="@Accepted AdjustAcceptReject" aria-hidden="true"></i>
                            &nbsp;<i id="@string.Format("DxClaim_{0}_{1}", Model.TabIndex, j)" class="@Rejected" aria-hidden="true"></i>
                        </span>
                    </div>
                </div>

                <div class="col-md-3 CPTWidth input-group" style="@Show">
                    <div class="input-group-prepend ControlHeight">
                        <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                    </div>

                    <input type="text" style="@Show" id="@string.Format("txtDx{0}Claim_{1}", Model.TabIndex, j)" class="form-control txtDx ControlHeight" autocomplete="off" tabindex="@i" placeholder="Code" value="@ShadowQaDxVal" />
                    <input type="hidden" id="@string.Format("txtQADx{0}Claim_{1}", Model.TabIndex, j)" class="form-control txtDx ControlHeight" value="@dictQADxCodes?.ElementAt(i).Value" />

                </div>
                @{
                    string ShadowQaDxRemarks = !string.IsNullOrEmpty(dictShadowQADxRemarks?.ElementAt(i).Value) ? dictShadowQADxRemarks?.ElementAt(i).Value : !string.IsNullOrEmpty(dictQADxRemarks?.ElementAt(i).Value) ? dictQADxRemarks?.ElementAt(i).Value : "N/A";
                }
                <div title="" class="col-md-3 input-group">
                    <input type="text" style="@Show" id="@string.Format("ShadowQADxRemarkss_{0}_{1}", Model.TabIndex, j)" class="form-control ControlHeight" value="@ShadowQaDxRemarks" />
                </div>

                <div title="" class="col-md-3 input-group">
                    <input type="text" style="@Show" class="form-control CoderDetails ControlHeight @string.Format("QADxRemarkss_{0}_{1}", Model.TabIndex, j)" value="@dictQADxRemarks?.ElementAt(i).Value" />
                </div>

            </div>

            j = j + 1;
        }
    }
</div>

@{
    Dictionary<int, string> dictCptCodes = Utility.GetCptCodes(Model.CPTCode);
    Dictionary<int, string> dictQACptCodes = Utility.GetQAOrShadowQACptCodes(Model.QACPTCode);
    Dictionary<int, string> dictQACptRemarks = Utility.GetQAOrShadowQACptRemarks(Model.QACPTCodeRemarks);
    Dictionary<int, string> dictShadowQACptCodes = Utility.GetQAOrShadowQACptCodes(Model.ShadowQACPTCode);
    Dictionary<int, string> dictShadowQACptRemarks = Utility.GetQAOrShadowQACptRemarks(Model.ShadowQACPTCodeRemarks);

    dictQACptCodes = (dictQACptCodes == null) ? new Dictionary<int, string>() : dictQACptCodes;
    dictQACptRemarks = (dictQACptRemarks == null) ? new Dictionary<int, string>() : dictQACptRemarks;

    dictShadowQACptCodes = (dictShadowQACptCodes == null) ? new Dictionary<int, string>() : dictShadowQACptCodes;
    dictShadowQACptRemarks = (dictShadowQACptRemarks == null) ? new Dictionary<int, string>() : dictShadowQACptRemarks;

    count = Math.Max(dictCptCodes.Count(), Math.Max(dictQACptCodes.Count(), dictShadowQACptCodes.Count()));

    Utility.AddEmptyRows(dictCptCodes, count, "NA");
    Utility.AddEmptyRows(dictQACptCodes, count, "");
    Utility.AddEmptyRows(dictQACptRemarks, count, "");
    Utility.AddEmptyRows(dictShadowQACptCodes, count, "");
    Utility.AddEmptyRows(dictShadowQACptRemarks, count, "");

}
<div id="DivCpt">
    @{
        j = 1;
        for (i = 0; i < count; i++)
        {

            <div class="form-group row" id="DivCptRow_@j">
                @if (i == 0)
                {
                    <label class="col-md-3 lessWidth m-t-15">CPT</label>
                }
                else
                {
                    <label class="col-md-3 lessWidth m-t-15"></label>
                }

                @{ string[] coderCptcodes = dictCptCodes?.ElementAt(i).Value.Split("^");}
                @{ string[] qaCptcodes = dictQACptCodes?.ElementAt(i).Value.Split("^");}
                @{ string ShadowQaCpt = !string.IsNullOrEmpty(dictShadowQACptCodes?.ElementAt(i).Value) ? dictShadowQACptCodes?.ElementAt(i).Value : !string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value) ? dictQACptCodes?.ElementAt(i).Value : dictCptCodes?.ElementAt(i).Value;
                    if (ShadowQaCpt != "")
                    {
                        string[] CptCodes1 = ShadowQaCpt.Split("^");
                        ShadowQaCpt = CptCodes1[0] == "NA" ? "" : CptCodes1[0];
                    }
                }
                @{ Show = (string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? "display:none" : "display:flex"); }

                @if (!string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value))
                {
                    string codercptCode = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[0]);
                    string qacptCode = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[0]);
                    string color = (codercptCode != qacptCode) ? "color:blue;" : "";
                    if (codercptCode == "NA")
                        color = "color:fuchsia;";
                    string cptCode = !string.IsNullOrEmpty(codercptCode) ? codercptCode : "";
                    string cptCode1 = cptCode == qacptCode ? "" : codercptCode + "/";

                    string coderMod = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[1]);
                    string qaMod = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[1]);
                    string mod = qaMod == "null" ? "" : qaMod;
                    color = (coderMod != qaMod) ? "color:blue;" : "";
                    if (coderMod == "NA")
                        color = "color:fuchsia;";
                    string cptMod = !string.IsNullOrEmpty(coderMod) ? coderMod : "";
                    string cptMod1 = cptMod == qaMod ? "" : coderMod + "/";

                    string coderQty = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[2]);
                    string qaQty = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[2]);
                    color = (coderQty != qaQty) ? "color:blue;" : "";
                    if (coderQty == "NA")
                        color = "color:fuchsia;";
                    string cptQty = !string.IsNullOrEmpty(coderQty) ? coderQty : "";
                    string cptQty1 = cptQty == qaQty ? "" : coderQty + "/";

                    string coderLinks = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[3]);
                    string qaLinks = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[3]);
                    color = (coderLinks != qaLinks) ? "color:blue;" : "";
                    if (coderLinks == "NA")
                        color = "color:fuchsia;";
                    string linkAll = qaLinks == "null" ? "null" : "null";
                    string cptLinks = !string.IsNullOrEmpty(coderLinks) ? coderLinks : "";
                    string cptLinks1 = !string.IsNullOrEmpty(coderLinks) ? coderLinks + "/" : "";

                    string link = !string.IsNullOrEmpty(@qaLinks) || @qaLinks != "null" ? @qaLinks : "Link All";
                    cptLinks1 = cptLinks == link ? "" : coderLinks + "/";

                    <div title="Code : @cptCode1@qacptCode, Mod : @cptMod1@mod, Quantity : @cptQty1@qaQty, Link : @cptLinks1@link" class="col-md-3 input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                        </div>
                        @{
                            if (codercptCode == qacptCode)
                            {
                                <input type="text" style="color: green;min-width: 65px;" class="form-control CoderDetails ControlHeight" value="@cptCode" disabled="disabled">
                                <input type="text" style="color: green" class="form-control CoderDetails ControlHeight" value="@cptMod" disabled="disabled">
                                <input type="text" style="color: green" class="form-control CoderDetails ControlHeight" value="@cptQty" disabled="disabled">
                                <input type="text" style="color: green" class="form-control CoderDetails ControlHeight" value="@coderLinks" disabled="disabled">
                            }
                            else
                            {
                                if (codercptCode == "NA")
                                    color = "color:fuchsia;";
                                <div class="form-control CoderDetails" style="min-width:60px;">
                                    <span style="color:red">@cptCode1.Replace("/", "")</span>
                                    <br />
                                    <span style="color:green">@qacptCode</span>
                                </div>
                                color = (coderMod != qaMod) ? "color:blue;" : "";
                                if (coderMod == "NA")
                                    color = "color:fuchsia;";
                                <div class="form-control CoderDetails">
                                    <span style="color:red">@coderMod.Replace("/", "")</span>
                                    <br />
                                    <span style="color:green">@qaMod</span>
                                </div>

                                color = (coderQty != qaQty) ? "color:blue;" : "";
                                if (coderQty == "NA")
                                    color = "color:fuchsia;";
                                <div class="form-control CoderDetails">
                                    <span style="color:red">@coderQty.Replace("/", "")</span>
                                    <br />
                                    <span style="color:green">@qaQty</span>
                                </div>

                                color = (coderLinks != qaLinks) ? "color:blue;" : "";
                                if (coderLinks == "NA")
                                    color = "color:fuchsia;";
                                <div class="form-control CoderDetails">
                                    <span style="color:red">@coderLinks.Replace("/", "")</span><br />
                                    <span style="color:green">@linkAll</span>
                                </div>
                            }

                            if (qacptCode == ShadowQaCpt)
                            {
                                Accepted = "fa fa-check-circle fa-lg accept";
                                Rejected = "fa fa-times-circle fa-lg";
                                Show = "display:none";
                            }
                            else
                            {
                                Accepted = (string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");
                                Rejected = (string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");
                                Show = (string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? "display:none" : "display:flex");
                            }
                            if (qacptCode == "NA")
                            {
                                <input type="hidden" id="@string.Format("txt{0}QACpt_{1}", Model.TabIndex,j)" value="@qacptCode^NA^NA^NA" />
                            }
                            else
                            {
                                <input type="hidden" id="@string.Format("txt{0}QACpt_{1}", Model.TabIndex,j)" value="@qacptCode^@qaMod^@qaQty^@qaLinks" />
                            }
                        }
                        <input type="hidden" id="@string.Format("txt{0}QACpt_{1}", Model.TabIndex,j)" value="@qacptCode^@qaMod^@qaQty^@qaLinks" />
                        <div class="input-group-append CoderCorrections" style="@Show">
                            <span class="input-group-text AcceptRejectWidth">
                                &nbsp;<i id="@string.Format("Cpt_{0}_{1}", Model.TabIndex,j)" class="@Accepted AdjustAcceptReject" aria-hidden="true"></i>
                                &nbsp;<i id="@string.Format("Cpt_{0}_{1}", Model.TabIndex,j)" class="@Rejected" aria-hidden="true"></i>
                            </span>
                        </div>
                    </div>
                }
                else
                {
                    string cptVal = coderCptcodes[0] == "NA" ? "" : coderCptcodes[0];
                    string coderModVal = "";
                    string coderLinkAllVal = "";
                    string qtyVal = "";
                    if (cptVal != "")
                    {
                        coderModVal = coderCptcodes[1] == "null" ? "" : coderCptcodes[1];
                        coderLinkAllVal = coderCptcodes[3] == "null" ? "" : coderCptcodes[3];
                        cptVal = coderCptcodes[0] == "NA" ? "" : coderCptcodes[0];
                        qtyVal = coderCptcodes[2];
                    }

                    if (cptVal == ShadowQaCpt)
                    {
                        Accepted = "fa fa-check-circle fa-lg accept";
                        Rejected = "fa fa-times-circle fa-lg";
                        Show = "display:none";
                    }
                    else
                    {
                        Show = (string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? "display:none" : "display:flex");
                        Accepted = (string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");
                        Rejected = (string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");
                    }
                    <div title="Code : @cptVal, Mod : @coderModVal, Quantity : @qtyVal, Link : @coderLinkAllVal" class="col-md-3 input-group">
                        <div class="input-group-prepend ControlHeight">
                            <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                        </div>
                        <input type="text" class="form-control CoderDetails ControlHeight" style="color: green;width: 17px;" placeholder="Code" value="@cptVal" />
                        <input type="text" class="form-control CoderDetails ControlHeight" style="color:green;" placeholder="Mod" value="@coderModVal" />
                        <input type="text" class="form-control CoderDetails ControlHeight" style="color:green;" placeholder="Qty" value="@qtyVal" />
                        <input type="text" class="form-control CoderDetails ControlHeight" style="color: green;" placeholder="Link All" value="@coderLinkAllVal" />
                        <input type="hidden" id="@string.Format("txt{0}QACpt_{1}", Model.TabIndex,j)" value="@cptVal^@coderModVal^@qtyVal^@coderLinkAllVal" />
                        <div class="input-group-append CoderCorrections" style="@Show">
                            <span class="input-group-text AcceptRejectWidth">
                                &nbsp;<i id="@string.Format("Cpt_{0}_{1}", Model.TabIndex,j)" class="@Accepted AdjustAcceptReject" aria-hidden="true"></i>
                                &nbsp;<i id="@string.Format("Cpt_{0}_{1}", Model.TabIndex,j)" class="@Rejected" aria-hidden="true"></i>
                            </span>
                        </div>
                    </div>
                }

                <div class="col-md-3 CPTWidth input-group" style="@Show">
                    <div class="input-group-prepend ControlHeight">
                        <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                    </div>

                    @{
                        string ShadowQaCptVal = "";
                        string ShadowQaModVal = "";
                        string ShadowQaQtyVal = "";
                        string ShadowQaLinkAllVal = "";
                        ShadowQaCptVal = !string.IsNullOrEmpty(dictShadowQACptCodes?.ElementAt(i).Value) ? dictShadowQACptCodes?.ElementAt(i).Value : !string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value) ? dictQACptCodes?.ElementAt(i).Value : dictCptCodes?.ElementAt(i).Value;
                        if (dictQACptCodes?.ElementAt(i).Value == "" && string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value))
                        {
                            string[] CptCodes = dictCptCodes.ElementAt(i).Value.Split("^");
                            ShadowQaCptVal = CptCodes[0] == "NA" ? "" : CptCodes[0];
                            if (ShadowQaCptVal != "")
                            {
                                ShadowQaModVal = CptCodes[1] == "null" ? "" : CptCodes[1];
                                ShadowQaQtyVal = CptCodes[2];
                                ShadowQaLinkAllVal = CptCodes[3] == "null" ? "" : CptCodes[3];
                            }
                        }
                        else
                        {
                            string[] CptCodes = ShadowQaCptVal.Split("^");
                            ShadowQaCptVal = CptCodes[0] == "NA" ? "" : CptCodes[0];
                            if (ShadowQaCptVal != "")
                            {
                                ShadowQaModVal = CptCodes[1] == "null" ? "" : CptCodes[1];
                                ShadowQaQtyVal = CptCodes[2];
                                ShadowQaLinkAllVal = CptCodes[3] == "null" ? "" : CptCodes[3];
                            }
                        }
                    }
                    <input type="text" class="form-control QARemarks ControlHeight" style="min-width:48px;" id="@string.Format("txt{0}Cpt_{1}", Model.TabIndex,j)" autocomplete="off" placeholder="Code" value="@ShadowQaCptVal" />
                    <input type="text" class="form-control QARemarks ControlHeight" id="@string.Format("txt{0}mod_{1}", Model.TabIndex,j)" autocomplete="off" placeholder="Mod" value="@ShadowQaModVal" />
                    <input type="text" id="@string.Format("txt{0}qty_{1}", Model.TabIndex,j)" class="form-control QARemarks ControlHeight" style="max-width:22px;" autocomplete="off" placeholder="Qty" value="@ShadowQaQtyVal" />
                    <input type="text" id="@string.Format("txt{0}links_{1}", Model.TabIndex,j)" class="form-control QARemarks ControlHeight" autocomplete="off" placeholder="Link All" value="@ShadowQaLinkAllVal" />

                </div>
                @{
                    string ShadowQaCptRemarks = !string.IsNullOrEmpty(dictShadowQACptRemarks?.ElementAt(i).Value) ? dictShadowQACptRemarks?.ElementAt(i).Value : !string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? dictQACptRemarks?.ElementAt(i).Value : "N/A";
                }
                <div title="" class="col-md-3 input-group">
                    <input type="text" style="@Show" id="@string.Format("SQACptRemarkss_{0}_{1}", Model.TabIndex,j)" class="form-control ControlHeight QACptRemarks_@j" value="@ShadowQaCptRemarks" />
                </div>

                <div class="col-md-3 input-group">
                    <input type="text" style="@Show" class="form-control CoderDetails ControlHeight @string.Format("QACptRemarkss_{0}_{1}", Model.TabIndex,j)" value="@dictQACptRemarks?.ElementAt(i).Value" />
                </div>
            </div>
            j = j + 1;
        }
    }
</div>
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15">Provider Feedback</label>
    @{ len = ((!string.IsNullOrEmpty(Model.QAProviderFeedbackText) && !Model.ProviderFeedbackText.Equals(Model.QAProviderFeedbackText)) ? 10 : 20); }
    @{string FeedProviderText = (Model.ProviderFeedbackText?.Length > len) ? Model.ProviderFeedbackText.Substring(0, len) + ".." : Model.ProviderFeedbackText;}
    @{string QAFeedProviderText = (Model.QAProviderFeedbackText?.Length > len) ? "/" + Model.QAProviderFeedbackText.Substring(0, len) + ".." : "/" + Model.QAProviderFeedbackText;}
    @{title = (!string.IsNullOrEmpty(Model.QAProviderFeedbackText) ? Model.ProviderFeedbackText + "/" + Model.QAProviderFeedbackText : Model.ProviderFeedbackText);}

    <div title="@Model.ProviderFeedbackText" class="col-md-3 CPTWidth input-group">
        <div class="form-control CoderDetails ControlHeight" style="line-height:2.5;overflow:hidden">
            <span style="white-space:nowrap">
                @if (!string.IsNullOrEmpty(Model.QAProviderFeedbackText) && !Model.QAProviderFeedbackText.Equals(Model.ProviderFeedbackText))
                {
                    <label style="color: red;">@FeedProviderText</label>
                    <label style="color: green">@QAFeedProviderText</label>
                }
                else
                {
                    <label style="color: green;">@FeedProviderText</label>
                }
            </span>
        </div>
        @{Show = (string.IsNullOrEmpty(Model.QAProviderFeedbackRemarks) ? "display:none" : "display:flex");}
        @{ Accepted = (string.IsNullOrEmpty(Model.QAProviderFeedbackRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
        @{ Rejected = (string.IsNullOrEmpty(Model.QAProviderFeedbackRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}
        @if (!Model.IsCoderRebutted)
        {
            @if (Model.ShadowQAProviderFeedbackText.Equals(Model.QAProviderFeedbackText))
            {
                Accepted = "fa fa-check-circle fa-lg accept";
                Rejected = "fa fa-times-circle fa-lg";
                Show = "display:none";
            }
        }
        <div class="input-group-append CoderCorrections ControlHeight" style="@Show">
            <span class="input-group-text AcceptRejectWidth">
                &nbsp;<i id="Feedback_@tabIndex" data="@tabIndex" class="@Accepted AdjustAcceptReject" aria-hidden="true"></i>
                &nbsp;<i id="Feedback_@tabIndex" data="@tabIndex" class="@Rejected AdjustReject" aria-hidden="true"></i>
            </span>
        </div>
    </div>
    <input type="hidden" id="QAFeedback_@tabIndex" value="@Model.QAProviderFeedbackID" />
    @Html.DropDownListFor(model => Model.QAProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), "--Select--", new { @class = "form-control CoderDetails", @id = string.Format("QAFeedbacks_{0}", tabIndex), @style = "display:none;" })
    <div class="col-md-3 CPTWidth input-group" style="@Show">
        @if (Model.ShadowQAProviderFeedbackText != null)
        {
            @Html.DropDownListFor(model => model.ShadowQAProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), Model.ShadowQAProviderFeedbackText.Split(',')[0], new { @id = string.Format("ShadowQAProviderFeedbacks_{0}", tabIndex), @class = "form-control QARevised ControlHeight" })
        }
        else
        {
            @Html.DropDownListFor(model => model.ShadowQAProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), "--Select--", new { @id = string.Format("ShadowQAProviderFeedbacks_{0}", tabIndex), @class = "form-control QARevised ControlHeight" })
        }
        <input type="hidden" id="ShadowQAProviderFeedback_@tabIndex" value="@Model.ShadowQAProviderFeedbackID" />
    </div>
    <div class="col-md-3 input-group" style="@Show">
        @Html.TextBoxFor(model => model.ShadowQAProviderFeedbackRemarks, new { @title = Model.ShadowQAProviderFeedbackRemarks, @class = "form-control QARevised ControlHeight", @id = string.Format("ShadowQAProviderFeedbackRemarks_{0}", tabIndex) })
    </div>
    <div class="col-md-3 input-group" style="@Show">
        @Html.TextBoxFor(model => model.QAProviderFeedbackRemarks, new { @style = Show, @class = "form-control ControlHeight", @id = string.Format("QAProviderFeedbackRemarks_{0}", tabIndex) })
    </div>
</div>
<div class="clearfix"></div>
<div class="col-md-12">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">QA Details</h4>
        </div>
        <div class="card-body">
            <div class="col-12">
                <div class="row mb-3">
                    <div class="col-lg-6">
                        <div class="form-group row">
                            <label class="col-md-3 m-t-15">
                                Error Type
                            </label>
                            <div class="col-md-7" title="@Model.QAErrorTypeText">
                                @if (Model.QADTO.ErrorType != null)
                                {
                                    <input type="hidden" id="QAErrorType_@tabIndex" value="@Model.QADTO.ErrorType" />
                                    @Html.DropDownListFor(model => model.QADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), Model.QAErrorTypeText.Split(',')[0], new { @class = "form-control ControlHeight", @readonly = "readonly", @style = "pointer-events: none;", @id = string.Format("QAErrorTypes_{0}", tabIndex), @onchange = "ErrorType('" + tabIndex + "')" })
                                }
                                else
                                {
                                    @Html.DropDownListFor(model => model.QADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), "--Select--", new { @class = "form-control ControlHeight", @readonly = "readonly", @style = "pointer-events: none;", @id = string.Format("QAErrorType_{0}", tabIndex) })
                                }
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group row">
                            <div class="col-md-12">
                                <button id="btnsubmit" type="button" class="btn btn-success">Submit</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
