@model UAB.DTO.ChartSummaryDTO
@using UAB.enums
@{
    int tabIndex = Model.TabIndex;
    string dxClaim = "txtDx" + tabIndex + "Claim" + "_1";
    string cptClaim = "txt" + tabIndex + "Cpt" + "_1";
    string cptModClaim = "txt" + tabIndex + "mod" + "_1";
    string cptQtyClaim = "txt" + tabIndex + "qty" + "_1";
    string cptLinksClaim = "txt" + tabIndex + "links" + "_1";

    string dx2index = "dx" + tabIndex + "index";
    string Dx2Claim = "txt" + tabIndex + "Dx";
    string Div2DxRow = "Div" + tabIndex + "DxRow_1";

    string cpt2index = "cpt" + tabIndex + "index";
    string Cpt2Link = "txt" + tabIndex + "Link";
    string Div2CptRow = "Div" + tabIndex + "CptRow_1";
}
<br />
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15"></label>
    <label class="col-md-3 CPTWidth m-t-15">Coder/QA</label>
    <label class="col-md-3 CPTWidth m-t-15">ShadowQA Corrections</label>
    <label class="col-md-3 m-t-15">ShadowQA Comments</label>
    <label class="col-md-3 m-t-15">QA Comments</label>
</div>
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15">Provider</label>
    @{int len = (!string.IsNullOrEmpty(Model.QAProviderText) ? 10 : 20); }
    @{string ProviderText = (Model.ProviderText?.Length > len) ? Model.ProviderText.Substring(0, len) + ".." : Model.ProviderText;}
    @{string QAProviderText = (Model.QAProviderText?.Length > len) ? "/" + Model.QAProviderText.Substring(0, len) + ".." : "/" + Model.QAProviderText;}
    @{string title = (!string.IsNullOrEmpty(Model.QAProviderText) ? Model.ProviderText + "/" + Model.QAProviderText : Model.ProviderText);}
    <div title="@title" class="col-md-3 CPTWidth input-group">
        <div class="form-control CoderDetails ControlHeight" style="line-height:2.5;overflow:hidden">
            <span style="white-space:nowrap">

                @if (!string.IsNullOrEmpty(Model.QAProviderText))
                {
                    <label style="color: red;">@ProviderText</label>
                    <label style="color: green">@QAProviderText</label>
                }
                else
                {
                    <label style="color: green;">@ProviderText</label>
                }
            </span>
        </div>
    </div>
    @{string Show = (string.IsNullOrEmpty(Model.QAProviderRemarks) ? "display:none" : "display:flex");}
    <div class="col-md-3 CPTWidth input-group" style="@Show">
        @Html.DropDownListFor(model => model.ShadowQAProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), "--Select--", new { @id = "ProviderID1", @class = "form-control QARevised ControlHeight" })
        @Html.ValidationMessageFor(model => model.ShadowQAProviderID, null, new { @class = "text-danger errMsg" })
        @{string Accepted = (string.IsNullOrEmpty(Model.QAProviderRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
        @{string Rejected = (string.IsNullOrEmpty(Model.QAProviderRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

        <div class="input-group-append ControlHeight" style="@Show">
            <span class="input-group-text AcceptRejectWidth_@tabIndex">
                &nbsp;<i id="ProviderID_@Model.TabIndex" data="@tabIndex" class="@Accepted AdjustAcceptReject_@tabIndex" aria-hidden="true"></i>
                &nbsp;<i id="ProviderID_@Model.TabIndex" data="@tabIndex" class="@Rejected AdjustReject_@tabIndex" aria-hidden="true"></i>
            </span>
        </div>
    </div>
    <div class="col-md-3 input-group" style="@Show">
        @Html.TextBoxFor(model => model.ShadowQAProviderRemarks, new { @title = Model.ShadowQAProviderRemarks, @style = Show, @class = "form-control QARevised ControlHeight" })
    </div>

    <div class="col-md-3 input-group CoderCorrections" style="@Show">
        @Html.TextBoxFor(model => model.QAProviderRemarks, new { @class = "form-control ControlHeight", @id = "RevisedProviderRemarks" })
    </div>
</div>
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15">Payor</label>
    @{len = (!string.IsNullOrEmpty(Model.QAPayorText) ? 10 : 20); }
    @{string PayorText = (Model.PayorText?.Length > len) ? Model.PayorText.Substring(0, len) + ".." : Model.PayorText;}
    @{string QAPayorText = (Model.QAPayorText?.Length > len) ? "/" + Model.QAPayorText.Substring(0, len) + ".." : "/" + Model.QAPayorText;}
    @{title = (!string.IsNullOrEmpty(Model.QAPayorText) ? Model.PayorText + "/" + Model.QAPayorText : Model.PayorText);}

    <div title="@title" class="col-md-3 CPTWidth input-group">
        <div name="PayorText" class="form-control CoderDetails ControlHeight" style="line-height:2.5;overflow:hidden">
            <span style="white-space:nowrap">
                @if (!string.IsNullOrEmpty(Model.QAPayorText))
                {
                    <label style="color:red">@PayorText</label>
                    <label style="color:green;">@QAPayorText</label>
                }
                else
                {
                    <label style="color: green;">@PayorText</label>
                }
            </span>
        </div>
    </div>
    @{Show = (string.IsNullOrEmpty(Model.QAPayorRemarks) ? "display:none" : "display:flex");}
    <div class="col-md-3 CPTWidth input-group" style="@Show">
        @Html.DropDownListFor(model => model.ShadowQAPayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), "--Select--", new { @id = "PayorID1", @class = "form-control QARevised ControlHeight" })
        @{ Accepted = (string.IsNullOrEmpty(Model.QAPayorRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
        @{ Rejected = (string.IsNullOrEmpty(Model.QAPayorRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

        <div class="input-group-append ControlHeight" style="@Show">
            <span class="input-group-text AcceptRejectWidth_@tabIndex">
                &nbsp;<i id="PayorID_@tabIndex" data="@tabIndex" class="@Accepted AdjustAcceptReject_@tabIndex" aria-hidden="true"></i>
                &nbsp;<i id="PayorID_@tabIndex" data="@tabIndex" class="@Rejected AdjustReject_@tabIndex" aria-hidden="true"></i>
            </span>
        </div>
    </div>

    <div class="col-md-3 input-group" style="@Show">
        @Html.TextBoxFor(model => model.ShadowQAPayorRemarks, new { @title = Model.ShadowQAPayorRemarks, @style = Show, @class = "form-control QARevised ControlHeight", @id = "PayorID2" })
        @Html.ValidationMessageFor(model => model.ShadowQAPayorRemarks, null, new { @class = "text-danger errMsg" })
    </div>

    <div class="col-md-3 input-group CoderCorrections" style="@Show">
        @Html.TextBoxFor(model => model.QAPayorRemarks, new { @class = "form-control ControlHeight", @id = "RevisedPayorRemarks" })
    </div>
</div>
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15">Note Title</label>
    <div class="col-md-3 CPTWidth">
        @Html.TextBoxFor(model => model.NoteTitle, new { @class = "form-control CoderDetails ControlHeight" })
    </div>
</div>
@{

    Dictionary<int, string> dictDxCodes = Utility.GetDxCodes(Model.Dx);
    Dictionary<int, string> dictQADxCodes = Utility.GetQAOrShadowQADxCodes(Model.QADx);
    Dictionary<int, string> dictQADxRemarks = Utility.GetQAOrShadowQADxRemarks(Model.QADxRemarks);
    Dictionary<int, string> dictShadowQADxCodes = Utility.GetQAOrShadowQADxCodes(Model.ShadowQADx);
    Dictionary<int, string> dictShadowQADxRemarks = Utility.GetQAOrShadowQADxRemarks(Model.ShadowQADxRemarks);

    dictQADxCodes = (dictQADxCodes == null ? new Dictionary<int, string>() : dictQADxCodes);
    dictQADxRemarks = (dictQADxRemarks == null ? new Dictionary<int, string>() : dictQADxRemarks);

    dictShadowQADxCodes = (dictShadowQADxCodes == null ? new Dictionary<int, string>() : dictShadowQADxCodes);
    dictShadowQADxRemarks = (dictShadowQADxRemarks == null ? new Dictionary<int, string>() : dictShadowQADxRemarks);

    int count = Math.Max(dictDxCodes.Count(), Math.Max(dictQADxCodes.Count(), dictShadowQADxCodes.Count()));

    int totalDxCount = count + 1;

    Utility.AddEmptyRows(dictDxCodes, count, "NA");
    Utility.AddEmptyRows(dictQADxCodes, count, "");
    Utility.AddEmptyRows(dictQADxRemarks, count, "");
    Utility.AddEmptyRows(dictShadowQADxCodes, count, "");
    Utility.AddEmptyRows(dictShadowQADxRemarks, count, "");
}

<div id="DivDx">
    @{
        int j = 1;
        int i;
        for (i = 0; i < count; i++)
        {
        <div class="form-group row">
            @if (i == 0)
            {
                <label class="col-md-3 lessWidth m-t-15">Dx</label>
            }
            else
            {
                <label class="col-md-3 lessWidth m-t-15"></label>
            }

            @{len = (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) ? 10 : 20); }
            @{string Dx = (dictDxCodes.ElementAt(i).Value?.Length > len) ? dictDxCodes.ElementAt(i).Value.Substring(0, len) + ".." : dictDxCodes.ElementAt(i).Value;}
            @{string QADx = (dictQADxCodes?.ElementAt(i).Value?.Length > len) ? "/" + dictQADxCodes?.ElementAt(i).Value.Substring(0, len) + ".." : "/" + dictQADxCodes?.ElementAt(i).Value;}
            @{title = (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) ? dictDxCodes.ElementAt(i).Value + "/" + dictQADxCodes?.ElementAt(i).Value : dictDxCodes.ElementAt(i).Value);}

            <div title="@title" class="col-md-3 CPTWidth input-group">
                <div class="input-group-prepend ControlHeight">
                    <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                </div>
                <div class="form-control CoderDetails ControlHeight" style="line-height:2.5;overflow:hidden">
                    <span style="white-space:nowrap">
                        @if (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value))
                        {
                            <label style="color: red">@Dx</label>
                            <label style="color: green">@QADx</label>
                        }
                        else
                        {
                            <label style="color: green">@Dx</label>
                        }
                    </span>
                </div>
            </div>
            @{ Accepted = (string.IsNullOrEmpty(dictQADxRemarks?.ElementAt(i).Value) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
            @{ Rejected = (string.IsNullOrEmpty(dictQADxRemarks?.ElementAt(i).Value) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

            @{ Show = (string.IsNullOrEmpty(dictQADxRemarks?.ElementAt(i).Value) ? "visibility:hidden" : "display:flex"); }
            <div class="col-md-3 CPTWidth input-group" style="@Show">
                <div class="input-group-prepend ControlHeight">
                    <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                </div>
                @{
                    string ShadowQaDxVal = (string.IsNullOrEmpty(dictShadowQADxCodes?.ElementAt(i).Value)) ? dictQADxCodes?.ElementAt(i).Value : dictShadowQADxCodes?.ElementAt(i).Value;
                }
                <input type="text" id="@string.Format("txtDx{0}Claim_{1}", Model.TabIndex, j)" class="form-control txtDx ControlHeight" autocomplete="off" tabindex="@i" placeholder="Code" value="@ShadowQaDxVal" />
                <div class="input-group-append ControlHeight">
                    <span class="input-group-text ControlHeight AcceptRejectWidth">
                        &nbsp;<i id="@string.Format("DxClaim_{0}_{1}", Model.TabIndex, j)" class="@Accepted AdjustAcceptReject" aria-hidden="true"></i>
                        &nbsp;<i id="@string.Format("DxClaim_{0}_{1}", Model.TabIndex, j)" class="@Rejected" aria-hidden="true"></i>
                    </span>
                </div>
            </div>
            <div title="" class="col-md-3 input-group" style="@Show">
                <input type="text" id="@string.Format("ShadowQADxRemarkss_{0}_{1}", Model.TabIndex, j)" class="form-control ControlHeight" value="@dictShadowQADxRemarks?.ElementAt(i).Value" />
            </div>

            <div title="" class="col-md-3 input-group" style="@Show">
                <input type="text" class="form-control CoderDetails ControlHeight" value="@dictQADxRemarks?.ElementAt(i).Value" />
            </div>

        </div>

            j = j + 1;
        }
    }
</div>

@{
    Dictionary<int, string> dictCptCodes = Utility.GetCptCodes(Model.CPTCode);
    Dictionary<int, string> dictQACptCodes = Utility.GetQAOrShadowQACptCodes(Model.QACPTCode);
    Dictionary<int, string> dictQACptRemarks = Utility.GetQAOrShadowQACptRemarks(Model.QACPTCodeRemarks);
    Dictionary<int, string> dictShadowQACptCodes = Utility.GetQAOrShadowQACptCodes(Model.ShadowQACPTCode);
    Dictionary<int, string> dictShadowQACptRemarks = Utility.GetQAOrShadowQACptRemarks(Model.ShadowQACPTCodeRemarks);

    dictQACptCodes = (dictQACptCodes == null) ? new Dictionary<int, string>() : dictQACptCodes;
    dictQACptRemarks = (dictQACptRemarks == null) ? new Dictionary<int, string>() : dictQACptRemarks;

    dictShadowQACptCodes = (dictShadowQACptCodes == null) ? new Dictionary<int, string>() : dictShadowQACptCodes;
    dictShadowQACptRemarks = (dictShadowQACptRemarks == null) ? new Dictionary<int, string>() : dictShadowQACptRemarks;

    count = Math.Max(dictCptCodes.Count(), Math.Max(dictQACptCodes.Count(), dictShadowQACptCodes.Count()));

    Utility.AddEmptyRows(dictCptCodes, count, "NA");
    Utility.AddEmptyRows(dictQACptCodes, count, "");
    Utility.AddEmptyRows(dictQACptRemarks, count, "");
    Utility.AddEmptyRows(dictShadowQACptCodes, count, "");
    Utility.AddEmptyRows(dictShadowQACptRemarks, count, "");

}
<div id="DivCpt">
    @{
        j = 1;
        for (i = 0; i < count; i++)
        {

        <div class="form-group row" id="DivCptRow_@j">
            @if (i == 0)
            {
                <label class="col-md-3 lessWidth m-t-15">CPT</label>
            }
            else
            {
                <label class="col-md-3 lessWidth m-t-15"></label>
            }
            @{ string[] coderCptcodes = dictCptCodes?.ElementAt(i).Value.Split("^");}
            @{ string[] qaCptcodes = dictQACptCodes?.ElementAt(i).Value.Split("^");}

            @if (!string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value))
            {
                string codercptCode = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[0]);
                string qacptCode = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[0]);
                string color = (codercptCode != qacptCode) ? "color:blue;" : "";
                if (codercptCode == "NA")
                    color = "color:fuchsia;";
                string cptCode = !string.IsNullOrEmpty(codercptCode) ? codercptCode : "";
                string cptCode1 = cptCode == qacptCode ? "" : codercptCode + "/";

                string coderMod = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[1]);
                string qaMod = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[1]);
                string mod = qaMod == "null" ? "" : qaMod;
                color = (coderMod != qaMod) ? "color:blue;" : "";
                if (coderMod == "NA")
                    color = "color:fuchsia;";
                string cptMod = !string.IsNullOrEmpty(coderMod) ? coderMod : "";
                string cptMod1 = cptMod == qaMod ? "" : coderMod + "/";

                string coderQty = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[2]);
                string qaQty = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[2]);
                color = (coderQty != qaQty) ? "color:blue;" : "";
                if (coderQty == "NA")
                    color = "color:fuchsia;";
                string cptQty = !string.IsNullOrEmpty(coderQty) ? coderQty : "";
                string cptQty1 = cptQty == qaQty ? "" : coderQty + "/";

                string coderLinks = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[3]);
                string qaLinks = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[3]);
                color = (coderLinks != qaLinks) ? "color:blue;" : "";
                if (coderLinks == "NA")
                    color = "color:fuchsia;";
                string linkAll = qaLinks == "null" ? "" : qaLinks;
                string cptLinks = !string.IsNullOrEmpty(coderLinks) ? coderLinks : "";
                string cptLinks1 = !string.IsNullOrEmpty(coderLinks) ? coderLinks + "/" : "";

                string link = !string.IsNullOrEmpty(@qaLinks) || @qaLinks != "null" ? @qaLinks : "Link All";
                cptLinks1 = cptLinks == link ? "" : coderLinks + "/";
                <div title="Code : @cptCode1@qacptCode, Mod : @cptMod1@mod, Quantity : @cptQty1@qaQty, Link : @cptLinks1@link" class="col-md-3 input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                    </div>
                    <div class="form-control CoderDetails" style="min-width:60px;">
                        @if (cptCode == qacptCode)
                        {
                            <span style="color:green">@cptCode</span>
                        }
                        else
                        {
                            <span style="color:red">@cptCode</span>
                        }
                        <br />
                        <span style="color:green">@qacptCode</span>
                    </div>

                    <div class="form-control CoderDetails">
                        @if (cptMod == mod)
                        {
                            <span style="color:green">@cptMod</span>
                        }
                        else
                        {
                            <span style="color:red">@cptMod</span>
                        }
                        <br />
                        <span style="color:green">@mod</span>
                    </div>

                    <div class="form-control CoderDetails">
                        @if (cptQty == qaQty)
                        {
                            <span style="color:green">@cptQty</span>
                        }
                        else
                        {
                            <span style="color:red">@cptQty</span>
                        }
                        <br />
                        <span style="color:green">@qaQty</span>
                    </div>

                    <div class="form-control CoderDetails">
                        @if (cptLinks == linkAll)
                        {
                            <span style="color:green">@cptLinks</span>
                        }
                        else
                        {
                            <span style="color:red">@cptLinks</span>
                        }
                        <br />
                        <span style="color:green">@linkAll</span>
                    </div>

                    @*<input type="hidden" id="@string.Format("txt{0}Cpt_{1}", Model.TabIndex,j)" value="@qacptCode^@qaMod^@qaQty^@qaLinks" />*@
                </div>
            }
            else
            {
                string coderModVal = coderCptcodes[1] == "null" ? "" : coderCptcodes[1];
                string coderLinkAllVal = coderCptcodes[3] == "null" ? "" : coderCptcodes[3];
                string cptVal = coderCptcodes[0] == "NA" ? "" : coderCptcodes[0];
                string modVal1 = coderCptcodes[1] == "null" ? "" : coderCptcodes[1];
                string qtyVal = coderCptcodes[2];
                string linkAllVal1 = coderCptcodes[3] == "null" ? "" : coderCptcodes[3];

                <div title="Code : @cptVal, Mod : @modVal1, Quantity : @qtyVal, Link : @linkAllVal1" class="col-md-3 input-group">
                    <div class="input-group-prepend ControlHeight">
                        <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                    </div>
                    <input type="text" class="form-control CoderDetails ControlHeight" style="color: green;width: 17px;" placeholder="Code" value="@coderCptcodes[0]" />
                    <input type="text" class="form-control CoderDetails ControlHeight" style="color:green;" placeholder="Mod" value="@coderModVal" />
                    <input type="text" class="form-control CoderDetails ControlHeight" style="color:green;" placeholder="1" value="@coderCptcodes[2]" />
                    <input type="text" class="form-control CoderDetails ControlHeight" style="color: green;" placeholder="Link All" value="@coderLinkAllVal" />
                    @*<input type="hidden" id="@string.Format("txt{0}Cpt_{1}", Model.TabIndex,j)" value="@coderCptcodes[0]^@coderModVal^@coderCptcodes[2]^@coderLinkAllVal" />*@
                </div>
            }
            @{ Accepted = (string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
            @{ Rejected = (string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

            @{ Show = (string.IsNullOrEmpty(dictQACptRemarks?.ElementAt(i).Value) ? "visibility:hidden" : "display:flex"); }
            <div class="col-md-3 CPTWidth input-group" style="@Show">
                <div class="input-group-prepend ControlHeight">
                    <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                </div>

                @{
                    string ShadowQaCptVal = "";
                    string ShadowQaModVal = "";
                    string ShadowQaQtyVal = "";
                    string ShadowQaLinkAllVal = "";
                    ShadowQaCptVal = !string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value) ? dictQACptCodes?.ElementAt(i).Value : !string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value) ? dictQACptCodes?.ElementAt(i).Value : dictCptCodes?.ElementAt(i).Value;
                    if (dictQACptCodes?.ElementAt(i).Value == "" && string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value))
                    {
                        string[] CptCodes = dictCptCodes.ElementAt(i).Value.Split("^");
                        ShadowQaCptVal = CptCodes[0];
                        ShadowQaModVal = CptCodes[1] == "null" ? "" : CptCodes[1];
                        ShadowQaQtyVal = CptCodes[2];
                        ShadowQaLinkAllVal = CptCodes[3] == "null" ? "" : CptCodes[3];
                    }
                    else
                    {
                        string[] CptCodes = ShadowQaCptVal.Split("^");
                        ShadowQaCptVal = CptCodes[0] == "NA" ? "" : CptCodes[0];
                        if (ShadowQaCptVal != "")
                        {
                            ShadowQaModVal = CptCodes[1] == "null" ? "" : CptCodes[1];
                            ShadowQaQtyVal = CptCodes[2];
                            ShadowQaLinkAllVal = CptCodes[3] == "null" ? "" : CptCodes[3];
                        }
                    }
                }
                <input type="text" class="form-control QARemarks ControlHeight" id="@string.Format("txt{0}Cpt_{1}", Model.TabIndex,j)" autocomplete="off" placeholder="Code" value="@ShadowQaCptVal" />
                <input type="text" class="form-control QARemarks ControlHeight" id="@string.Format("txt{0}mod_{1}", Model.TabIndex,j)" autocomplete="off" placeholder="Mod" value="@ShadowQaModVal" />
                <input type="text" id="@string.Format("txt{0}qty_{1}", Model.TabIndex,j)" class="form-control QARemarks ControlHeight" autocomplete="off" placeholder="1" value="@ShadowQaQtyVal" />
                <input type="text" id="@string.Format("txt{0}links_{1}", Model.TabIndex,j)" class="form-control QARemarks ControlHeight" autocomplete="off" placeholder="Link All" value="@ShadowQaLinkAllVal" />
                <div class="input-group-append CoderCorrections">
                    <span class="input-group-text AcceptRejectWidth">
                        &nbsp;<i id="@string.Format("Cpt_{0}_{1}", Model.TabIndex,j)" class="@Accepted AdjustAcceptReject" aria-hidden="true"></i>
                        &nbsp;<i id="@string.Format("Cpt_{0}_{1}", Model.TabIndex,j)" class="@Rejected" aria-hidden="true"></i>
                    </span>
                </div>
            </div>

            <div title="" class="col-md-3 input-group" style="@Show">
                <input type="text" id="@string.Format("ShadowQACptRemarkss_{0}_{1}", Model.TabIndex,j)" class="form-control ControlHeight QACptRemarks_@j" value="@dictShadowQACptRemarks?.ElementAt(i).Value" />
            </div>

            <div class="col-md-3 input-group" style="@Show">
                <input type="text" class="form-control CoderDetails ControlHeight" value="@dictQACptRemarks?.ElementAt(i).Value" />
            </div>
        </div>
            j = j + 1;
        }
    }
</div>
<div class="form-group row">
    <label class="col-md-3 lessWidth m-t-15">Provider Feedback</label>

    <div title="@Model.ProviderFeedbackText" class="col-md-3 CPTWidth input-group">
        <div class="form-control CoderDetails ControlHeight" style="line-height:2.5;overflow:hidden">
            <span style="white-space:nowrap">
                <label style="color: green;">@Model.ProviderFeedbackText</label>
            </span>
        </div>
    </div>
    @{Show = (string.IsNullOrEmpty(Model.QAProviderFeedbackRemarks) ? "display:none" : "display:flex");}
    <div class="col-md-3 CPTWidth input-group" style="@Show">
        @Html.DropDownListFor(model => model.ShadowQAProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), "--Select--", new { @id = "Feedback1", @class = "form-control QARevised ControlHeight" })
        @Html.ValidationMessageFor(model => model.ShadowQAProviderFeedbackID, null, new { @class = "text-danger errMsg" })
        @{Accepted = (string.IsNullOrEmpty(Model.QAProviderFeedbackRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
        @{Rejected = (string.IsNullOrEmpty(Model.QAProviderFeedbackRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

        <div class="input-group-append ControlHeight" style="@Show">
            <span class="input-group-text AcceptRejectWidth_@tabIndex">
                &nbsp;<i id="Feedback_@tabIndex" data="@tabIndex" class="@Accepted AdjustAcceptReject_@tabIndex" aria-hidden="true"></i>
                &nbsp;<i id="Feedback_@tabIndex" data="@tabIndex" class="@Rejected AdjustReject_@tabIndex" aria-hidden="true"></i>
            </span>
        </div>
    </div>
    <div class="col-md-3 input-group" style="@Show">
        @Html.TextBoxFor(model => model.ShadowQAProviderFeedbackRemarks, new { @title = Model.ShadowQAProviderFeedbackRemarks, @class = "form-control QARevised ControlHeight", @id = "ProviderFeedbackIDRemarks2" })
        @Html.ValidationMessageFor(model => model.ShadowQAProviderFeedbackRemarks, null, new { @class = "text-danger errMsg" })
    </div>

    <div class="col-md-3 input-group" style="@Show">
        @Html.TextBoxFor(model => model.QAProviderFeedbackRemarks, new { @style = Show, @class = "form-control ControlHeight", @id = "RevisedProviderFeedbackRemarks" })
    </div>
</div>
<div class="clearfix"></div>
<div class="col-md-6">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">QA Details</h4>
        </div>
        <div class="card-body">
            <div class="col-12">
                <div class="row mb-3">
                    <div class="col-lg-6">
                        <div class="form-group row">
                            <label class="col-md-5 m-t-15">
                                Error Type
                            </label>
                            <div class="col-md-7">
                                @Html.DropDownListFor(model => model.QADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), new { @class = "form-control ControlHeight", @readonly = "readonly", @style = "pointer-events: none;" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="col-md-12">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">Shadow QA Details</h4>
        </div>
        <div class="card-body">
            <div class="col-12">
                <div class="row mb-3">
                    <div class="col-lg-6">
                        <div class="form-group row">
                            <label class="col-md-3 m-t-15">
                                Error Type
                            </label>
                            <div class="col-md-7">
                                @Html.DropDownListFor(model => model.ShadowQADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), "--Select--", new { @class = "form-control ControlHeight ShadowQAErroryType", @readonly = "readonly", @id = string.Format("ShadowQAErrorType_{0}", tabIndex), @onchange = "ShadowQAErrorType('" + tabIndex + "')" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group row">
                            <div class="col-md-12">
                                <button id="btnsubmit" type="button" class="btn btn-success">Submit</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>