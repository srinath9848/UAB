@model List<UAB.DTO.ChartSummaryDTO>
<div class="col-md-12">
    <div class="card">
        @Html.HiddenFor(model => Model.FirstOrDefault().CodingDTO.ClinicalCaseID, new { })

        @Html.Hidden("hdnQADxRemarks")
        @Html.Hidden("hdnQADxCodes")
        @Html.Hidden("hdnQACptRemarks")
        @Html.Hidden("hdnQACptCodes")

        @Html.Hidden("hdnClaim1")
        @Html.Hidden("hdnClaim2")
        @Html.Hidden("hdnClaim3")
        @Html.Hidden("hdnClaim4")

        @Html.Hidden("hdnClaimId1")
        @Html.Hidden("hdnClaimId2")
        @Html.Hidden("hdnClaimId3")
        @Html.Hidden("hdnClaimId4")


        @Html.Hidden("hdnQADxRemarks2")
        @Html.Hidden("hdnQADxCodes2")
        @Html.Hidden("hdnQACptRemarks2")
        @Html.Hidden("hdnQACptCodes2")

        @Html.Hidden("hdnQADxRemarks3")
        @Html.Hidden("hdnQADxCodes3")
        @Html.Hidden("hdnQACptRemarks3")
        @Html.Hidden("hdnQACptCodes3")

        @Html.Hidden("hdnQADxRemarks4")
        @Html.Hidden("hdnQADxCodes4")
        @Html.Hidden("hdnQACptRemarks4")
        @Html.Hidden("hdnQACptCodes4")

        @Html.Hidden("hdnQAErrorTypeID1")
        @Html.Hidden("hdnQAErrorTypeID2")
        @Html.Hidden("hdnQAErrorTypeID3")
        @Html.Hidden("hdnQAErrorTypeID4")


        <ul class="nav nav-tabs" role="tablist">
            @{
                int tabIndex = 1;
                foreach (var tabitem in Model)
                {
                    if (tabitem.ClaimId == null)
                        tabitem.ClaimId = 0;

                    var claimId = string.Format("tabIndex_{0}_ClaimId_{1}", tabIndex, tabitem.ClaimId);
                    if (tabitem.ClaimId == 0)
                    {
                        <li class="nav-item tabDiv1"> <a class="nav-link tab active show" data-toggle="tab" id="@claimId" alt="tabDiv1" href="#claim1" role="tab"><span class="hidden-sm-up"></span> <span class="hidden-xs-down tabclick">Claim @tabIndex</span></a> </li>
                    }
                    else
                    {
                        <li class="@string.Format("nav-item tabDiv{0}", tabIndex)" style="display:inherit;"> <a class="nav-link tab" data-toggle="tab" id="@claimId" alt="tabDiv2" href="@string.Format("#claim{0}", tabIndex)" role="tab"> <span class="hidden-sm-up"></span> <span class="hidden-xs-down tabclick">Claim @tabIndex</span></a></li>
                    }
                    tabIndex = tabIndex + 1;
                }
            }
        </ul>

        <div class="tab-content tabcontent-border">
            @{
                tabIndex = 1;
                foreach (var tabitem in Model)
                {
                    tabitem.TabIndex = tabIndex;
                    if (tabitem.ClaimId == null)
                        tabitem.ClaimId = 0;

                    if (tabitem.ClaimId == 0)
                    {
                        <div class="tab-pane active" id="claim1" role="tabpanel">
                            <div class="p-20" id="tabDiv1">
                                <br />
                                <div class="form-group row">
                                    <label class="col-md-3 lessWidth m-t-15"></label>
                                    <label class="col-md-3 m-t-15">Coder/QA</label>
                                    <label class="col-md-3 m-t-15">QA Comments</label>
                                    <label class="col-md-3 m-t-15">ShadowQA Corrections</label>
                                    <label class="col-md-3 m-t-15">ShadowQA Comments</label>
                                </div>
                                <div class="form-group row">
                                    <label class="col-md-3 lessWidth m-t-15">Provider</label>
                                    @{int len = (!string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderText) ? 10 : 20); }
                                    @{string ProviderText = (Model.FirstOrDefault().ProviderText?.Length > len) ? Model.FirstOrDefault().ProviderText.Substring(0, len) + ".." : Model.FirstOrDefault().ProviderText;}
                                    @{string QAProviderText = (Model.FirstOrDefault().QAProviderText?.Length > len) ? "/" + Model.FirstOrDefault().QAProviderText.Substring(0, len) + ".." : "/" + Model.FirstOrDefault().QAProviderText;}
                                    @{string title = (!string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderText) ? Model.FirstOrDefault().ProviderText + "/" + Model.FirstOrDefault().QAProviderText : Model.FirstOrDefault().ProviderText);}

                                    <div title="@title" class="col-md-3 input-group">
                                        <div class="form-control CoderDetails ControlHeight" style="line-height:2.5;overflow:hidden">
                                            <span style="white-space:nowrap">
                                                @if (!string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderText))
                                                {
                                                    <label style="color: red;">@ProviderText</label>
                                                    <label style="color: green">@QAProviderText</label>
                                                }
                                                else
                                                {
                                                    <label style="color: green;">@ProviderText</label>
                                                }
                                            </span>
                                        </div>
                                        @{string Show = (string.IsNullOrEmpty(Model.FirstOrDefault().ShadowQAProviderRemarks) ? "display:none" : "display:flex");}

                                        @{string Accepted = (string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                                        @{string Rejected = (string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

                                    </div>

                                    <div class="col-md-3 input-group CoderCorrections ProviderID" style="@Show">
                                        @Html.TextBoxFor(model => Model.FirstOrDefault().QAProviderRemarks, new { @class = "form-control ControlHeight" })
                                    </div>
                                    <div class="col-md-3 input-group">
                                        @Html.DropDownListFor(model => Model.FirstOrDefault().ShadowQAProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), new { @style = @Show, @id = string.Format("ProviderID_{0}1", @tabIndex), @class = "form-control CoderDetails ControlHeight" })
                                        <div class="input-group-append ControlHeight" style="@Show">
                                            <span class="input-group-text AcceptRejectWidth AcceptRejectWidth_@tabIndex">
                                                &nbsp;<i id="ProviderID_@tabIndex" data="@tabIndex" class="@Accepted AdjustAcceptReject AdjustAcceptReject_@tabIndex" aria-hidden="true"></i>
                                                &nbsp;<i id="ProviderID_@tabIndex" data="@tabIndex" class="@Rejected AdjustReject_@tabIndex" aria-hidden="true"></i>
                                            </span>
                                        </div>
                                    </div>
                                    <div title="@Model.FirstOrDefault().ShadowQAProviderRemarks" class="col-md-3 input-group">
                                        @Html.TextBoxFor(model => model.FirstOrDefault().ShadowQAProviderRemarks, new { @style = @Show, @class = "form-control QARevised ControlHeight", @id = string.Format("ProviderID_{0}2", @tabIndex) })
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label class="col-md-3 lessWidth m-t-15">Payor</label>
                                    @{len = (!string.IsNullOrEmpty(Model.FirstOrDefault().QAPayorText) ? 10 : 20); }
                                    @{string PayorText = (Model.FirstOrDefault().PayorText?.Length > len) ? Model.FirstOrDefault().PayorText.Substring(0, len) + ".." : Model.FirstOrDefault().PayorText;}
                                    @{string QAPayorText = (Model.FirstOrDefault().QAPayorText?.Length > len) ? "/" + Model.FirstOrDefault().QAPayorText.Substring(0, len) + ".." : "/" + Model.FirstOrDefault().QAPayorText;}
                                    @{title = (!string.IsNullOrEmpty(Model.FirstOrDefault().QAPayorText) ? Model.FirstOrDefault().PayorText + "/" + Model.FirstOrDefault().QAPayorText : Model.FirstOrDefault().PayorText);}

                                    <div title="@title" class="col-md-3 input-group">
                                        <div name="PayorText" class="form-control CoderDetails ControlHeight" style="line-height:2.5;overflow:hidden">
                                            <span style="white-space:nowrap">

                                                @if (!string.IsNullOrEmpty(Model.FirstOrDefault().QAPayorText))
                                                {
                                                    <label style="color: red;">@PayorText</label>
                                                    <label style="color: green">@QAPayorText</label>
                                                }
                                                else
                                                {
                                                    <label style="color: green;">@PayorText</label>
                                                }
                                            </span>
                                        </div>
                                        @{ Show = (string.IsNullOrEmpty(Model.FirstOrDefault().ShadowQAPayorRemarks) ? "display:none" : "display:flex");}

                                        @{ Accepted = (string.IsNullOrEmpty(Model.FirstOrDefault().QAPayorRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                                        @{ Rejected = (string.IsNullOrEmpty(Model.FirstOrDefault().QAPayorRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}


                                    </div>

                                    <div class="col-md-3 input-group CoderCorrections PayorID" style="@Show">
                                        @Html.TextBoxFor(model => Model.FirstOrDefault().QAPayorRemarks, new { @class = "form-control ControlHeight", @data_val = "false" })
                                    </div>

                                    <div class="col-md-3 input-group">
                                        @Html.DropDownListFor(model => Model.FirstOrDefault().ShadowQAPayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), new { @style = @Show, @id = string.Format("PayorID_{0}1", @tabIndex), @class = "form-control QARevised ControlHeight" })
                                        <div class="input-group-append ControlHeight" style="@Show">
                                            <span class="input-group-text AcceptRejectWidth AcceptRejectWidth_@tabIndex">
                                                &nbsp;<i id="PayorID_@tabIndex" data="@tabIndex" class="@Accepted AdjustAcceptReject AdjustAcceptReject_@tabIndex" aria-hidden="true"></i>
                                                &nbsp;<i id="PayorID_@tabIndex" data="@tabIndex" class="@Rejected AdjustReject_@tabIndex" aria-hidden="true"></i>
                                            </span>
                                        </div>
                                    </div>
                                    <div title="@Model.FirstOrDefault().ShadowQAPayorRemarks" class="col-md-3 input-group">
                                        @Html.TextBoxFor(model => model.FirstOrDefault().ShadowQAPayorRemarks, new { @style = @Show, @class = "form-control QARevised ControlHeight", @id = string.Format("PayorID_{0}2", @tabIndex) })
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label class="col-md-3 lessWidth m-t-15">Note Title</label>
                                    <div title="@Model.FirstOrDefault().NoteTitle" class="col-md-3 input-group">
                                        @Html.TextBoxFor(model => Model.FirstOrDefault().NoteTitle, new { @class = "form-control CoderDetails ControlHeight" })
                                    </div>
                                </div>

                                @{

                                    Dictionary<int, string> dictDxCodes = Utility.GetDxCodes(Model.FirstOrDefault().Dx);
                                    Dictionary<int, string> dictQADxCodes = Utility.GetQAOrShadowQADxCodes(Model.FirstOrDefault().QADx);
                                    Dictionary<int, string> dictShadowQADxCodes = Utility.GetQAOrShadowQADxCodes(Model.FirstOrDefault().ShadowQADx);

                                    Dictionary<int, string> dictQADxRemarks = Utility.GetQAOrShadowQADxRemarks(Model.FirstOrDefault().QADxRemarks);
                                    Dictionary<int, string> dictShadowQADxRemarks = Utility.GetQAOrShadowQADxRemarks(Model.FirstOrDefault().ShadowQADxRemarks);

                                    dictQADxCodes = (dictQADxCodes == null ? new Dictionary<int, string>() : dictQADxCodes);
                                    dictShadowQADxCodes = (dictShadowQADxCodes == null ? new Dictionary<int, string>() : dictShadowQADxCodes);

                                    int count = Math.Max(dictDxCodes.Count(), Math.Max(dictQADxCodes.Count(), dictShadowQADxCodes.Count()));

                                    int totalDxCount = count + 1;

                                    Utility.AddEmptyRows(dictDxCodes, count, "NA");
                                    Utility.AddEmptyRows(dictQADxCodes, count, "");
                                    Utility.AddEmptyRows(dictShadowQADxCodes, count, "");
                                    Utility.AddEmptyRows(dictShadowQADxRemarks, count, "");
                                    Utility.AddEmptyRows(dictQADxRemarks, count, "");
                                }
                                <div id="DivDx">
                                    @{
                                        int j = 1;
                                        int i;
                                        for (i = 0; i < count; i++)
                                        {
                                            <div class="form-group row">
                                                @if (i == 0)
                                                {
                                                    <label class="col-md-3 lessWidth m-t-15">Dx</label>
                                                }
                                                else
                                                {
                                                    <label class="col-md-3 lessWidth m-t-15"></label>
                                                }

                                                @{string Dx = dictDxCodes.ElementAt(i).Value;}
                                                @{string QADx = (dictQADxCodes?.ElementAt(i).Value?.Length > len) ? "/" + dictQADxCodes?.ElementAt(i).Value.Substring(0, len) + ".." : "/" + dictQADxCodes?.ElementAt(i).Value;}


                                                <div title="@title" class="col-md-3 input-group">
                                                    <div class="input-group-prepend ControlHeight">
                                                        <span class="input-group-text ControlHeight AdjustSerialNumber" id="basic-addon1">@j</span>
                                                    </div>
                                                    <div class="form-control CoderDetails ControlHeight" style="line-height:2.5;overflow:hidden">
                                                        <span style="white-space:nowrap">
                                                            @if (!string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value))
                                                            {
                                                                <label style="color: red;">@Dx</label>
                                                                <label style="color:green">@QADx</label>
                                                            }
                                                            else
                                                            {
                                                                <label style="color: green;">@Dx</label>
                                                            }
                                                        </span>
                                                        @{string finalVal = string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) ? Dx : dictQADxCodes?.ElementAt(i).Value;}
                                                        <input type="hidden" id="txtDxCode_@j" value="@finalVal" />
                                                    </div>
                                                    @{ Show = (string.IsNullOrEmpty(dictShadowQADxRemarks?.ElementAt(i).Value) ? "display:none" : "display:flex"); }
                                                    @{ Accepted = (string.IsNullOrEmpty(dictShadowQADxRemarks?.ElementAt(i).Value) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                                                    @{ Rejected = (string.IsNullOrEmpty(dictShadowQADxRemarks?.ElementAt(i).Value) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

                                                </div>
                                                <div title="" class="col-md-3 input-group">
                                                    <input type="text" id="DxRemarks_@j" style="@Show" class="form-control" value="@dictQADxRemarks?.ElementAt(i).Value" />
                                                </div>
                                                <div class="col-md-3 input-group" style="@Show">
                                                    <div class="input-group-prepend ControlHeight">
                                                        <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                                                    </div>
                                                    @{
                                                        string ShadowQaDxVal = !string.IsNullOrEmpty(dictShadowQADxCodes?.ElementAt(i).Value) ? dictShadowQADxCodes?.ElementAt(i).Value : !string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value) ? dictQADxCodes?.ElementAt(i).Value : dictDxCodes?.ElementAt(i).Value;
                                                        if (dictShadowQADxCodes?.ElementAt(i).Value == "NA" && string.IsNullOrEmpty(dictQADxCodes?.ElementAt(i).Value))
                                                        {
                                                            ShadowQaDxVal = dictDxCodes.ElementAt(i).Value;
                                                        }
                                                    }
                                                    <input type="text" class="form-control txtDx QARemarks ControlHeight" placeholder="Code" value="@ShadowQaDxVal" />
                                                    <div class="input-group-append ControlHeight" style="@Show">
                                                        <span class="input-group-text ControlHeight AcceptRejectWidth">
                                                            &nbsp;<i id="Dx_@j" class="@Accepted AdjustAcceptReject" aria-hidden="true"></i>
                                                            &nbsp;<i id="Dx_@j" class="@Rejected" aria-hidden="true"></i>
                                                        </span>
                                                    </div>
                                                </div>
                                                <div class="col-md-3 input-group" style="display:none">
                                                    <input type="text" id="Dx_@j" class="form-control QARevised ControlHeight" />
                                                </div>

                                                <div title="" class="col-md-3 input-group" style="@Show">
                                                    <input type="text" class="form-control QARemarks ControlHeight" value="@dictShadowQADxRemarks?.ElementAt(i).Value" />
                                                </div>

                                            </div>

                                            j = j + 1;
                                        }
                                    }
                                </div>

                                @{
                                    Dictionary<int, string> dictCptCodes = Utility.GetCptCodes(Model.FirstOrDefault().CPTCode);
                                    Dictionary<int, string> dictQACptCodes = Utility.GetQAOrShadowQACptCodes(Model.FirstOrDefault().QACPTCode);
                                    Dictionary<int, string> dictShadowQACptCodes = Utility.GetQAOrShadowQACptCodes(Model.FirstOrDefault().ShadowQACPTCode);

                                    Dictionary<int, string> dictQACptRemarks = Utility.GetQAOrShadowQACptRemarks(Model.FirstOrDefault().QACPTCodeRemarks);
                                    Dictionary<int, string> dictShadowQACptRemarks = Utility.GetQAOrShadowQADxRemarks(Model.FirstOrDefault().ShadowQACPTCodeRemarks);

                                    dictCptCodes = (dictCptCodes == null) ? new Dictionary<int, string>() : dictCptCodes;
                                    dictQACptCodes = (dictQACptCodes == null) ? new Dictionary<int, string>() : dictQACptCodes;
                                    dictShadowQACptCodes = (dictShadowQACptCodes == null) ? new Dictionary<int, string>() : dictShadowQACptCodes;
                                    dictQACptRemarks = (dictQACptRemarks == null) ? new Dictionary<int, string>() : dictQACptRemarks;
                                    dictShadowQACptRemarks = (dictShadowQACptRemarks == null) ? new Dictionary<int, string>() : dictShadowQACptRemarks;

                                    count = Math.Max(dictCptCodes.Count(), Math.Max(dictQACptCodes.Count(), dictShadowQACptCodes.Count()));

                                    int totalCptCount = count + 1;

                                    Utility.AddEmptyRows(dictCptCodes, count, "NA");
                                    Utility.AddEmptyRows(dictQACptCodes, count, "");
                                    Utility.AddEmptyRows(dictShadowQACptCodes, count, "");
                                    Utility.AddEmptyRows(dictShadowQACptRemarks, count, "");
                                    Utility.AddEmptyRows(dictQACptRemarks, count, "");

                                }
                                <div id="DivCpt">
                                    @{
                                        j = 1;
                                        for (i = 0; i < count; i++)
                                        {

                                            <div class="form-group row" id="DivCptRow_@j">
                                                @if (i == 0)
                                                {
                                                    <label class="col-md-3 lessWidth m-t-15">CPT</label>
                                                }
                                                else
                                                {
                                                    <label class="col-md-3 lessWidth m-t-15"></label>
                                                }
                                                @{ string[] coderCptcodes = dictCptCodes?.ElementAt(i).Value.Split("^");}
                                                @{ string[] qaCptcodes = dictQACptCodes?.ElementAt(i).Value.Split("^");}

                                                @{
                                                    Accepted = (string.IsNullOrEmpty(dictShadowQACptRemarks?.ElementAt(i).Value) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");
                                                    Rejected = (string.IsNullOrEmpty(dictShadowQACptRemarks?.ElementAt(i).Value) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");
                                                }

                                                @if (!string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value))
                                                {
                                                    string codercptCode = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[0]);
                                                    string qacptCode = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[0]);
                                                    string color = (codercptCode != qacptCode) ? "color:blue;" : "";
                                                    if (codercptCode == "NA")
                                                        color = "color:fuchsia;";
                                                    string cptCode = !string.IsNullOrEmpty(codercptCode) ? codercptCode : "";
                                                    string cptCode1 = cptCode == qacptCode ? "" : codercptCode + "/";

                                                    string coderMod = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[1]);
                                                    string qaMod = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[1]);
                                                    string mod = qaMod == "null" ? "" : qaMod;
                                                    color = (coderMod != qaMod) ? "color:blue;" : "";
                                                    if (coderMod == "NA")
                                                        color = "color:fuchsia;";
                                                    string cptMod = !string.IsNullOrEmpty(coderMod) ? coderMod : "";
                                                    string cptMod1 = cptMod == qaMod ? "" : coderMod + "/";

                                                    string coderQty = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[2]);
                                                    string qaQty = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[2]);
                                                    color = (coderQty != qaQty) ? "color:blue;" : "";
                                                    if (coderQty == "NA")
                                                        color = "color:fuchsia;";
                                                    string cptQty = !string.IsNullOrEmpty(coderQty) ? coderQty : "";
                                                    string cptQty1 = cptQty == qaQty ? "" : coderQty + "/";

                                                    string coderLinks = (dictCptCodes?.ElementAt(i).Value == "NA" ? "NA" : coderCptcodes[3]);
                                                    string qaLinks = (dictQACptCodes?.ElementAt(i).Value == "" ? "" : qaCptcodes[3]);
                                                    color = (coderLinks != qaLinks) ? "color:blue;" : "color:Red;";
                                                    if (coderLinks == "NA")
                                                        color = "color:fuchsia;";
                                                    string linkAll = qaLinks == "null" ? "" : qaLinks;
                                                    string cptLinks = !string.IsNullOrEmpty(coderLinks) ? coderLinks : "";
                                                    string cptLinks1 = !string.IsNullOrEmpty(coderLinks) ? coderLinks + "/" : "";

                                                    string link = !string.IsNullOrEmpty(@qaLinks) || @qaLinks != "null" ? @qaLinks : "Link All";
                                                    cptLinks1 = cptLinks == link ? "" : coderLinks + "/";
                                                    <div title="Code : @cptCode1@qacptCode, Mod : @cptMod1@mod, Quantity : @cptQty1@qaQty, Link : @cptLinks1@link" class="col-md-3 input-group">
                                                        <div class="input-group-prepend">
                                                            <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                                                        </div>
                                                        @{
                                                            if (codercptCode == "NA")
                                                                color = "color:fuchsia;";
                                                            <div class="form-control CoderDetails" style="min-width:60px;">
                                                                @if (cptCode == qacptCode)
                                                                {
                                                                    <span style="color:green">@cptCode</span>
                                                                }
                                                                else
                                                                {
                                                                    <span style="color:red">@cptCode</span>
                                                                }
                                                                <br />
                                                                <span style="color:green">@qacptCode</span>
                                                            </div>
                                                            color = (coderMod != qaMod) ? "color:blue;" : "";
                                                            if (coderMod == "NA")
                                                                color = "color:fuchsia;";
                                                            <div class="form-control CoderDetails">
                                                                @if (cptMod == mod)
                                                                {
                                                                    <span style="color:green">@cptMod</span>
                                                                }
                                                                else
                                                                {
                                                                    <span style="color:red">@cptMod</span>
                                                                }
                                                                <br />
                                                                <span style="color:green">@mod</span>
                                                            </div>

                                                            color = (coderQty != qaQty) ? "color:blue;" : "";
                                                            if (coderQty == "NA")
                                                                color = "color:fuchsia;";
                                                            <div class="form-control CoderDetails">
                                                                @if (cptQty == qaQty)
                                                                {
                                                                    <span style="color:green">@cptQty</span>
                                                                }
                                                                else
                                                                {
                                                                    <span style="color:red">@cptQty</span>
                                                                }
                                                                <br />
                                                                <span style="color:green">@qaQty</span>
                                                            </div>

                                                            color = (coderLinks != qaLinks) ? "color:blue;" : "";
                                                            if (coderLinks == "NA")
                                                                color = "color:fuchsia;";
                                                            <div class="form-control CoderDetails">
                                                                @if (cptLinks == linkAll)
                                                                {
                                                                    <span style="color:green">@cptLinks</span>
                                                                }
                                                                else
                                                                {
                                                                    <span style="color:red">@cptLinks</span>
                                                                }
                                                                <br />
                                                                <span style="color:green">@linkAll</span>
                                                                <input type="hidden" id="txtCPTCode_@j" value="@qacptCode^@qaMod^@qaQty^@qaLinks" />

                                                            </div>
                                                        }
                                                    </div>
                                                }
                                                else
                                                {
                                                    string cptVal = coderCptcodes[0] == "NA" ? "" : coderCptcodes[0];
                                                    string coderModVal = "";
                                                    string coderLinkAllVal = "";
                                                    string modVal1 = "";
                                                    string qtyVal = "";
                                                    string linkAllVal1 = "";
                                                    if (cptVal != "")
                                                    {
                                                        coderModVal = coderCptcodes[1] == "null" ? "" : coderCptcodes[1];
                                                        coderLinkAllVal = coderCptcodes[3] == "null" ? "" : coderCptcodes[3];
                                                        modVal1 = coderCptcodes[1] == "null" ? "" : coderCptcodes[1];
                                                        qtyVal = coderCptcodes[2];
                                                        linkAllVal1 = coderCptcodes[3] == "null" ? "" : coderCptcodes[3];

                                                    }
                                                    Show = (string.IsNullOrEmpty(dictShadowQACptRemarks?.ElementAt(i).Value) ? "display:none" : "display:flex");

                                                    <div title="Code : @cptVal, Mod : @modVal1, Quantity : @qtyVal, Link : @linkAllVal1" class="col-md-3 input-group">
                                                        <div class="input-group-prepend ControlHeight">
                                                            <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                                                        </div>
                                                        <input type="text" class="form-control QARemarks ControlHeight" style="color: green;width: 17px;" placeholder="Code" value="@coderCptcodes[0]" />
                                                        <input type="text" class="form-control QARemarks ControlHeight" style="color:green;" placeholder="Mod" value="@coderModVal" />
                                                        <input type="text" class="form-control QARemarks ControlHeight" style="color:green;" placeholder="Qty" value="@qtyVal" />
                                                        <input type="text" class="form-control QARemarks ControlHeight" style="color: green;" placeholder="Link All" value="@coderLinkAllVal" />
                                                        <input type="hidden" id="txtCPTCode_@j" value="@coderCptcodes[0]^@coderModVal^@qtyVal^@coderLinkAllVal" />
                                                    </div>

                                                }
                                                <div title="" class="col-md-3 input-group">
                                                    <input type="text" id="QACptRemarks_@j" style="@Show" class="form-control ControlHeight" value="@dictQACptRemarks?.ElementAt(i).Value" />
                                                </div>

                                                <div class="col-md-3 CptlessWidth input-group" style="@Show">
                                                    <div class="input-group-prepend ControlHeight">
                                                        <span class="input-group-text AdjustSerialNumber" id="basic-addon1">@j</span>
                                                    </div>

                                                    @{
                                                        string ShadowQaCptVal = "";
                                                        string ShadowQaModVal = "";
                                                        string ShadowQaQtyVal = "";
                                                        string ShadowQaLinkAllVal = "";
                                                        ShadowQaCptVal = !string.IsNullOrEmpty(dictShadowQACptCodes?.ElementAt(i).Value) ? dictShadowQACptCodes?.ElementAt(i).Value : !string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value) ? dictQACptCodes?.ElementAt(i).Value : dictCptCodes?.ElementAt(i).Value;
                                                        if (dictShadowQACptCodes?.ElementAt(i).Value == "NA" && string.IsNullOrEmpty(dictQACptCodes?.ElementAt(i).Value))
                                                        {
                                                            string[] CptCodes = dictCptCodes.ElementAt(i).Value.Split("^");
                                                            ShadowQaCptVal = CptCodes[0];
                                                            ShadowQaModVal = CptCodes[1] == "null" ? "" : CptCodes[1];
                                                            ShadowQaQtyVal = CptCodes[2];
                                                            ShadowQaLinkAllVal = CptCodes[3] == "null" ? "" : CptCodes[3];
                                                        }
                                                        else
                                                        {
                                                            string[] CptCodes = ShadowQaCptVal.Split("^");
                                                            ShadowQaCptVal = CptCodes[0] == "NA" ? "" : CptCodes[0];
                                                            if (ShadowQaCptVal != "")
                                                            {
                                                                ShadowQaModVal = CptCodes[1] == "null" ? "" : CptCodes[1];
                                                                ShadowQaQtyVal = CptCodes[2];
                                                                ShadowQaLinkAllVal = CptCodes[3] == "null" ? "" : CptCodes[3];
                                                            }
                                                        }
                                                    }
                                                    <input type="text" class="form-control QARemarks ControlHeight" id="txtCpt_@j" autocomplete="off" placeholder="Code" value="@ShadowQaCptVal" style="min-width: 60px;"/>
                                                    <input type="text" class="form-control QARemarks ControlHeight" id="txtMod_@j" autocomplete="off" placeholder="Mod" value="@ShadowQaModVal" />
                                                    <input type="text" id="txtQty_@j" class="form-control QARemarks ControlHeight" autocomplete="off" placeholder="Qty" value="@ShadowQaQtyVal" />
                                                    <input type="text" id="txtLinks_@j" class="form-control QARemarks ControlHeight" autocomplete="off" placeholder="Link All" value="@ShadowQaLinkAllVal" />
                                                    <div class="input-group-append CoderCorrections ControlHeight" style="@Show; height: 45px;">
                                                        <span class="input-group-text AcceptRejectWidth">
                                                            &nbsp;<i id="Cpt_@j" class="@Accepted AdjustAcceptReject" aria-hidden="true"></i>
                                                            &nbsp;<i id="Cpt_@j" class="@Rejected" aria-hidden="true"></i>
                                                        </span>
                                                    </div>
                                                </div>

                                                <div title="" class="col-md-3 input-group" style="@Show">
                                                    <input type="text" class="form-control QARemarks ControlHeight" value="@dictShadowQACptRemarks?.ElementAt(i).Value" />
                                                </div>
                                            </div>
                                            j = j + 1;
                                        }
                                    }

                                </div>
                                <div class="form-group row">
                                    <label class="col-md-3 lessWidth m-t-15">Provider Feedback</label>
                                    @{len = (!string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderFeedbackText) ? 10 : 20); }
                                    @{string ProviderFeedbackText = (Model.FirstOrDefault().ProviderFeedbackText?.Length > len) ? Model.FirstOrDefault().ProviderFeedbackText.Substring(0, len) + ".." : Model.FirstOrDefault().ProviderFeedbackText;}
                                    @{string QAProviderFeedbackText = (Model.FirstOrDefault().QAProviderFeedbackText?.Length > len) ? "/" + Model.FirstOrDefault().QAProviderFeedbackText.Substring(0, len) + ".." : "/" + Model.FirstOrDefault().QAProviderFeedbackText;}
                                    @{title = (!string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderFeedbackText) ? Model.FirstOrDefault().ProviderFeedbackText + "/" + Model.FirstOrDefault().QAProviderFeedbackText : Model.FirstOrDefault().ProviderFeedbackText);}
                                    @Html.DropDownListFor(model => Model.FirstOrDefault().ProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), new { @style = "display:none", @class = "form-control CoderDetails" })

                                    <div title="@title" class="col-md-3 input-group">
                                        <div class="form-control CoderDetails ControlHeight" style="line-height:2.5;overflow:hidden">
                                            <span style="white-space:nowrap">

                                                @if (!string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderFeedbackText))
                                                {
                                                    <label style="color: red;">@ProviderFeedbackText</label>
                                                    <label style="color:green">@QAProviderFeedbackText</label>
                                                }
                                                else
                                                {
                                                    <label style="color: green;">@ProviderFeedbackText</label>
                                                }
                                            </span>
                                        </div>
                                        @{ Show = (string.IsNullOrEmpty(Model.FirstOrDefault().ShadowQAProviderFeedbackRemarks) ? "display:none" : "display:flex");}
                                        @{Accepted = (string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderFeedbackRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
                                        @{Rejected = (string.IsNullOrEmpty(Model.FirstOrDefault().QAProviderFeedbackRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}


                                    </div>
                                    <div class="col-md-3 input-group CoderCorrections Feedback" style="@Show">
                                        @Html.TextBoxFor(model => Model.FirstOrDefault().QAProviderFeedbackRemarks, new { @class = "form-control ControlHeight" })
                                    </div>
                                    <div class="col-md-3 input-group">
                                        @Html.DropDownListFor(model => Model.FirstOrDefault().ShadowQAProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), new { @style = @Show, @id = string.Format("Feedback_{0}1", @tabIndex), @class = "form-control QARevised ControlHeight" })
                                        <div class="input-group-append ControlHeight" style="@Show">
                                            <span class="input-group-text AcceptRejectWidth AcceptRejectWidth_@tabIndex">
                                                &nbsp;<i id="Feedback_@tabIndex" data="@tabIndex" class="@Accepted AdjustAcceptReject AdjustAcceptReject_@tabIndex" aria-hidden="true"></i>
                                                &nbsp;<i id="Feedback_@tabIndex" data="@tabIndex" class="@Rejected AdjustReject_@tabIndex" aria-hidden="true"></i>
                                            </span>
                                        </div>
                                    </div>
                                    <div title="@Model.FirstOrDefault().ShadowQAProviderFeedbackRemarks" class="col-md-3 input-group">
                                        @Html.TextBoxFor(model => model.FirstOrDefault().ShadowQAProviderFeedbackRemarks, new { @style = @Show, @class = "form-control QARevised ControlHeight", @id = string.Format("Feedback_{0}2", @tabIndex) })
                                    </div>
                                </div>
                                <div class="clearfix"></div>
                                <div class="col-md-6">
                                    <div class="card">
                                        <div class="card-body">
                                            <h4 class="card-title">QA Details</h4>
                                        </div>
                                        <div class="card-body">
                                            <div class="col-12">
                                                <div class="row mb-3">
                                                    <div class="col-lg-6">
                                                        <div class="form-group row">
                                                            <label class="col-md-5 m-t-15">
                                                                Error Type
                                                            </label>
                                                            <div class="col-md-7">
                                                                @Html.DropDownListFor(model => model.FirstOrDefault().QADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), new { @class = "form-control ControlHeight", @readonly = "readonly", @style = "pointer-events: none;" })
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="card">
                                        <div class="card-body">
                                            <h4 class="card-title">Shadow QA Details</h4>
                                        </div>
                                        <div class="card-body">
                                            <div class="col-12">
                                                <div class="row mb-3">
                                                    <div class="col-lg-6">
                                                        <div class="form-group row">
                                                            <label class="col-md-3 m-t-15">
                                                                Error Type
                                                            </label>
                                                            <div class="col-md-7">
                                                                @Html.DropDownListFor(model => model.FirstOrDefault().ShadowQADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), "--Select--", new { @class = "form-control ControlHeight ShadowQAErroryType", @readonly = "readonly", @id = string.Format("ShadowQAErrorType_{0}", tabIndex), @onchange = "ShadowQAErrorType('" + tabIndex + "')" })
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-6">
                                                        <div class="form-group row">
                                                            <div class="col-md-12">
                                                                <button id="btnsubmit" type="button" class="btn btn-success">Submit</button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="tab-pane" id="@string.Format("claim{0}", tabIndex)" role="tabpanel">
                            <div class="p-20" id="@string.Format("tabDiv{0}", tabIndex)">
                                <partial name="_ShadowQARejectedClaim" model=tabitem />
                            </div>
                        </div>
                    }
                    tabIndex = tabIndex + 1;
                }
            }
        </div>

    </div>


</div>


<style>
    .errMsg {
        font-weight: bold;
        font-size: 20px;
    }

    #sortable-1 {
        list-style-type: none;
        margin: 0;
        padding: 0;
        width: 25%;
    }

    /*     #sortable-1 li {
                    margin: 0 3px 3px 3px;
                    padding: 0.4em;
                    padding-left: 1.5em;
                    font-size: 17px;
                    height: 16px;
                }*/

    .default {
        background: #cedc98;
        border: 1px solid #DDDDDD;
        color: #333333;
    }

    .custom-control-label:before {
        left: -35px;
    }

    .custom-control-label:after {
        left: -35px;
    }

    .custom-control {
        padding-left: 0rem;
    }

    .ControlHeight {
        height: 32px !important;
    }

    .AcceptRejectWidth {
        max-width: 50px;
    }

    .AdjustAcceptReject {
        margin-left: -13px;
    }

    .AdjustSerialNumber {
        max-width: 25px;
        padding-left: 5px;
    }
</style>

