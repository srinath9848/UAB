@model UAB.DTO.ChartSummaryDTO
<div class="col-md-12">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">
                @if (Model.CodedBy != null)
                {
                    <span>Coded by : <label style="color:black;">@Model.CodedBy</label></span>
                }
                @if (Model.QABy != null)
                {
                    <span>
                        & QA by : <label style="color:black;"> @Model.QABy </label>
                    </span>
                }
                @if (Model.ShadowQABy != null)
                {
                    <span>
                        & ShadowQA by : <label style="color:black;"> @Model.ShadowQABy </label>
                    </span>
                }

            </h4>
        </div>
        @Html.HiddenFor(model => model.CodingDTO.ClinicalCaseID, new { @class = "form-control" })
        @Html.Hidden("hdnPayorID")
        @Html.Hidden("hdnProviderID")
        @Html.Hidden("hdnCpt")
        @Html.Hidden("hdnMod")
        @Html.Hidden("hdnDx")
        @Html.Hidden("hdnProviderFeedbackID")

        @Html.Hidden("hdnPayorIDReject")
        @Html.Hidden("hdnProviderIDReject")
        @Html.Hidden("hdnCptReject")
        @Html.Hidden("hdnModReject")
        @Html.Hidden("hdnDxReject")
        @Html.Hidden("hdnProviderFeedbackIDReject")
        <div class="form-group row">
            <label class="col-md-2 m-t-15"></label>
            <div class="custom-control custom-checkbox col-md-2 input-group" id="divChkAll">
                <input type="checkbox" class="custom-control-input ShadowQADetails" id="chkAll">
                <label class="custom-control-label" for="chkAll">Accept All</label>
            </div>
            <div class="custom-control col-md-2 input-group QAComments">
                <label class="" style="margin-left:10px;">Coder/QA</label>
            </div>
            <div class="custom-control col-md-3 input-group QAComments" style="margin-left:-54px;">
                <label class="">ShadowQA Corrections</label>
            </div>
            <div class="custom-control col-md-2 input-group QAComments" style="margin-left:-54px;">
                <label class="">ShadowQA Comments</label>
            </div>
            <div class="custom-control col-md-2 input-group CoderComments" style="display:flex;margin-left:70px;">
                <label class="">QA Comments</label>
            </div>
        </div>
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15">Payor</label>
            @{int len = (!string.IsNullOrEmpty(Model.QAPayorText) ? 10 : 20); }
            @{string PayorText = (Model.PayorText?.Length > len) ? Model.PayorText.Substring(0, len) + ".." : Model.PayorText;}
            @{string QAPayorText = (Model.QAPayorText?.Length > len) ? "/" + Model.QAPayorText.Substring(0, len) + ".." : "/" + Model.QAPayorText;}
            @{string title = (!string.IsNullOrEmpty(Model.QAPayorText) ? Model.PayorText + "/" + Model.QAPayorText : Model.PayorText);}
            @Html.DropDownListFor(model => model.PayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), new { @style = "display:none", @class = "form-control CoderDetails" })
            <div title="@title" class="col-md-3 lessWidth input-group">
                <div name="PayorText" class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
                    <span style="white-space:nowrap">
                        <label style="color: green;">@PayorText</label>
                        @if (!string.IsNullOrEmpty(Model.QAPayorText))
                        {
                            <label style="color:red">@QAPayorText</label>
                        }
                    </span>
                </div>
            </div>
            @{string Show = (string.IsNullOrEmpty(Model.ShadowQAPayorRemarks) ? "visibility:hidden" : "display:flex");}
            <div class="col-md-3 lessWidth input-group" style="@Show">
                @Html.DropDownListFor(model => model.ShadowQAPayorID, new SelectList(@ViewBag.Payors, "ID", "Name"), new { @id = "PayorID1", @class = "form-control QARevised" })
            </div>
            <div title="@Model.ShadowQAPayorRemarks" class="col-md-2 input-group" style="@Show">
                <input type="text" class="form-control QARemarks" value="@Model.ShadowQAPayorRemarks" />
            </div>
            @{string Accepted = (string.IsNullOrEmpty(Model.RevisedPayorRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
            @{string Rejected = (string.IsNullOrEmpty(Model.RevisedPayorRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

            <div class="input-group-append CoderCorrections" style="@Show">
                <span class="input-group-text">
                    &nbsp;<i id="Payor" title="PayorID1" class="@Accepted" aria-hidden="true"></i>
                    &nbsp;<i id="Payor" title="PayorID1" class="@Rejected" aria-hidden="true"></i>
                </span>
            </div>
            <div class="col-md-3 input-group CoderCorrections" style="@Show">
                @Html.TextBoxFor(model => model.RevisedPayorRemarks, new { @class = "form-control", @id = "RevisedPayorRemarks" })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15">Provider</label>
            @{ len = (!string.IsNullOrEmpty(Model.QAProviderText) ? 10 : 20); }
            @{string ProviderText = (Model.ProviderText?.Length > len) ? Model.ProviderText.Substring(0, len) + ".." : Model.ProviderText;}
            @{string QAProviderText = (Model.QAProviderText?.Length > len) ? "/" + Model.QAProviderText.Substring(0, len) + ".." : "/" + Model.QAProviderText;}
            @{title = (!string.IsNullOrEmpty(Model.QAProviderText) ? Model.ProviderText + "/" + Model.QAProviderText : Model.ProviderText);}
            @{Accepted = (string.IsNullOrEmpty(Model.RevisedProviderRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
            @{Rejected = (string.IsNullOrEmpty(Model.RevisedProviderRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}
            @Html.DropDownListFor(model => model.ProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), new { @style = "display:none", @class = "form-control CoderDetails" })
            <div title="@title" class="col-md-3 lessWidth input-group">
                <div class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
                    <span style="white-space:nowrap">
                        <label style="color: green;">@ProviderText</label>
                        @if (!string.IsNullOrEmpty(Model.QAProviderText))
                        {
                            <label style="color:red">@QAProviderText</label>
                        }
                    </span>
                </div>
            </div>
            @{Show = (string.IsNullOrEmpty(Model.ShadowQAProviderRemarks) ? "visibility:hidden" : "display:flex");}
            <div class="col-md-3 lessWidth input-group" style="@Show">
                @Html.DropDownListFor(model => model.ShadowQAProviderID, new SelectList(@ViewBag.Providers, "ID", "Name"), new { @id = "ProviderID1", @class = "form -control CoderDetails" })
            </div>
            <div title="@Model.ShadowQAProviderRemarks" class="col-md-2 input-group" style="@Show">
                <input type="text" class="form-control QARemarks" value="@Model.ShadowQAProviderRemarks" />
            </div>
            <div class="input-group-append CoderCorrections" style="@Show">
                <span class="input-group-text">
                    &nbsp;<i id="Provider" title="ProviderID1" class="@Accepted" aria-hidden="true"></i>
                    &nbsp;<i id="Provider" title="ProviderID1" class="@Rejected" aria-hidden="true"></i>
                </span>
            </div>
            <div class="col-md-3 input-group CoderCorrections" style="@Show">
                @Html.TextBoxFor(model => model.RevisedProviderRemarks, new { @class = "form-control", @id = "RevisedProviderRemarks" })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15">CPT</label>
            @{len = (!string.IsNullOrEmpty(Model.QACPTCode) ? 10 : 20); }
            @{string CPTCode = (Model.CPTCode?.Length > len) ? Model.CPTCode.Substring(0, len) + ".." : Model.CPTCode;}
            @{string QACPTCode = (Model.QACPTCode?.Length > len) ? "/" + Model.QACPTCode.Substring(0, len) + ".." : "/" + Model.QACPTCode;}
            @{title = (!string.IsNullOrEmpty(Model.QACPTCode) ? Model.CPTCode + "/" + Model.QACPTCode : Model.CPTCode);}
            @Html.TextAreaFor(model => model.CPTCode, new { @style = "display:none", @class = "form-control CoderDetails" })

            @{Accepted = (string.IsNullOrEmpty(Model.QACPTCodeRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
            @{Rejected = (string.IsNullOrEmpty(Model.QACPTCodeRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

            <div title="@title" class="col-md-3 lessWidth input-group">
                <div class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
                    <span style="white-space:nowrap">
                        <label style="color: green;">@CPTCode</label>
                        @if (!string.IsNullOrEmpty(Model.QACPTCode))
                        {
                            <label style="color:red">@QACPTCode</label>
                        }
                    </span>
                </div>
            </div>
            @{Show = (string.IsNullOrEmpty(Model.ShadowQACPTCodeRemarks) ? "visibility:hidden" : "display:flex");}
            <div class="col-md-3 lessWidth input-group" style="@Show">
                @Html.TextAreaFor(model => model.ShadowQACPTCode, new { @id = "CPTCode1", @class = "form-control CoderDetails" })
            </div>
            <div title="@Model.ShadowQACPTCodeRemarks" class="col-md-2 input-group" style="@Show">
                <input type="text" class="form-control QARemarks" value="@Model.ShadowQACPTCodeRemarks" />
            </div>
            <div class="input-group-append CoderCorrections" style="@Show">
                <span class="input-group-text">
                    &nbsp;<i id="CPT" title="CPTCode1" class="@Accepted" aria-hidden="true"></i>
                    &nbsp;<i id="CPT" title="CPTCode1" class="@Rejected" aria-hidden="true"></i>
                </span>
            </div>
            <div class="col-md-3 input-group CoderCorrections" style="@Show">
                @Html.TextBoxFor(model => model.RevisedCPTRemarks, new { @class = "form-control", @id = "RevisedCPTRemarks" })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15">Mod</label>
            @{len = (!string.IsNullOrEmpty(Model.QAMod) ? 10 : 20); }
            @{string Mod = (Model.Mod?.Length > len) ? Model.Mod.Substring(0, len) + ".." : Model.Mod;}
            @{string QAMod = (Model.QAMod?.Length > len) ? "/" + Model.QAMod.Substring(0, len) + ".." : "/" + Model.QAMod;}
            @{title = (!string.IsNullOrEmpty(Model.QAMod) ? Model.Mod + "/" + Model.QAMod : Model.Mod);}
            @Html.TextAreaFor(model => model.Mod, new { @style = "display:none", @class = "form-control CoderDetails" })
            @{Accepted = (string.IsNullOrEmpty(Model.QAModRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
            @{Rejected = (string.IsNullOrEmpty(Model.QAModRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

            <div title="@title" class="col-md-3 lessWidth input-group">
                <div class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
                    <span style="white-space:nowrap">
                        <label style="color: green;">@Mod</label>
                        @if (!string.IsNullOrEmpty(Model.QAMod))
                        {
                            <label style="color:red">@QAMod</label>
                        }
                    </span>
                </div>
            </div>
            @{Show = (string.IsNullOrEmpty(Model.ShadowQAModRemarks) ? "visibility:hidden" : "display:flex");}
            <div class="col-md-3 lessWidth input-group" style="@Show">
                @Html.TextAreaFor(model => model.ShadowQAMod, new { @id = "Mod1", @class = "form-control CoderDetails" })
            </div>
            <div title="@Model.ShadowQAModRemarks" class="col-md-2 input-group" style="@Show">
                <input type="text" class="form-control QARemarks" value="@Model.ShadowQAModRemarks" />
            </div>
            <div class="input-group-append CoderCorrections" style="@Show">
                <span class="input-group-text">
                    &nbsp;<i id="Mod" title="Mod1" class="@Accepted" aria-hidden="true"></i>
                    &nbsp;<i id="Mod" title="Mod1" class="@Rejected" aria-hidden="true"></i>
                </span>
            </div>
            <div class="col-md-3 input-group CoderCorrections" style="@Show">
                @Html.TextBoxFor(model => model.RevisedModRemarks, new { @class = "form-control", @id = "RevisedModRemarks" })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15">Dx</label>
            @{len = (!string.IsNullOrEmpty(Model.QADx) ? 10 : 20); }
            @{string Dx = (Model.Dx?.Length > len) ? Model.Dx.Substring(0, len) + ".." : Model.Dx;}
            @{string QADx = (Model.QADx?.Length > len) ? "/" + Model.QADx.Substring(0, len) + ".." : "/" + Model.QADx;}
            @{title = (!string.IsNullOrEmpty(Model.QADx) ? Model.Dx + "/" + Model.QADx : Model.Dx);}
            @Html.TextAreaFor(model => model.Dx, new { @style = "display:none", @class = "form-control CoderDetails" })
            @{Accepted = (string.IsNullOrEmpty(Model.RevisedDXRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
            @{Rejected = (string.IsNullOrEmpty(Model.RevisedDXRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

            <div title="@title" class="col-md-3 lessWidth input-group">
                <div class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
                    <span style="white-space:nowrap">
                        <label style="color: green;">@Dx</label>
                        @if (!string.IsNullOrEmpty(Model.QADx))
                        {
                            <label style="color:red">@QADx</label>
                        }
                    </span>
                </div>
            </div>
            @{Show = (string.IsNullOrEmpty(Model.ShadowQADxRemarks) ? "visibility:hidden" : "display:flex");}
            <div class="col-md-3 lessWidth input-group" style="@Show">
                @Html.TextAreaFor(model => model.ShadowQADx, new { @id = "Dx1", @class = "form-control CoderDetails" })
            </div>
            <div title="@Model.ShadowQADxRemarks" class="col-md-2 input-group" style="@Show">
                <input type="text" class="form-control QARemarks" value="@Model.ShadowQADxRemarks" />
            </div>
            <div class="input-group-append CoderCorrections" style="@Show">
                <span class="input-group-text">
                    &nbsp;<i id="DX" title="Dx1" class="@Accepted" aria-hidden="true"></i>
                    &nbsp;<i id="DX" title="Dx1" class="@Rejected" aria-hidden="true"></i>
                </span>
            </div>
            <div class="col-md-3 input-group CoderCorrections" style="@Show">
                @Html.TextBoxFor(model => model.RevisedDXRemarks, new { @class = "form-control", @id = "RevisedDXRemarks" })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-md-3 lessWidth m-t-15"> Feedback to Provider</label>
            @{len = (!string.IsNullOrEmpty(Model.QAProviderFeedbackText) ? 10 : 20); }
            @{string ProviderFeedbackText = (Model.ProviderFeedbackText?.Length > len) ? Model.ProviderFeedbackText.Substring(0, len) + ".." : Model.ProviderFeedbackText;}
            @{string QAProviderFeedbackText = (Model.QAProviderFeedbackText?.Length > len) ? "/" + Model.QAProviderFeedbackText.Substring(0, len) + ".." : "/" + Model.QAProviderFeedbackText;}
            @{title = (!string.IsNullOrEmpty(Model.QAProviderFeedbackText) ? Model.ProviderFeedbackText + "/" + Model.QAProviderFeedbackText : Model.ProviderFeedbackText);}
            @Html.DropDownListFor(model => model.ProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), new { @style = "display:none", @class = "form-control CoderDetails" })
            @{Accepted = (string.IsNullOrEmpty(Model.RevisedProviderFeedbackRemarks) ? "fa fa-check-circle fa-lg accept" : "fa fa-check-circle fa-lg");}
            @{Rejected = (string.IsNullOrEmpty(Model.RevisedProviderFeedbackRemarks) ? "fa fa-times-circle fa-lg" : "fa fa-times-circle fa-lg reject");}

            <div title="@title" class="col-md-3 lessWidth input-group">
                <div class="form-control CoderDetails" style="line-height:2.5;overflow:hidden">
                    <span style="white-space:nowrap">
                        <label style="color: green;">@ProviderFeedbackText</label>
                        @if (!string.IsNullOrEmpty(Model.QAProviderFeedbackText))
                        {
                            <label style="color:red">@QAProviderFeedbackText</label>
                        }
                    </span>
                </div>
            </div>
            @{Show = (string.IsNullOrEmpty(Model.ShadowQAProviderFeedbackRemarks) ? "visibility:hidden" : "display:flex");}
            <div class="col-md-3 lessWidth input-group" style="@Show">
                @Html.DropDownListFor(model => model.ShadowQAProviderFeedbackID, new SelectList(@ViewBag.ProviderFeedbacks, "ID", "Name"), new { @class = "form-control QARevised", @id = "Feedback1" })
            </div>
            <div title="@Model.ShadowQAProviderFeedbackRemarks" class="col-md-2 input-group" style="@Show">
                <input type="text" class="form-control QARemarks" value="@Model.ShadowQAProviderFeedbackRemarks" />
            </div>
            <div class="input-group-append CoderCorrections" style="@Show">
                <span class="input-group-text">
                    &nbsp;<i id="ProviderFeedback" title="Feedback1" class="@Accepted" aria-hidden="true"></i>
                    &nbsp;<i id="ProviderFeedback" title="Feedback1" class="@Rejected" aria-hidden="true"></i>
                </span>
            </div>
            <div class="col-md-3 input-group CoderCorrections" style="@Show">
                @Html.TextBoxFor(model => model.RevisedProviderFeedbackRemarks, new { @class = "form-control", @id = "RevisedProviderFeedbackRemarks" })
            </div>
        </div>
        <div class="form-group row">
            @*<label class="col-md-3 lessWidth m-t-15">Coder Questions</label>
            <div class="col-md-3 lessWidth">
                @Html.TextAreaFor(model => model.CoderQuestion, new { @class = "form-control CoderDetails" })
            </div>*@
            <label class="col-md-3 lessWidth m-t-15">Note Title</label>
            <div class="col-md-3 lessWidth">
                @Html.TextAreaFor(model => model.NoteTitle, new { @class = "form-control CoderDetails" })
            </div>
        </div>
    </div>

    <div class="clearfix"></div>
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">QA Details</h4>
        </div>
        <div class="card-body">
            <div class="col-12">
                <div class="row mb-3">
                    <div class="col-lg-6">
                        <div class="form-group row">
                            <label class="col-md-3 m-t-15">
                                Error Type
                            </label>
                            <div class="col-md-7">
                                @Html.DropDownListFor(model => model.QADTO.ErrorType, new SelectList(@ViewBag.ErrorTypes, "ID", "Name"), "--Select--", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.QADTO.ErrorType, null, new { @class = "text-danger ErrorType" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group row">
                            <label class="col-md-5 m-t-15"></label>
                            <div class="col-md-7">
                                <button id="btnsubmit" type="submit" class="btn btn-success">Submit</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<style>
    .errMsg {
        font-weight: bold;
        font-size: 20px;
    }

    #sortable-1 {
        list-style-type: none;
        margin: 0;
        padding: 0;
        width: 25%;
    }

    /*     #sortable-1 li {
                    margin: 0 3px 3px 3px;
                    padding: 0.4em;
                    padding-left: 1.5em;
                    font-size: 17px;
                    height: 16px;
                }*/

    .default {
        background: #cedc98;
        border: 1px solid #DDDDDD;
        color: #333333;
    }
    .custom-control-label:before {
        left: -35px;
    }

    .custom-control-label:after {
        left: -35px;
    }

    .custom-control {
        padding-left: 0rem;
    }
</style>
<script src="~/dashboardassets/libs/jquery/dist/jquery.min.js"></script>
<script type="text/javascript">
    $("#PayorID1").attr('title', $("#PayorID1 option:selected").text());
    $("#ProviderID").attr('title', $("#ProviderID option:selected").text());
    $("#ProviderFeedbackID").attr('title', $("#ProviderFeedbackID option:selected").text());
</script>
